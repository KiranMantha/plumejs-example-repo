"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[394],{394:(e,t,s)=>{s.d(t,{wA:()=>b,B_:()=>f,GS:()=>S,Th:()=>Renderer,D7:()=>k,dy:()=>i,sY:()=>l,uA:()=>w});var n=s(905);const o=new class{map=new Map;register(e,t){if(this.map.get(e))throw Error(`${e} is already registered service.`);this.map.set(e,t)}getService(e){const t=this.map.get(e);if(t)return t;throw Error(`${e} is not a registered provider.`)}clear(){this.map=new Map}},a=(e,t,s)=>{const n=[];for(let e=0;e<t.length;e++)"Renderer"!==t[e]?n.push(o.getService(t[e])):n.push(s);return n.length>0?new e(...n):new e},r=new class{globalStyles;style_registry;isRootNodeSet;globalStyleTag;constructor(){try{this.globalStyles=new CSSStyleSheet}catch(e){this.globalStyles=""}this.isRootNodeSet=!1,this.globalStyleTag=null}getComputedCss=(e="")=>{let t=[];const s=new CSSStyleSheet;if(s.insertRule(":host { display: block; }"),t=[this.globalStyles,s],e){const s=new CSSStyleSheet;s.replace(e),t.push(s)}return t}},{html:i,render:l}=(()=>{const e=/([^\s\\>"'=]+)\s*=\s*(['"]?)$/,t=/<[a-z][^>]+$/i,s=/^attr([^ ]+)/,n=/^insertNode([^ ]+)/,o=e=>{const t={"&":"&amp;","<":"&lt;",">":"&gt;","(":"%28",")":"%29"};let s=JSON.stringify(e);const n=e=>t[e]||e;return s=(e=>e.replace(/[&<>\(\)]/g,n))(s),JSON.parse(s)},a=(e,t)=>{const s=e.options,n=Array.isArray(t)?t:[t];let o,a,r=s.length;for(;r--;){a=s[r];const e=a.getAttribute("value")??(a.textContent.match(/[^\x20\t\r\n\f]+/g)||[]).join(" ");(a.selected=n.indexOf(e)>-1)&&(o=!0)}o||(e.selectedIndex=-1)};return{html:(r,...i)=>{let l="";const{length:c}=r;for(let s=1;s<c;s++){const n=i[s-1];let o=!1;l+=r[s-1],e.test(l)&&t.test(l)&&(l=l.replace(e,((e,t,n)=>`attr${s-1}=${n||'"'}${t}${n?"":'"'}`)),o=!0),o||(Array.isArray(n)||n instanceof DocumentFragment?l+=`\x3c!--insertNode${s-1}--\x3e`:l+=n)}l+=r[c-1];const d=(e=>{const t=document.createElement("template");return t.innerHTML=e,t.content})(l.trim());return((e,t)=>{const n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null);let r=n.nextNode();for(;r;){if(r.eventSubscriptions=[],r.hasAttributes()){const e=Array.from(r.attributes).filter((e=>s.test(e.nodeName)));for(const{nodeName:n,nodeValue:i}of e){const e=s.exec(n)[1];switch(!0){case/^on+/.test(i):{const s=i.slice(2).toLowerCase();r.removeEventListener(s,t[e]),r.addEventListener(s,t[e]);break}case/ref/.test(i):t[e](r);break;case/^data-+/.test(i):r.setAttribute(`data-${i}`,o(t[e]));break;case/^aria-+/.test(i):r.setAttribute(`aria-${i}`,o(t[e]));break;case/class/.test(i):t[e]?r.classList.add(...t[e].split(" ")):r.setAttribute("class","");break;case/value/.test(i):"select"===r.nodeName.toLowerCase()?a(r,t[e]):r.value=o(t[e]);break;case/disabled/.test(i):case/checked/.test(i):t[e]?r.setAttribute(i,t[e]):r.removeAttribute(i);break;default:r.setAttribute(i,o(t[e]))}r.removeAttribute(n)}}r=n.nextNode()}})(d,i),((e,t)=>{const s=document.createTreeWalker(e,NodeFilter.SHOW_COMMENT,null);let o,a=s.nextNode();for(;a;){if(o=n.exec(a.data)){const n=Array.isArray(t[o[1]])?t[o[1]]:[t[o[1]]];a.replaceWith(...n),s.currentNode=e}a=s.nextNode()}})(d,i),d},render:(e,t)=>{e.textContent="",e.appendChild(t)}}})();class Renderer{shadowRoot;update;emitEvent}Symbol("klass");const c=(()=>{try{return new CSSStyleSheet,!1}catch(e){return!0}})(),d=(e,t,s,n=!1)=>{e.addEventListener(t,s,n);return()=>{e.removeEventListener(t,s,n)}},h="data-compid",u={selector:"",root:!1,styles:""},p=(e,t=null)=>{const s=document.createElement("style");return s.innerHTML=e,t&&t.appendChild(s),s},m=(e,t,s)=>{if((e={...u,...e}).styles=e.styles.toString(),e.root&&!r.isRootNodeSet)r.isRootNodeSet=!0,e.styles&&(p(e.styles,document.head),r.globalStyles.replace(e.styles));else if(e.root&&r.isRootNodeSet)throw Error("Cannot register duplicate root component in "+e.selector+" component");window.customElements.define(e.selector,class extends HTMLElement{klass;shadow;componentStyleTag=null;eventSubscriptions=[];constructor(){if(super(),this.shadow=this.attachShadow({mode:"open"}),!c){const t=r.getComputedCss(e.styles);this.shadow.adoptedStyleSheets=t}this.update=this.update.bind(this),this.emitEvent=this.emitEvent.bind(this),this.setProps=this.setProps.bind(this),this.getInstance=this.getInstance.bind(this)}emulateComponent(){if(c&&e.styles){const n=(new Date).getTime()+Math.floor(1e3*Math.random()+1),o=(t=e.styles,s=`[data-compid="${n.toString()}"]`,t&&(t=s+" "+t.toString().replace("}",` } ${s} `)),t);this.componentStyleTag=p(o),this.setAttribute(h,n.toString())}var t,s}connectedCallback(){this.emulateComponent();const e=new Renderer;e.update=this.update,e.shadowRoot=this.shadow,e.emitEvent=this.emitEvent,this.klass=a(t,s,e),this.klass.beforeMount&&this.klass.beforeMount(),this.update(),this.klass.mount&&this.klass.mount(),this.eventSubscriptions.push(d(window,"onLanguageChange",(()=>{this.update()})))}update(){l(this.shadow,this.klass.render.bind(this.klass)()),c&&(e.styles&&this.shadow.insertBefore(this.componentStyleTag,this.shadow.childNodes[0]),r.globalStyleTag&&this.shadow.insertBefore(document.importNode(r.globalStyleTag,!0),this.shadow.childNodes[0]))}emitEvent(e,t,s=!0){const n=new CustomEvent(e,{detail:t,bubbles:s});this.dispatchEvent(n)}setProps(e){for(const[t,s]of Object.entries(e))this.klass[t]=s;this.klass.onPropsChanged&&this.klass.onPropsChanged(),this.update()}getInstance(){return this.klass}disconnectedCallback(){if(this.componentStyleTag&&this.componentStyleTag.remove(),this.klass.unmount&&this.klass.unmount(),this.eventSubscriptions?.length)for(const e of this.eventSubscriptions)e()}})},g=e=>(n.Hb.getMetadata("design:paramtypes",e)||[]).map((e=>e.name)),b=e=>t=>{if(e.selector.indexOf("-")<=0)throw new Error("You need at least 1 dash in the custom element name!");if(!window.customElements.get(e.selector)){const s=g(t);t.prototype.selector=e.selector,m(e,t,s)}},S=()=>e=>{const t=g(e),s=a(e,t);o.register(e.name,s)};var y=s(655);let f=class DomTransition{transition="";constructor(){this.whichTransitionEnd()}whichTransitionEnd(){const e=document.createElement("div").style,t={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"};for(const s in t)if(void 0!==e[s]){this.transition=t[s];break}}onTransitionEnd(e,t,s){let n=!1,o=null;const a=()=>{n||(n=!0,t&&t(),o(),o=null)};o=d(e,this.transition,(()=>{a()})),setTimeout(a,s)}};f=(0,y.gn)([S(),(0,y.w6)("design:paramtypes",[])],f);const w=e=>{const t={...e},[s,n]=(e=>{const t=e;return[t,e=>{let s;s="function"==typeof e?e(t):e,Object.assign(t,s)}]})(e);return[s,e=>t=>{const o=(e=>{let t;switch(e.nodeName&&e.nodeName.toLowerCase()){case"input":case"textarea":t=["radio","checkbox"].includes(e.type)?!!e.checked&&(null===e.value||"on"===e.value||e.value):e.value;break;case"select":{const s="select-one"===e.type,n=[...Array.from(e.options)].filter((e=>e.selected)).map((e=>e.value??(e.textContent.match(/[^\x20\t\r\n\f]+/g)||[]).join(" ")));t=s?n[0]:n;break}default:t=e.value}return t})(t.target);n((()=>(s[e]=o,s)))},()=>{Object.assign(s,t)}]};var v=s(949);let k=class TranslationService{_defaultLanguage="";setTranslate(e,t){(0,v.setTranslate)(e,t)}setDefaultLanguage(e){this._defaultLanguage=e,(0,v.setDefaultLanguage)(e);const t=new CustomEvent("onLanguageChange");window.dispatchEvent(t)}getCurrentLanguage(){return this._defaultLanguage}};k=(0,y.gn)([S()],k)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy8zOTQuYzQzMjAyMDI0Yjc3MTIxYmM2Y2IuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiIrTkFBQSxNQUFNLEVBQVcsSUFBSSxNQUNqQkEsSUFBTSxJQUFJQyxJQUNWQyxTQUFTQyxFQUFhQyxHQUNsQixHQUFLQyxLQUFLTCxJQUFJTSxJQUFJSCxHQUlkLE1BQU1JLE1BQU0sR0FBR0osb0NBSGZFLEtBQUtMLElBQUlRLElBQUlMLEVBQWFDLEdBTWxDSyxXQUFXTixHQUNQLE1BQU1DLEVBQVdDLEtBQUtMLElBQUlNLElBQUlILEdBQzlCLEdBQUlDLEVBQ0EsT0FBT0EsRUFHUCxNQUFNRyxNQUFNLEdBQUdKLG1DQUd2Qk8sUUFDSUwsS0FBS0wsSUFBTSxJQUFJQyxNQ25CakJVLEVBQWMsQ0FBQ0MsRUFBT0MsRUFBY0MsS0FDdEMsTUFBTUMsRUFBVyxHQUNqQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUgsRUFBYUksT0FBUUQsSUFDYixhQUFwQkgsRUFBYUcsR0FDYkQsRUFBU0csS0FBSyxhQUFvQkwsRUFBYUcsS0FHL0NELEVBQVNHLEtBQUtKLEdBR3RCLE9BQUlDLEVBQVNFLE9BQVMsRUFDWCxJQUFJTCxLQUFTRyxHQUdiLElBQUlILEdDZmJPLEVBQW9CLElBQUksTUFDMUJDLGFBQ0FDLGVBQ0FDLGNBQ0FDLGVBQ0FDLGNBQ0ksSUFDSW5CLEtBQUtlLGFBQWUsSUFBSUssY0FFNUIsTUFBT0MsR0FDSHJCLEtBQUtlLGFBQWUsR0FFeEJmLEtBQUtpQixlQUFnQixFQUNyQmpCLEtBQUtrQixlQUFpQixLQUUxQkksZUFBaUIsQ0FBQ0MsRUFBUyxNQUN2QixJQUFJQyxFQUFXLEdBQ2YsTUFBTUMsRUFBZ0IsSUFBSUwsY0FHMUIsR0FGQUssRUFBY0MsV0FBVyw2QkFDekJGLEVBQVcsQ0FBQ3hCLEtBQUtlLGFBQWNVLEdBQzNCRixFQUFRLENBQ1IsTUFBTUksRUFBUSxJQUFJUCxjQUNsQk8sRUFBTUMsUUFBUUwsR0FDZEMsRUFBU1gsS0FBS2MsR0FFbEIsT0FB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QUFXLENBQzVCcEMsS0FDRG9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BwbHVtZWpzL2NvcmUvZGlzdC9tanMvc3JjL2xpYi9zZXJ2aWNlX3Jlc29sdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9jb3JlL2Rpc3QvbWpzL3NyYy9saWIvaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BwbHVtZWpzL2NvcmUvZGlzdC9tanMvc3JjL2xpYi9jb21wb25lbnRSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvY29yZS9kaXN0L21qcy9zcmMvbGliL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BwbHVtZWpzL2NvcmUvZGlzdC9tanMvc3JjL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvY29yZS9kaXN0L21qcy9zcmMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9jb3JlL2Rpc3QvbWpzL3NyYy9saWIvcmVnaXN0ZXJFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9jb3JlL2Rpc3QvbWpzL3NyYy9saWIvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvY29yZS9kaXN0L21qcy9zcmMvbGliL2RvbVRyYW5zaXRpb24uc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvY29yZS9kaXN0L21qcy9zcmMvbGliL2hvb2tzL3VzZVN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9jb3JlL2Rpc3QvbWpzL3NyYy9saWIvaG9va3MvdXNlRm9ybUZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvY29yZS9kaXN0L21qcy9zcmMvbGliL3RyYW5zbGF0aW9uU2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBJbmplY3RvciA9IG5ldyAoY2xhc3Mge1xuICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICByZWdpc3RlcihzZXJ2aWNlTmFtZSwgaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hcC5nZXQoc2VydmljZU5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoc2VydmljZU5hbWUsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGAke3NlcnZpY2VOYW1lfSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgc2VydmljZS5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5tYXAuZ2V0KHNlcnZpY2VOYW1lKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHtzZXJ2aWNlTmFtZX0gaXMgbm90IGEgcmVnaXN0ZXJlZCBwcm92aWRlci5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxufSkoKTtcbmV4cG9ydCB7IEluamVjdG9yIH07XG4iLCJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJy4vc2VydmljZV9yZXNvbHZlcic7XG5jb25zdCBpbnN0YW50aWF0ZSA9IChrbGFzcywgZGVwZW5kZW5jaWVzLCByZW5kZXJlckluc3RhbmNlKSA9PiB7XG4gICAgY29uc3Qgc2VydmljZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZGVwZW5kZW5jaWVzW2ldICE9PSAnUmVuZGVyZXInKSB7XG4gICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKEluamVjdG9yLmdldFNlcnZpY2UoZGVwZW5kZW5jaWVzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKHJlbmRlcmVySW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBuZXcga2xhc3MoLi4uc2VydmljZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBrbGFzcygpO1xuICAgIH1cbn07XG5leHBvcnQgeyBpbnN0YW50aWF0ZSB9O1xuIiwiY29uc3QgY29tcG9uZW50UmVnaXN0cnkgPSBuZXcgKGNsYXNzIHtcbiAgICBnbG9iYWxTdHlsZXM7XG4gICAgc3R5bGVfcmVnaXN0cnk7XG4gICAgaXNSb290Tm9kZVNldDtcbiAgICBnbG9iYWxTdHlsZVRhZztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsU3R5bGVzID0gbmV3IENTU1N0eWxlU2hlZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxTdHlsZXMgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzUm9vdE5vZGVTZXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdHlsZVRhZyA9IG51bGw7XG4gICAgfVxuICAgIGdldENvbXB1dGVkQ3NzID0gKHN0eWxlcyA9ICcnKSA9PiB7XG4gICAgICAgIGxldCBjc29BcnJheSA9IFtdO1xuICAgICAgICBjb25zdCBkZWZhdWx0U3R5bGVzID0gbmV3IENTU1N0eWxlU2hlZXQoKTtcbiAgICAgICAgZGVmYXVsdFN0eWxlcy5pbnNlcnRSdWxlKGA6aG9zdCB7IGRpc3BsYXk6IGJsb2NrOyB9YCk7XG4gICAgICAgIGNzb0FycmF5ID0gW3RoaXMuZ2xvYmFsU3R5bGVzLCBkZWZhdWx0U3R5bGVzXTtcbiAgICAgICAgaWYgKHN0eWxlcykge1xuICAgICAgICAgICAgY29uc3Qgc2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuICAgICAgICAgICAgc2hlZXQucmVwbGFjZShzdHlsZXMpO1xuICAgICAgICAgICAgY3NvQXJyYXkucHVzaChzaGVldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNzb0FycmF5O1xuICAgIH07XG59KSgpO1xuZXhwb3J0IHsgY29tcG9uZW50UmVnaXN0cnkgfTtcbiIsImNvbnN0IHsgaHRtbCwgcmVuZGVyIH0gPSAoKCkgPT4ge1xuICAgIGNvbnN0IGlzQXR0cmlidXRlUmVnZXggPSAvKFteXFxzXFxcXD5cIic9XSspXFxzKj1cXHMqKFsnXCJdPykkLztcbiAgICBjb25zdCBpc05vZGVSZWdleCA9IC88W2Etel1bXj5dKyQvaTtcbiAgICBjb25zdCBhdHRyaWJ1dGVQcmVmaXggPSAnYXR0cic7XG4gICAgY29uc3QgYXR0cmlidXRlUmVnZXggPSAvXmF0dHIoW14gXSspLztcbiAgICBjb25zdCBpbnNlcnROb2RlUHJlZml4ID0gJ2luc2VydE5vZGUnO1xuICAgIGNvbnN0IGluc2VydE5vZGVSZWdleCA9IC9eaW5zZXJ0Tm9kZShbXiBdKykvO1xuICAgIGNvbnN0IF9zYW5pdGl6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhZ3NUb1JlcGxhY2UgPSB7XG4gICAgICAgICAgICAnJic6ICcmYW1wOycsXG4gICAgICAgICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICAgICAgICc+JzogJyZndDsnLFxuICAgICAgICAgICAgJygnOiAnJTI4JyxcbiAgICAgICAgICAgICcpJzogJyUyOSdcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHN0ciA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICBjb25zdCByZXBsYWNlVGFnID0gKHRhZykgPT4gdGFnc1RvUmVwbGFjZVt0YWddIHx8IHRhZztcbiAgICAgICAgY29uc3Qgc2FmZV90YWdzX3JlcGxhY2UgPSAoc3RyKSA9PiBzdHIucmVwbGFjZSgvWyY8PlxcKFxcKV0vZywgcmVwbGFjZVRhZyk7XG4gICAgICAgIHN0ciA9IHNhZmVfdGFnc19yZXBsYWNlKHN0cik7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gICAgfTtcbiAgICBjb25zdCBfc2V0VmFsdWVzRm9yRHJvcGRvd24gPSAobm9kZSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG5vZGUub3B0aW9ucywgdmFsdWVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgICAgIGxldCBvcHRpb25TZXQsIG9wdGlvbiwgaSA9IG9wdGlvbnMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBvcHRpb24gPSBvcHRpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpID8/IChvcHRpb24udGV4dENvbnRlbnQubWF0Y2goL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nKSB8fCBbXSkuam9pbignICcpO1xuICAgICAgICAgICAgaWYgKChvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgPiAtMSkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25TZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9uU2V0KSB7XG4gICAgICAgICAgICBub2RlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX2NyZWF0ZUZyYWdtZW50ID0gKG1hcmt1cCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgICAgdGVtcC5pbm5lckhUTUwgPSBtYXJrdXA7XG4gICAgICAgIHJldHVybiB0ZW1wLmNvbnRlbnQ7XG4gICAgfTtcbiAgICBjb25zdCBfYmluZEZyYWdtZW50cyA9IChmcmFnbWVudCwgdmFsdWVzKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihmcmFnbWVudCwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsIG51bGwpO1xuICAgICAgICBsZXQgbm9kZSA9IGVsZW1lbnRzV2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBub2RlLmV2ZW50U3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tQXR0cmlidXRlcyA9IEFycmF5LmZyb20obm9kZS5hdHRyaWJ1dGVzKS5maWx0ZXIoKGF0dHIpID0+IGF0dHJpYnV0ZVJlZ2V4LnRlc3QoYXR0ci5ub2RlTmFtZSkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyBub2RlTmFtZSwgbm9kZVZhbHVlIH0gb2YgY3VzdG9tQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gYXR0cmlidXRlUmVnZXguZXhlYyhub2RlTmFtZSlbMV07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAvXm9uKy8udGVzdChub2RlVmFsdWUpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnROYW1lID0gbm9kZVZhbHVlLnNsaWNlKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB2YWx1ZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAvcmVmLy50ZXN0KG5vZGVWYWx1ZSk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaV0obm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIC9eZGF0YS0rLy50ZXN0KG5vZGVWYWx1ZSk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShgZGF0YS0ke25vZGVWYWx1ZX1gLCBfc2FuaXRpemUodmFsdWVzW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIC9eYXJpYS0rLy50ZXN0KG5vZGVWYWx1ZSk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShgYXJpYS0ke25vZGVWYWx1ZX1gLCBfc2FuaXRpemUodmFsdWVzW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIC9jbGFzcy8udGVzdChub2RlVmFsdWUpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoLi4udmFsdWVzW2ldLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgL3ZhbHVlLy50ZXN0KG5vZGVWYWx1ZSk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0VmFsdWVzRm9yRHJvcGRvd24obm9kZSwgdmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBfc2FuaXRpemUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIC9kaXNhYmxlZC8udGVzdChub2RlVmFsdWUpOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAvY2hlY2tlZC8udGVzdChub2RlVmFsdWUpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShub2RlVmFsdWUsIHZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShub2RlVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShub2RlVmFsdWUsIF9zYW5pdGl6ZSh2YWx1ZXNbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShub2RlTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZSA9IGVsZW1lbnRzV2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IF9yZXBsYWNlSW5zZXJ0Tm9kZUNvbW1lbnRzID0gKGZyYWdtZW50LCB2YWx1ZXMpID0+IHtcbiAgICAgICAgY29uc3QgY29tbWVudHNXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGZyYWdtZW50LCBOb2RlRmlsdGVyLlNIT1dfQ09NTUVOVCwgbnVsbCk7XG4gICAgICAgIGxldCBub2RlID0gY29tbWVudHNXYWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgaWYgKChtYXRjaCA9IGluc2VydE5vZGVSZWdleC5leGVjKG5vZGUuZGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZXNMaXN0ID0gQXJyYXkuaXNBcnJheSh2YWx1ZXNbbWF0Y2hbMV1dKSA/IHZhbHVlc1ttYXRjaFsxXV0gOiBbdmFsdWVzW21hdGNoWzFdXV07XG4gICAgICAgICAgICAgICAgbm9kZS5yZXBsYWNlV2l0aCguLi5ub2Rlc0xpc3QpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRzV2Fsa2VyLmN1cnJlbnROb2RlID0gZnJhZ21lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gY29tbWVudHNXYWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaHRtbCA9ICh0ZW1wbGF0ZXMsIC4uLnZhbHVlcykgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0ZW1wbGF0ZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gdmFsdWVzW2kgLSAxXTtcbiAgICAgICAgICAgIGxldCBpc0F0dHJpYnV0ZVBhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZW1wbGF0ZXNbaSAtIDFdO1xuICAgICAgICAgICAgaWYgKGlzQXR0cmlidXRlUmVnZXgudGVzdChyZXN1bHQpICYmIGlzTm9kZVJlZ2V4LnRlc3QocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKGlzQXR0cmlidXRlUmVnZXgsIChfLCAkMSwgJDIpID0+IGAke2F0dHJpYnV0ZVByZWZpeH0ke2kgLSAxfT0keyQyIHx8ICdcIid9JHskMX0keyQyID8gJycgOiAnXCInfWApO1xuICAgICAgICAgICAgICAgIGlzQXR0cmlidXRlUGFydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQXR0cmlidXRlUGFydCkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhcmlhYmxlKSB8fCB2YXJpYWJsZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGA8IS0tJHtpbnNlcnROb2RlUHJlZml4fSR7aSAtIDF9LS0+YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJpYWJsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IHRlbXBsYXRlc1tsZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBfY3JlYXRlRnJhZ21lbnQocmVzdWx0LnRyaW0oKSk7XG4gICAgICAgIF9iaW5kRnJhZ21lbnRzKGZyYWdtZW50LCB2YWx1ZXMpO1xuICAgICAgICBfcmVwbGFjZUluc2VydE5vZGVDb21tZW50cyhmcmFnbWVudCwgdmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyID0gKHdoZXJlLCB3aGF0KSA9PiB7XG4gICAgICAgIHdoZXJlLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIHdoZXJlLmFwcGVuZENoaWxkKHdoYXQpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgaHRtbCwgcmVuZGVyIH07XG59KSgpO1xuZXhwb3J0IHsgaHRtbCwgcmVuZGVyIH07XG4iLCJjbGFzcyBSZW5kZXJlciB7XG4gICAgc2hhZG93Um9vdDtcbiAgICB1cGRhdGU7XG4gICAgZW1pdEV2ZW50O1xufVxuZXhwb3J0IHsgUmVuZGVyZXIgfTtcbiIsImNvbnN0IGtsYXNzID0gU3ltYm9sKCdrbGFzcycpO1xuY29uc3QgaXNPYmplY3QgPSAodmFsdWUpID0+IHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1VuZGVmaW5lZCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnO1xuY29uc3QgQ1NTX1NIRUVUX05PVF9TVVBQT1JURUQgPSAoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIG5ldyBDU1NTdHlsZVNoZWV0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufSkoKTtcbmNvbnN0IGZyb21WYW5pbGxhRXZlbnQgPSAodGFyZ2V0LCBldmVudE5hbWUsIG9uTmV4dCwgb3B0aW9ucyA9IGZhbHNlKSA9PiB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbk5leHQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uTmV4dCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG59O1xuZXhwb3J0IHsgaXNPYmplY3QsIGlzRnVuY3Rpb24sIGlzVW5kZWZpbmVkLCBrbGFzcywgQ1NTX1NIRUVUX05PVF9TVVBQT1JURUQsIGZyb21WYW5pbGxhRXZlbnQgfTtcbiIsImltcG9ydCB7IGNvbXBvbmVudFJlZ2lzdHJ5IH0gZnJvbSAnLi9jb21wb25lbnRSZWdpc3RyeSc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICcuL2h0bWwnO1xuaW1wb3J0IHsgaW5zdGFudGlhdGUgfSBmcm9tICcuL2luc3RhbmNlJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBDU1NfU0hFRVRfTk9UX1NVUFBPUlRFRCwgZnJvbVZhbmlsbGFFdmVudCB9IGZyb20gJy4vdXRpbHMnO1xuY29uc3QgQ09NUE9ORU5UX0RBVEFfQVRUUiA9ICdkYXRhLWNvbXBpZCc7XG5jb25zdCBERUZBVUxUX0NPTVBPTkVOVF9PUFRJT05TID0ge1xuICAgIHNlbGVjdG9yOiAnJyxcbiAgICByb290OiBmYWxzZSxcbiAgICBzdHlsZXM6ICcnXG59O1xuY29uc3QgY3JlYXRlU3R5bGVUYWcgPSAoY29udGVudCwgd2hlcmUgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB0YWcuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICB3aGVyZSAmJiB3aGVyZS5hcHBlbmRDaGlsZCh0YWcpO1xuICAgIHJldHVybiB0YWc7XG59O1xuY29uc3QgdHJhbnNmb3JtQ1NTID0gKHN0eWxlcywgc2VsZWN0b3IpID0+IHtcbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgIHN0eWxlcyA9IHNlbGVjdG9yICsgJyAnICsgc3R5bGVzLnRvU3RyaW5nKCkucmVwbGFjZSgnfScsIGAgfSAke3NlbGVjdG9yfSBgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlcztcbn07XG5jb25zdCByZWdpc3RlckVsZW1lbnQgPSAob3B0aW9ucywgdGFyZ2V0LCBkZXBlbmRlbmNpZXMpID0+IHtcbiAgICBvcHRpb25zID0geyAuLi5ERUZBVUxUX0NPTVBPTkVOVF9PUFRJT05TLCAuLi5vcHRpb25zIH07XG4gICAgb3B0aW9ucy5zdHlsZXMgPSBvcHRpb25zLnN0eWxlcy50b1N0cmluZygpO1xuICAgIGlmIChvcHRpb25zLnJvb3QgJiYgIWNvbXBvbmVudFJlZ2lzdHJ5LmlzUm9vdE5vZGVTZXQpIHtcbiAgICAgICAgY29tcG9uZW50UmVnaXN0cnkuaXNSb290Tm9kZVNldCA9IHRydWU7XG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlcykge1xuICAgICAgICAgICAgY3JlYXRlU3R5bGVUYWcob3B0aW9ucy5zdHlsZXMsIGRvY3VtZW50LmhlYWQpO1xuICAgICAgICAgICAgY29tcG9uZW50UmVnaXN0cnkuZ2xvYmFsU3R5bGVzLnJlcGxhY2Uob3B0aW9ucy5zdHlsZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMucm9vdCAmJiBjb21wb25lbnRSZWdpc3RyeS5pc1Jvb3ROb2RlU2V0KSB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgZHVwbGljYXRlIHJvb3QgY29tcG9uZW50IGluICcgKyBvcHRpb25zLnNlbGVjdG9yICsgJyBjb21wb25lbnQnKTtcbiAgICB9XG4gICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShvcHRpb25zLnNlbGVjdG9yLCBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAga2xhc3M7XG4gICAgICAgIHNoYWRvdztcbiAgICAgICAgY29tcG9uZW50U3R5bGVUYWcgPSBudWxsO1xuICAgICAgICBldmVudFN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3cgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgICAgIGlmICghQ1NTX1NIRUVUX05PVF9TVVBQT1JURUQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhZG9wdGVkU3R5bGVTaGVldHMgPSBjb21wb25lbnRSZWdpc3RyeS5nZXRDb21wdXRlZENzcyhvcHRpb25zLnN0eWxlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3cuYWRvcHRlZFN0eWxlU2hlZXRzID0gYWRvcHRlZFN0eWxlU2hlZXRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQgPSB0aGlzLmVtaXRFdmVudC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9wcyA9IHRoaXMuc2V0UHJvcHMuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0SW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZW11bGF0ZUNvbXBvbmVudCgpIHtcbiAgICAgICAgICAgIGlmIChDU1NfU0hFRVRfTk9UX1NVUFBPUlRFRCAmJiBvcHRpb25zLnN0eWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwICsgMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGlsZWRDU1MgPSB0cmFuc2Zvcm1DU1Mob3B0aW9ucy5zdHlsZXMsIGBbJHtDT01QT05FTlRfREFUQV9BVFRSfT1cIiR7aWQudG9TdHJpbmcoKX1cIl1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFN0eWxlVGFnID0gY3JlYXRlU3R5bGVUYWcoY29tcGlsZWRDU1MpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKENPTVBPTkVOVF9EQVRBX0FUVFIsIGlkLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy5lbXVsYXRlQ29tcG9uZW50KCk7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlckluc3RhbmNlID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgICAgICByZW5kZXJlckluc3RhbmNlLnVwZGF0ZSA9IHRoaXMudXBkYXRlO1xuICAgICAgICAgICAgcmVuZGVyZXJJbnN0YW5jZS5zaGFkb3dSb290ID0gdGhpcy5zaGFkb3c7XG4gICAgICAgICAgICByZW5kZXJlckluc3RhbmNlLmVtaXRFdmVudCA9IHRoaXMuZW1pdEV2ZW50O1xuICAgICAgICAgICAgdGhpcy5rbGFzcyA9IGluc3RhbnRpYXRlKHRhcmdldCwgZGVwZW5kZW5jaWVzLCByZW5kZXJlckluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoaXMua2xhc3MuYmVmb3JlTW91bnQgJiYgdGhpcy5rbGFzcy5iZWZvcmVNb3VudCgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMua2xhc3MubW91bnQgJiYgdGhpcy5rbGFzcy5tb3VudCgpO1xuICAgICAgICAgICAgdGhpcy5ldmVudFN1YnNjcmlwdGlvbnMucHVzaChmcm9tVmFuaWxsYUV2ZW50KHdpbmRvdywgJ29uTGFuZ3VhZ2VDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGUoKSB7XG4gICAgICAgICAgICByZW5kZXIodGhpcy5zaGFkb3csIHRoaXMua2xhc3MucmVuZGVyLmJpbmQodGhpcy5rbGFzcykoKSk7XG4gICAgICAgICAgICBpZiAoQ1NTX1NIRUVUX05PVF9TVVBQT1JURUQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnN0eWxlcyAmJiB0aGlzLnNoYWRvdy5pbnNlcnRCZWZvcmUodGhpcy5jb21wb25lbnRTdHlsZVRhZywgdGhpcy5zaGFkb3cuY2hpbGROb2Rlc1swXSk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50UmVnaXN0cnkuZ2xvYmFsU3R5bGVUYWcgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkb3cuaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmltcG9ydE5vZGUoY29tcG9uZW50UmVnaXN0cnkuZ2xvYmFsU3R5bGVUYWcsIHRydWUpLCB0aGlzLnNoYWRvdy5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbWl0RXZlbnQoZXZlbnROYW1lLCBkYXRhLCBhbGxvd0J1YmJsaW5nID0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgICAgZGV0YWlsOiBkYXRhLFxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IGFsbG93QnViYmxpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBzZXRQcm9wcyhwcm9wc09iaikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHNPYmopKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rbGFzc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmtsYXNzLm9uUHJvcHNDaGFuZ2VkICYmIHRoaXMua2xhc3Mub25Qcm9wc0NoYW5nZWQoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5rbGFzcztcbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50U3R5bGVUYWcgJiYgdGhpcy5jb21wb25lbnRTdHlsZVRhZy5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMua2xhc3MudW5tb3VudCAmJiB0aGlzLmtsYXNzLnVubW91bnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50U3Vic2NyaXB0aW9ucz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1bnN1YnNjcmliZSBvZiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9O1xuIiwiaW1wb3J0IHsgUmVmbGVjdGlvbiBhcyBSZWZsZWN0IH0gZnJvbSAnQGFicmFoYW0vcmVmbGVjdGlvbic7XG5pbXBvcnQgeyBpbnN0YW50aWF0ZSB9IGZyb20gJy4vaW5zdGFuY2UnO1xuaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi9yZWdpc3RlckVsZW1lbnQnO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuL3NlcnZpY2VfcmVzb2x2ZXInO1xuY29uc3QgZ2V0RGVwcyA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCB0eXBlcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgdGFyZ2V0KSB8fCBbXTtcbiAgICByZXR1cm4gdHlwZXMubWFwKChhKSA9PiBhLm5hbWUpO1xufTtcbmNvbnN0IENvbXBvbmVudCA9IChvcHRpb25zKSA9PiAodGFyZ2V0KSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuc2VsZWN0b3IuaW5kZXhPZignLScpIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCBhdCBsZWFzdCAxIGRhc2ggaW4gdGhlIGN1c3RvbSBlbGVtZW50IG5hbWUhJyk7XG4gICAgfVxuICAgIGlmICghd2luZG93LmN1c3RvbUVsZW1lbnRzLmdldChvcHRpb25zLnNlbGVjdG9yKSkge1xuICAgICAgICBjb25zdCBkZXBzID0gZ2V0RGVwcyh0YXJnZXQpO1xuICAgICAgICB0YXJnZXQucHJvdG90eXBlLnNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcjtcbiAgICAgICAgcmVnaXN0ZXJFbGVtZW50KG9wdGlvbnMsIHRhcmdldCwgZGVwcyk7XG4gICAgfVxufTtcbmNvbnN0IEluamVjdGFibGUgPSAoKSA9PiAodGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgZGVwcyA9IGdldERlcHModGFyZ2V0KTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbnRpYXRlKHRhcmdldCwgZGVwcyk7XG4gICAgSW5qZWN0b3IucmVnaXN0ZXIodGFyZ2V0Lm5hbWUsIGluc3RhbmNlKTtcbn07XG5jb25zdCBJbmplY3Rpb25Ub2tlbiA9IChuYW1lLCB0YXJnZXQpID0+IHtcbiAgICBJbmplY3Rvci5yZWdpc3RlcihuYW1lLCB0YXJnZXQpO1xufTtcbmV4cG9ydCB7IENvbXBvbmVudCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUsIF9fbWV0YWRhdGEgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IHsgZnJvbVZhbmlsbGFFdmVudCB9IGZyb20gJy4vdXRpbHMnO1xubGV0IERvbVRyYW5zaXRpb24gPSBjbGFzcyBEb21UcmFuc2l0aW9uIHtcbiAgICB0cmFuc2l0aW9uID0gJyc7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2hpY2hUcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICAgIHdoaWNoVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBzdHlsZW9iaiA9IGVsZW1lbnQuc3R5bGU7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25zID0ge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAgICAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICAgICAgTW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAgICAgT1RyYW5zaXRpb246ICdvdHJhbnNpdGlvbmVuZCdcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlb2JqW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zW3RdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uVHJhbnNpdGlvbkVuZChlbGVtZW50LCBjYiwgZHVyYXRpb24pIHtcbiAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5TdWJzY3JpYmVFdmVudCA9IG51bGw7XG4gICAgICAgIGNvbnN0IF9mbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYiAmJiBjYigpO1xuICAgICAgICAgICAgICAgIHVuU3Vic2NyaWJlRXZlbnQoKTtcbiAgICAgICAgICAgICAgICB1blN1YnNjcmliZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdW5TdWJzY3JpYmVFdmVudCA9IGZyb21WYW5pbGxhRXZlbnQoZWxlbWVudCwgdGhpcy50cmFuc2l0aW9uLCAoKSA9PiB7XG4gICAgICAgICAgICBfZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldFRpbWVvdXQoX2ZuLCBkdXJhdGlvbik7XG4gICAgfVxufTtcbkRvbVRyYW5zaXRpb24gPSBfX2RlY29yYXRlKFtcbiAgICBJbmplY3RhYmxlKCksXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtdKVxuXSwgRG9tVHJhbnNpdGlvbik7XG5leHBvcnQgeyBEb21UcmFuc2l0aW9uIH07XG4iLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3QgdXNlU3RhdGUgPSAob2JqKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gb2JqO1xuICAgIGNvbnN0IHJlZHVjZXIgPSAoZm4pID0+IHtcbiAgICAgICAgbGV0IG5ld1N0YXRlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gZm4oaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gZm47XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmFzc2lnbihpbml0aWFsU3RhdGUsIG5ld1N0YXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBbaW5pdGlhbFN0YXRlLCByZWR1Y2VyXTtcbn07XG5leHBvcnQgeyB1c2VTdGF0ZSB9O1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICcuL3VzZVN0YXRlJztcbmNvbnN0IF9nZXRUYXJnZXRWYWx1ZSA9ICh0YXJnZXQpID0+IHtcbiAgICBsZXQgdGFyZ2V0VmFsdWU7XG4gICAgc3dpdGNoICh0YXJnZXQubm9kZU5hbWUgJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBjYXNlICd0ZXh0YXJlYSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG5vblRleHRFbGVtZW50cyA9IFsncmFkaW8nLCAnY2hlY2tib3gnXTtcbiAgICAgICAgICAgIGlmIChub25UZXh0RWxlbWVudHMuaW5jbHVkZXModGFyZ2V0LnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWUgPSB0YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgICAgICAgICA/IHRhcmdldC52YWx1ZSAhPT0gbnVsbCAmJiB0YXJnZXQudmFsdWUgIT09ICdvbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnc2VsZWN0Jzoge1xuICAgICAgICAgICAgY29uc3Qgb25lID0gdGFyZ2V0LnR5cGUgPT09ICdzZWxlY3Qtb25lJztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBBcnJheS5mcm9tKHRhcmdldC5vcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gWy4uLm9wdGlvbnNdXG4gICAgICAgICAgICAgICAgLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24uc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgLm1hcCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPz8gKG9wdGlvbi50ZXh0Q29udGVudC5tYXRjaCgvW15cXHgyMFxcdFxcclxcblxcZl0rL2cpIHx8IFtdKS5qb2luKCcgJykpO1xuICAgICAgICAgICAgdGFyZ2V0VmFsdWUgPSBvbmUgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGFyZ2V0VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0VmFsdWU7XG59O1xuY29uc3QgdXNlRm9ybUZpZWxkcyA9IChpbml0aWFsVmFsdWVzKSA9PiB7XG4gICAgY29uc3QgY2xvbmUgPSB7IC4uLmluaXRpYWxWYWx1ZXMgfTtcbiAgICBjb25zdCBbZm9ybUZpZWxkcywgc2V0Rm9ybUZpZWxkc10gPSB1c2VTdGF0ZShpbml0aWFsVmFsdWVzKTtcbiAgICBjb25zdCBjcmVhdGVDaGFuZ2VIYW5kbGVyID0gKGtleSkgPT4gKGUpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gX2dldFRhcmdldFZhbHVlKHRhcmdldCk7XG4gICAgICAgIHNldEZvcm1GaWVsZHMoKCkgPT4ge1xuICAgICAgICAgICAgZm9ybUZpZWxkc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gZm9ybUZpZWxkcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZXNldEZvcm1GaWVsZHMgPSAoKSA9PiB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZm9ybUZpZWxkcywgY2xvbmUpO1xuICAgIH07XG4gICAgcmV0dXJuIFtmb3JtRmllbGRzLCBjcmVhdGVDaGFuZ2VIYW5kbGVyLCByZXNldEZvcm1GaWVsZHNdO1xufTtcbmV4cG9ydCB7IHVzZUZvcm1GaWVsZHMgfTtcbiIsImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHNldERlZmF1bHRMYW5ndWFnZSwgc2V0VHJhbnNsYXRlIH0gZnJvbSAndmFuaWxsYS1pMThuJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xubGV0IFRyYW5zbGF0aW9uU2VydmljZSA9IGNsYXNzIFRyYW5zbGF0aW9uU2VydmljZSB7XG4gICAgX2RlZmF1bHRMYW5ndWFnZSA9ICcnO1xuICAgIHNldFRyYW5zbGF0ZShpMThuLCBsYW5nKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZShpMThuLCBsYW5nKTtcbiAgICB9XG4gICAgc2V0RGVmYXVsdExhbmd1YWdlKGxhbmd1YWdlKSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRMYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgICBzZXREZWZhdWx0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb25MYW5ndWFnZUNoYW5nZScpO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRMYW5ndWFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRMYW5ndWFnZTtcbiAgICB9XG59O1xuVHJhbnNsYXRpb25TZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgSW5qZWN0YWJsZSgpXG5dLCBUcmFuc2xhdGlvblNlcnZpY2UpO1xuZXhwb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH07XG4iXSwibmFtZXMiOlsibWFwIiwiTWFwIiwicmVnaXN0ZXIiLCJzZXJ2aWNlTmFtZSIsImluc3RhbmNlIiwidGhpcyIsImdldCIsIkVycm9yIiwic2V0IiwiZ2V0U2VydmljZSIsImNsZWFyIiwiaW5zdGFudGlhdGUiLCJrbGFzcyIsImRlcGVuZGVuY2llcyIsInJlbmRlcmVySW5zdGFuY2UiLCJzZXJ2aWNlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY29tcG9uZW50UmVnaXN0cnkiLCJnbG9iYWxTdHlsZXMiLCJzdHlsZV9yZWdpc3RyeSIsImlzUm9vdE5vZGVTZXQiLCJnbG9iYWxTdHlsZVRhZyIsImNvbnN0cnVjdG9yIiwiQ1NTU3R5bGVTaGVldCIsImUiLCJnZXRDb21wdXRlZENzcyIsInN0eWxlcyIsImNzb0FycmF5IiwiZGVmYXVsdFN0eWxlcyIsImluc2VydFJ1bGUiLCJzaGVldCIsInJlcGxhY2UiLCJodG1sIiwicmVuZGVyIiwiaXNBdHRyaWJ1dGVSZWdleCIsImlzTm9kZVJlZ2V4IiwiYXR0cmlidXRlUmVnZXgiLCJpbnNlcnROb2RlUmVnZXgiLCJfc2FuaXRpemUiLCJkYXRhIiwidGFnc1RvUmVwbGFjZSIsInN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBsYWNlVGFnIiwidGFnIiwic2FmZV90YWdzX3JlcGxhY2UiLCJwYXJzZSIsIl9zZXRWYWx1ZXNGb3JEcm9wZG93biIsIm5vZGUiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJ2YWx1ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJvcHRpb25TZXQiLCJvcHRpb24iLCJnZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsIm1hdGNoIiwiam9pbiIsInNlbGVjdGVkIiwiaW5kZXhPZiIsInNlbGVjdGVkSW5kZXgiLCJ0ZW1wbGF0ZXMiLCJyZXN1bHQiLCJ2YXJpYWJsZSIsImlzQXR0cmlidXRlUGFydCIsInRlc3QiLCJfIiwiJDEiLCIkMiIsIkRvY3VtZW50RnJhZ21lbnQiLCJmcmFnbWVudCIsIm1hcmt1cCIsInRlbXAiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJjb250ZW50IiwiX2NyZWF0ZUZyYWdtZW50IiwidHJpbSIsImVsZW1lbnRzV2Fsa2VyIiwiY3JlYXRlVHJlZVdhbGtlciIsIk5vZGVGaWx0ZXIiLCJTSE9XX0VMRU1FTlQiLCJuZXh0Tm9kZSIsImV2ZW50U3Vic2NyaXB0aW9ucyIsImhhc0F0dHJpYnV0ZXMiLCJjdXN0b21BdHRyaWJ1dGVzIiwiZnJvbSIsImF0dHJpYnV0ZXMiLCJmaWx0ZXIiLCJhdHRyIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJleGVjIiwiZXZlbnROYW1lIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiYWRkIiwic3BsaXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfYmluZEZyYWdtZW50cyIsImNvbW1lbnRzV2Fsa2VyIiwiU0hPV19DT01NRU5UIiwibm9kZXNMaXN0IiwicmVwbGFjZVdpdGgiLCJjdXJyZW50Tm9kZSIsIl9yZXBsYWNlSW5zZXJ0Tm9kZUNvbW1lbnRzIiwid2hlcmUiLCJ3aGF0IiwiYXBwZW5kQ2hpbGQiLCJSZW5kZXJlciIsInNoYWRvd1Jvb3QiLCJ1cGRhdGUiLCJlbWl0RXZlbnQiLCJTeW1ib2wiLCJDU1NfU0hFRVRfTk9UX1NVUFBPUlRFRCIsImZyb21WYW5pbGxhRXZlbnQiLCJ0YXJnZXQiLCJvbk5leHQiLCJDT01QT05FTlRfREFUQV9BVFRSIiwiREVGQVVMVF9DT01QT05FTlRfT1BUSU9OUyIsInNlbGVjdG9yIiwicm9vdCIsImNyZWF0ZVN0eWxlVGFnIiwicmVnaXN0ZXJFbGVtZW50IiwidG9TdHJpbmciLCJoZWFkIiwid2luZG93IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJIVE1MRWxlbWVudCIsInNoYWRvdyIsImNvbXBvbmVudFN0eWxlVGFnIiwic3VwZXIiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwiYWRvcHRlZFN0eWxlU2hlZXRzIiwiYmluZCIsInNldFByb3BzIiwiZ2V0SW5zdGFuY2UiLCJlbXVsYXRlQ29tcG9uZW50IiwiaWQiLCJEYXRlIiwiZ2V0VGltZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNvbXBpbGVkQ1NTIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJiZWZvcmVNb3VudCIsIm1vdW50IiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGROb2RlcyIsImltcG9ydE5vZGUiLCJhbGxvd0J1YmJsaW5nIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwicHJvcHNPYmoiLCJrZXkiLCJPYmplY3QiLCJlbnRyaWVzIiwib25Qcm9wc0NoYW5nZWQiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsInJlbW92ZSIsInVubW91bnQiLCJ1bnN1YnNjcmliZSIsImdldERlcHMiLCJhIiwibmFtZSIsIkNvbXBvbmVudCIsImRlcHMiLCJwcm90b3R5cGUiLCJJbmplY3RhYmxlIiwiRG9tVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJ3aGljaFRyYW5zaXRpb25FbmQiLCJzdHlsZW9iaiIsInN0eWxlIiwidHJhbnNpdGlvbnMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwidCIsIm9uVHJhbnNpdGlvbkVuZCIsImVsZW1lbnQiLCJjYiIsImR1cmF0aW9uIiwiY2FsbGVkIiwidW5TdWJzY3JpYmVFdmVudCIsIl9mbiIsInNldFRpbWVvdXQiLCJ1c2VGb3JtRmllbGRzIiwiaW5pdGlhbFZhbHVlcyIsImNsb25lIiwiZm9ybUZpZWxkcyIsInNldEZvcm1GaWVsZHMiLCJvYmoiLCJpbml0aWFsU3RhdGUiLCJmbiIsIm5ld1N0YXRlIiwiYXNzaWduIiwidXNlU3RhdGUiLCJ0YXJnZXRWYWx1ZSIsImluY2x1ZGVzIiwidHlwZSIsImNoZWNrZWQiLCJvbmUiLCJfZ2V0VGFyZ2V0VmFsdWUiLCJUcmFuc2xhdGlvblNlcnZpY2UiLCJfZGVmYXVsdExhbmd1YWdlIiwic2V0VHJhbnNsYXRlIiwiaTE4biIsImxhbmciLCJzZXREZWZhdWx0TGFuZ3VhZ2UiLCJsYW5ndWFnZSIsImdldEN1cnJlbnRMYW5ndWFnZSJdLCJzb3VyY2VSb290IjoiIn0=