"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[394],{6394:(e,t,s)=>{s.d(t,{wA:()=>w,B_:()=>C,GS:()=>v,Th:()=>Renderer,D7:()=>N,dy:()=>p,sY:()=>m,uA:()=>E,lN:()=>d});var n=s(1905);const o=new class{map=new Map;register(e,t){if(this.map.get(e))throw Error(`${e} is already registered service.`);this.map.set(e,t)}getService(e){const t=this.map.get(e);if(t)return t;throw Error(`${e} is not a registered provider.`)}clear(){this.map=new Map}},a=(e,t,s)=>{const n=[];for(let e=0;e<t.length;e++)"Renderer"!==t[e]?n.push(o.getService(t[e])):n.push(s);return n.length>0?new e(...n):new e};var r=s(3818);const i=new class{globalStyles;style_registry;isRootNodeSet;globalStyleTag;constructor(){try{this.globalStyles=new CSSStyleSheet}catch(e){this.globalStyles=""}this.isRootNodeSet=!1,this.globalStyleTag=null}getComputedCss=(e="")=>{let t=[];const s=new CSSStyleSheet;if(s.insertRule(":host { display: block; }"),t=[this.globalStyles,s],e){const s=new CSSStyleSheet;s.replace(e),t.push(s)}return t}};var l=s(1954),c=s(2845);Symbol("klass");const d=e=>{return(t=e)&&"function"==typeof t.subscribe?e:(e=>!!e&&"function"==typeof e.then)(e)?(0,l.D)(Promise.resolve(e)):(0,c.of)(e);var t},h=(()=>{try{return new CSSStyleSheet,!1}catch(e){return!0}})(),u=(e,t,s,n=!1)=>{e.addEventListener(t,s,n);return()=>{e.removeEventListener(t,s,n)}},{html:p,render:m}=(()=>{const e=/([^\s\\>"'=]+)\s*=\s*(['"]?)$/,t=/<[a-z][^>]+$/i,s=/^attr([^ ]+)/,n=/^insertNode([^ ]+)/,o=e=>{const t={"&":"&amp;","<":"&lt;",">":"&gt;","(":"%28",")":"%29"};let s=JSON.stringify(e);const n=e=>t[e]||e;return s=(e=>e.replace(/[&<>\(\)]/g,n))(s),JSON.parse(s)},a=(e,t)=>{const s=e.options,n=Array.isArray(t)?t:[t];let o,a,r=s.length;for(;r--;){a=s[r];const e=a.getAttribute("value")??(a.textContent.match(/[^\x20\t\r\n\f]+/g)||[]).join(" ");(a.selected=n.indexOf(e)>-1)&&(o=!0)}o||(e.selectedIndex=-1)};return{html:(r,...i)=>{let l="";const{length:c}=r;for(let s=1;s<c;s++){const n=i[s-1];let o=!1;l+=r[s-1],e.test(l)&&t.test(l)&&(l=l.replace(e,((e,t,n)=>`attr${s-1}=${n||'"'}${t}${n?"":'"'}`)),o=!0),o||(Array.isArray(n)||n instanceof DocumentFragment?l+=`\x3c!--insertNode${s-1}--\x3e`:l+=n)}l+=r[c-1];const d=(e=>{const t=document.createElement("template");return t.innerHTML=e,t.content})(l.trim());return((e,t)=>{const n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null);let r=n.nextNode();for(;r;){if(r.eventSubscriptions=[],r.hasAttributes()){const e=Array.from(r.attributes).filter((e=>s.test(e.nodeName)));for(const{nodeName:n,nodeValue:i}of e){const e=s.exec(n)[1];switch(!0){case/^on+/.test(i):{const s=i.slice(2).toLowerCase(),n=u(r,s,t[e]);r.eventSubscriptions.push(n);break}case/ref/.test(i):t[e](r);break;case/^data-+/.test(i):r.setAttribute(`data-${i}`,o(t[e]));break;case/^aria-+/.test(i):r.setAttribute(`aria-${i}`,o(t[e]));break;case/class/.test(i):t[e]?r.classList.add(...t[e].split(" ")):r.setAttribute("class","");break;case/value/.test(i):"select"===r.nodeName.toLowerCase()?a(r,t[e]):r.value=o(t[e]);break;case/disabled/.test(i):case/checked/.test(i):t[e]?r.setAttribute(i,t[e]):r.removeAttribute(i);break;default:r.setAttribute(i,o(t[e]))}r.removeAttribute(n)}}r=n.nextNode()}})(d,i),((e,t)=>{const s=document.createTreeWalker(e,NodeFilter.SHOW_COMMENT,null);let o,a=s.nextNode();for(;a;){if(o=n.exec(a.data)){const n=Array.isArray(t[o[1]])?t[o[1]]:[t[o[1]]];a.replaceWith(...n),s.currentNode=e}a=s.nextNode()}})(d,i),d},render:(e,t)=>{e.textContent="",e.appendChild(t)}}})();class Renderer{shadowRoot;update;emitEvent}const g="data-compid",b={selector:"",root:!1,styles:""},f=(e,t=null)=>{const s=document.createElement("style");return s.innerHTML=e,t&&t.appendChild(s),s},S=(e,t,s)=>{if((e={...b,...e}).styles=e.styles.toString(),!r.UG)if(e.root&&!i.isRootNodeSet)i.isRootNodeSet=!0,e.styles&&(f(e.styles,document.head),i.globalStyles.replace(e.styles));else if(e.root&&i.isRootNodeSet)throw Error("Cannot register duplicate root component in "+e.selector+" component");window.customElements.define(e.selector,class extends HTMLElement{klass;shadow;componentStyleTag=null;eventSubscriptions;constructor(){if(super(),this.shadow=this.attachShadow({mode:"open"}),!h){const t=r.UG?[]:i.getComputedCss(e.styles);this.shadow.adoptedStyleSheets=t}this.update=this.update.bind(this),this.emitEvent=this.emitEvent.bind(this),this.setProps=this.setProps.bind(this),this.getInstance=this.getInstance.bind(this),this.eventSubscriptions=[]}emulateComponent(){if(h&&e.styles){const n=(new Date).getTime()+Math.floor(1e3*Math.random()+1),o=(t=e.styles,s=`[data-compid="${n.toString()}"]`,t&&(t=s+" "+t.toString().replace("}",` } ${s} `)),t);this.componentStyleTag=f(o),this.setAttribute(g,n.toString())}var t,s}connectedCallback(){this.emulateComponent();const e=new Renderer;e.update=this.update,e.shadowRoot=this.shadow,e.emitEvent=this.emitEvent,this.klass=a(t,s,e),this.klass.beforeMount&&this.klass.beforeMount(),this.update(),this.klass.mount&&this.klass.mount(),this.eventSubscriptions.push(u(window,"onLanguageChange",(()=>{this.update()})))}update(){m(this.shadow,this.klass.render.bind(this.klass)()),h&&(e.styles&&this.shadow.insertBefore(this.componentStyleTag,this.shadow.childNodes[0]),i.globalStyleTag&&this.shadow.insertBefore(document.importNode(i.globalStyleTag,!0),this.shadow.childNodes[0]))}emitEvent(e,t,s=!0){const n=new CustomEvent(e,{detail:t,bubbles:s});this.dispatchEvent(n)}setProps(e){for(const[t,s]of Object.entries(e))this.klass[t]=s;this.klass.onPropsChanged&&this.klass.onPropsChanged(),this.update()}getInstance(){return this.klass}disconnectedCallback(){if(this.componentStyleTag&&this.componentStyleTag.remove(),this.klass.unmount&&this.klass.unmount(),this.eventSubscriptions?.length)for(const e of this.eventSubscriptions)e()}})},y=e=>(n.Hb.getMetadata("design:paramtypes",e)||[]).map((e=>e.name)),w=e=>t=>{if(e.selector.indexOf("-")<=0)throw new Error("You need at least 1 dash in the custom element name!");if(!window.customElements.get(e.selector)){const s=y(t);t.prototype.selector=e.selector,S(e,t,s)}},v=()=>e=>{const t=y(e),s=a(e,t);o.register(e.name,s)};var k=s(655);let C=class DomTransition{transition="";constructor(){this.whichTransitionEnd()}whichTransitionEnd(){const e=document.createElement("div").style,t={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"};for(const s in t)if(void 0!==e[s]){this.transition=t[s];break}}onTransitionEnd(e,t,s){let n=!1,o=null;const a=()=>{n||(n=!0,t&&t(),o(),o=null)};o=u(e,this.transition,(()=>{a()})),setTimeout(a,s)}};C=(0,k.gn)([v(),(0,k.w6)("design:paramtypes",[])],C);const E=e=>{const t={...e},[s,n]=(e=>{const t=e;return[t,e=>{let s;s="function"==typeof e?e(t):e,Object.assign(t,s)}]})(e);return[s,e=>t=>{const o=(e=>{let t;switch(e.nodeName&&e.nodeName.toLowerCase()){case"input":case"textarea":t=["radio","checkbox"].includes(e.type)?!!e.checked&&(null===e.value||"on"===e.value||e.value):e.value;break;case"select":{const s="select-one"===e.type,n=[...Array.from(e.options)].filter((e=>e.selected)).map((e=>e.value??(e.textContent.match(/[^\x20\t\r\n\f]+/g)||[]).join(" ")));t=s?n[0]:n;break}default:t=e.value}return t})(t.target);n((()=>(s[e]=o,s)))},()=>{Object.assign(s,t)}]};var T=s(7949);let N=class TranslationService{_defaultLanguage="";setTranslate(e,t){(0,T.setTranslate)(e,t)}setDefaultLanguage(e){this._defaultLanguage=e,(0,T.setDefaultLanguage)(e);const t=new CustomEvent("onLanguageChange");window.dispatchEvent(t)}getCurrentLanguage(){return this._defaultLanguage}};N=(0,k.gn)([v()],N)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,