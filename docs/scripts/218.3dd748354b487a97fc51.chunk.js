"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[218],{4218:(e,o,t)=>{t.r(o);var s=t(655),l=t(6394),n=t(2470);let i=class NestedModal{modalsrvc;ObservedProperties=["nestedModalData"];nestedModalData;constructor(e){this.modalsrvc=e}openAnotherModal(){const e=this.modalsrvc.show({renderTemplate:()=>l.dy`<div>i'm nested modal</div>`,modalTitle:"nested modal",modalClass:"nested-class"});e.onOpen.subscribe((()=>{console.log("nested modal open")})),e.onClose.subscribe((()=>{console.log("nested modal closed")}))}render(){return this.nestedModalData?l.dy`
				<div>sample modal</div>
				<div>${this.nestedModalData.message}</div>
				<button
					class="button is-small is-info"
					onclick=${()=>{this.openAnotherModal()}}
				>
					open another modal
				</button>
			`:l.dy``}};i=(0,s.gn)([(0,l.wA)({selector:"nested-modal"}),(0,s.w6)("design:paramtypes",[n.Z7])],i);var d=t(9674);(0,n.aA)();let a=class PlumeComponents{router;modalsrvc;notifySrvc;constructor(e,o,t){this.router=e,this.modalsrvc=o,this.notifySrvc=t}toggleInput={onchange:this.onToggleChange.bind(this),onText:"ON",offText:"OFF"};multiselectToggles={enableMultiselect:{onchange:e=>{this.dropdownOptions.multiple=e,this.dropdownOptions.resetDropdown=!0,this.dropdownRef.setProps({dropdownOptions:this.dropdownOptions})}},disableDropdown:{onchange:e=>{this.dropdownOptions.disable=e,this.dropdownOptions.resetDropdown=!0,this.dropdownRef.setProps({dropdownOptions:this.dropdownOptions})}},enableFilter:{onchange:e=>{this.dropdownOptions.enableFilter=e,this.dropdownOptions.resetDropdown=!0,this.dropdownRef.setProps({dropdownOptions:this.dropdownOptions})}}};dropdownOptions={options:[{label:"Option 1",value:"o1"},{label:"Option 2",value:"o2"},{label:"Option 3",value:"o3"},{label:"Option 4",value:"o4"}],multiple:!1,buttonText:e=>0===e.length?"None selected":e.length>3?e.length+" selected":e.map((e=>e.label)).join(", ")};nestedModalRef;sampleToggleRef;enableDropdownRef;disableDropdownRef;enableFilterRef;dropdownRef;mount(){console.log(this.router.getCurrentRoute()),this.sampleToggleRef.setProps({toggleOptions:this.toggleInput}),this.enableDropdownRef.setProps({toggleOptions:this.multiselectToggles.enableMultiselect}),this.disableDropdownRef.setProps({toggleOptions:this.multiselectToggles.disableDropdown}),this.enableFilterRef.setProps({toggleOptions:this.multiselectToggles.enableFilter}),this.dropdownRef.setProps({dropdownOptions:this.dropdownOptions})}openModal(){const e=this.modalsrvc.show({renderTemplate:()=>l.dy`<nested-modal
          ref=${e=>{this.nestedModalRef=e}}
        ></nested-modal>`,modalTitle:"testing modal",modalClass:"sample-class"});e.onOpen.subscribe((()=>{console.log("main modal open",e.Id),this.nestedModalRef.setProps({nestedModalData:{message:"Hello World"}})})),e.onClose.subscribe((()=>{console.log("main modal closed")}))}notify(){this.notifySrvc.sendMessage("hello world",n.k$.Info)}notifyWithAutoHide(){this.notifySrvc.sendMessage("hello world",n.k$.Info,!0)}onToggleChange(e){console.log(e)}render(){return l.dy`
      <div>
        <h2 class="title is-3 mb-20">Plumejs UI Control Collection</h2>
        <div class="mb-20">
          <h5 class="title is-5">Modal</h5>
          <button
            class="button is-small is-info"
            onclick=${()=>{this.openModal()}}
          >
            Open Modal
          </button>
        </div>
        <div class="mb-20">
          <h5 class="title is-5">Notification</h5>
          <button
            class="button is-small is-info mr-10"
            onclick=${()=>{this.notify()}}
          >
            Notify with action
          </button>
          <button
            class="button is-small is-info"
            onclick=${()=>{this.notifyWithAutoHide()}}
          >
            Notify with auto hide
          </button>
        </div>
        <div class="mb-20">
          <h5 class="title is-5">Toggle Button</h5>
          <toggle-button
            ref=${e=>{this.sampleToggleRef=e}}
          ></toggle-button>
        </div>
        <div class="mb-20">
          <h5 class="title is-5">Multi select</h5>
          <div>
            <div class="is-flex mb-20">
              <span>enable multi select</span>
              <toggle-button
                ref=${e=>{this.enableDropdownRef=e}}
              ></toggle-button>
            </div>
            <div class="is-flex mb-20">
              <span>disable dropdown</span>
              <toggle-button
                ref=${e=>{this.disableDropdownRef=e}}
              ></toggle-button>
            </div>
            <div class="is-flex mb-20">
              <span>enable filtering</span>
              <toggle-button
                ref=${e=>{this.enableFilterRef=e}}
              ></toggle-button>
            </div>
          </div>
          <div class="is-flex">
            <ui-dropdown
              ref=${e=>{this.dropdownRef=e}}
              onoptionselected=${e=>{console.log(e.detail)}}
            ></ui-dropdown>
          </div>
        </div>
      </div>
    `}};a=(0,s.gn)([(0,l.wA)({selector:"plume-comp"}),(0,s.w6)("design:paramtypes",[d.F,n.Z7,n.gq])],a)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,