"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[719],{719:(t,e,r)=>{r.d(e,{F:()=>l});var a=r(655),s=r(394);class StaticRouter{static routeList=[];static checkParams(t,e){let r=0;const a={},s=e.ParamCount;for(let s=0;s<t.length;s++){const n=e.Params[s];n.indexOf(":")>=0&&(a[n.split(":")[1]]=t[s],r+=1)}return r===s?a:{}}static getParamCount(t){let e=0;return t.forEach((t=>{t.indexOf(":")>=0&&(e+=1)})),e}static formatRoute(t){const e={Params:{},Url:"",Template:"",ParamCount:0,IsRegistered:!1,redirectTo:"",canActivate:()=>!0};if(e.Params=t.path.split("/").filter((t=>t.length>0)),e.Url=t.path,e.Template="",e.redirectTo=t.redirectTo,t.template){if(!t.templatePath)throw Error("templatePath is required in route if template is mentioned.");e.Template=t.template,e.TemplatePath=t.templatePath}t.canActivate&&(e.canActivate=t.canActivate),e.ParamCount=StaticRouter.getParamCount(e.Params),StaticRouter.routeList.push(e)}static preloadRoutes(){for(const t of StaticRouter.routeList)t.TemplatePath&&t.TemplatePath()}}class SubjectObs{_internalFn;asObservable(){return{subscribe:t=>this.subscribe(t)}}subscribe(t){return this._internalFn=t,this.unsubscribe}unsubscribe(){this._internalFn=null}next(t){this._internalFn(t)}}const n=t=>{return(e=t)&&"function"==typeof e.subscribe?t:(t=>!!t&&"function"==typeof t.then)(t)?(r=Promise.resolve(t),{subscribe:t=>{Promise.resolve(r).then((e=>{t(e)}))}}):(t=>({subscribe:e=>{e(t)}}))(t);var e,r};let i=class InternalRouter{_currentRoute={path:"",params:{},state:{}};_template=new SubjectObs;_unSubscribeHashEvent;startHashChange(){this._unSubscribeHashEvent=((t,e,r,a=!1)=>(t.addEventListener(e,r,a),()=>{t.removeEventListener(e,r,a)}))(window,"hashchange",(()=>{this._registerOnHashChange()}))}stopHashChange(){this._unSubscribeHashEvent()}getTemplate(){return this._template.asObservable()}getCurrentRoute(){return this._currentRoute}navigateTo(t="",e){if(t){window.location.hash.replace(/^#/,"")===t&&this._navigateTo(t,e),window.location.hash="#"+t}else this._navigateTo(t,e)}_registerOnHashChange(){const t=window.location.hash.replace(/^#/,"");this._navigateTo(t,null)}_routeMatcher(t,e){if(t){const r=new RegExp(t.replace(/:[^\s/]+/g,"([\\w-]+)"));return e.match(r)}return t===e}_navigateTo(t,e){const r=t.split("/").filter((t=>t.length>0)),a=StaticRouter.routeList.filter((e=>e.Params.length===r.length&&this._routeMatcher(e.Url,t)||e.Url===t?e:void 0)),s=a.length>0?a[0]:null;s&&(this._currentRoute.path=t,this._currentRoute.state={...e||{}},n(s.canActivate()).subscribe((a=>{if(!a)return;const i=StaticRouter.checkParams(r,s);Object.keys(i).length>0||t?(this._currentRoute.params=i,s.IsRegistered?this._template.next(s.Template):s.TemplatePath&&n(s.TemplatePath()).subscribe((()=>{s.IsRegistered=!0,this._template.next(s.Template)}))):this.navigateTo(s.redirectTo,e)})))}};i=(0,a.gn)([(0,s.GS)()],i);let o=class RouterOutlet{internalRouterSrvc;renderer;_template="";_templateSubscription;constructor(t,e){this.internalRouterSrvc=t,this.renderer=e}beforeMount(){this._templateSubscription=this.internalRouterSrvc.getTemplate().subscribe((t=>{this._template=t,this.renderer.update()})),this.internalRouterSrvc.startHashChange()}mount(){const t=window.location.hash.replace(/^#/,"");this.internalRouterSrvc.navigateTo(t,null)}unmount(){this._templateSubscription(),this.internalRouterSrvc.stopHashChange()}render(){if(this._template){const t=[`${this._template}`];return t.raw=[`${this._template}`],(0,s.dy)(t)}return s.dy``}};o=(0,a.gn)([(0,s.wA)({selector:"router-outlet"}),(0,a.w6)("design:paramtypes",[i,s.Th])],o);var u=r(818);let l=class Router{internalRouter;constructor(t){this.internalRouter=t}getCurrentRoute(){return this.internalRouter.getCurrentRoute()}navigateTo(t,e){this.internalRouter.navigateTo(t,e)}static registerRoutes(t,e=!1){if(!u.UG){if(!Array.isArray(t))throw Error("router.addRoutes: the parameter must be an array");for(const e of t)StaticRouter.formatRoute(e);e&&StaticRouter.preloadRoutes()}}};l=(0,a.gn)([(0,s.GS)(),(0,a.w6)("design:paramtypes",[i])],l)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,