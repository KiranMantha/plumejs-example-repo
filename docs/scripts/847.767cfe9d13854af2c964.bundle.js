(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[847],{905:(t,e,n)=>{"use strict";n.d(e,{Hb:()=>a});const o=new WeakMap;function r(t,e){return o.get(t)&&o.get(t).get(e)}function c(t,e,n){if(void 0===e)throw new TypeError;const o=r(e,n);return o&&o.get(t)}function i(t,e,n,c){if(c&&!["string","symbol"].includes(typeof c))throw new TypeError;(r(n,c)||function(t,e){const n=o.get(t)||new Map;o.set(t,n);const r=n.get(e)||new Map;return n.set(e,r),r}(n,c)).set(t,e)}function u(t,e,n){return c(t,e,n)?c(t,e,n):Object.getPrototypeOf(e)?u(t,Object.getPrototypeOf(e),n):void 0}const a={decorate:function(t,e,n,o){if(!Array.isArray(t)||0===t.length)throw new TypeError;return void 0!==n?function(t,e,n,o){return t.reverse().forEach((t=>{o=t(e,n,o)||o})),o}(t,e,n,o):"function"==typeof e?function(t,e){return t.reverse().forEach((t=>{const n=t(e);n&&(e=n)})),e}(t,e):void 0},defineMetadata:function(t,e,n,o){i(t,e,n,o)},getMetadata:function(t,e,n){return u(t,e,n)},getOwnMetadata:function(t,e,n){return c(t,e,n)},hasMetadata:function(t,e,n){return!!u(t,e,n)},hasOwnMetadata:function(t,e,n){return!!c(t,e,n)},metadata:function(t,e){return function(n,o){i(t,e,n,o)}}};Object.assign(Reflect,a)},818:(t,e)=>{"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o="undefined"!=typeof window&&void 0!==window.document,r="undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node,c="object"===("undefined"==typeof self?"undefined":n(self))&&self.constructor&&"DedicatedWorkerGlobalScope"===self.constructor.name,i="undefined"!=typeof window&&"nodejs"===window.name||"undefined"!=typeof navigator&&(navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")),u="undefined"!=typeof Deno&&void 0!==Deno.core;e.UG=r},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,c){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var u=0;u<this.length;u++){var a=this[u][0];null!=a&&(i[a]=!0)}for(var f=0;f<t.length;f++){var s=[].concat(t[f]);o&&i[s[0]]||(void 0!==c&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=c),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),e.push(s))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([c]).join("\n")}return[e].join("\n")}},655:(t,e,n)=>{"use strict";n.d(e,{gn:()=>o,w6:()=>r});function o(t,e,n,o){var r,c=arguments.length,i=c<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,o);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(i=(c<3?r(i):c>3?r(e,n,i):r(e,n))||i);return c>3&&i&&Object.defineProperty(e,n,i),i}function r(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}Object.create;Object.create},949:function(t){"undefined"!=typeof self&&self,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}n.r(e),n.d(e,"setDefaultLanguage",(function(){return i})),n.d(e,"setTranslate",(function(){return l}));var r="pt",c={},i=function(t){r=t},u=function(t){return null!==t&&"object"===o(t)},a=function(t){return null!==t&&"string"==typeof t},f=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s=function(t,e,n){var o;if(e){if(!isNaN(parseInt(e)))return e;if(t){for(var r,c=e.trim().split("."),i=0,a=c.length;i<a;i++)if((r=r?r[c[i]]:t[c[i]])&&!u(r))return r;o=r}}return o||n};Object.assign(String.prototype,{translate:function(){var t,e,n;arguments.length>0&&((arguments.length<=0?void 0:arguments[0])&&a(arguments.length<=0?void 0:arguments[0])&&(e=arguments.length<=0?void 0:arguments[0]),(arguments.length<=0?void 0:arguments[0])&&u(arguments.length<=0?void 0:arguments[0])&&(n=arguments.length<=0?void 0:arguments[0]),(arguments.length<=1?void 0:arguments[1])&&u(arguments.length<=1?void 0:arguments[1])&&(n=arguments.length<=1?void 0:arguments[1])),e||(e=r);var o=c[e]||{};if(f(o,this)&&(t=o[this]),!t){var i=this,l=i.match(/(\[\d+])/g),p=i.match(/(\[\w+])/g);l&&(i=i.replace(/(\[\d+])/g,"[:num]")),p&&(i=i.replace(/(\[\w+])/g,"[:str]")),(t=s(o,this,""))&&(l&&l.forEach((function(e,n){t=(t=(t=t.replace("{$".concat(n+1,"+2}"),parseInt(e.match(/\d+/g),10)+2)).replace("{$".concat(n+1,"+1}"),parseInt(e.match(/\d+/g),10)+1)).replace("$".concat(n+1),e.match(/\d+/g))})),p&&p.forEach((function(e,n){var o=new RegExp("$".concat(n),"g");t=t.replace(o,e.match(/\w+/g))})))}return n&&(t=t.replace(/\{\s?([\w.]+)\s?\}/g,(function(t,e){var o=e.trim();return n[o]||o}))),t||this}});var l=function(t,e){e||(e=r),c[e]||(c[e]={}),Object.assign(c[e],t)}}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,