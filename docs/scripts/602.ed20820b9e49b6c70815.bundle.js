"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[602],{1602:(e,t,r)=>{t.F=void 0,r(346);var a=r(9282);Object.defineProperty(t,"F",{enumerable:!0,get:function(){return a.Router}})},1346:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InternalRouter=void 0;const a=r(655),s=r(8522),n=r(8698),o=r(4035);let i=class{_currentRoute={path:"",params:{},state:{}};_template=new n.Subject;constructor(){(0,n.fromEvent)(window,"hashchange").subscribe((()=>{this._registerOnHashChange()}))}getTemplate(){return this._template.asObservable()}getCurrentRoute(){return this._currentRoute}navigateTo(e="",t){if(e){window.location.hash.replace(/^#/,"")===e&&this._navigateTo(e,t),window.location.hash="#"+e}else this._navigateTo(e,t)}_registerOnHashChange(){const e=window.location.hash.replace(/^#/,"");this._navigateTo(e,null)}_routeMatcher(e,t){if(e){const r=new RegExp(e.replace(/:[^\s/]+/g,"([\\w-]+)"));return t.match(r)}return e===t}_navigateTo(e,t){const r=e.split("/").filter((e=>e.length>0)),a=o.StaticRouter.routList.filter((t=>t.Params.length===r.length&&this._routeMatcher(t.Url,e)||t.Url===e?t:void 0)),n=a.length>0?a[0]:null;n&&(this._currentRoute.path=e,this._currentRoute.state={...t||{}},(0,s.wrapIntoObservable)(n.canActivate()).subscribe((a=>{if(!a)return;const i=o.StaticRouter.checkParams(r,n);Object.keys(i).length>0||e?(this._currentRoute.params=i,n.IsRegistered?this._template.next(n.Template):n.TemplatePath&&(0,s.wrapIntoObservable)(n.TemplatePath()).subscribe((()=>{n.IsRegistered=!0,this._template.next(n.Template)}))):this.navigateTo(n.redirectTo,t)})))}};i=(0,a.__decorate)([(0,s.Injectable)(),(0,a.__metadata)("design:paramtypes",[])],i),t.InternalRouter=i},346:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const a=r(655),s=r(8522),n=r(8698),o=r(1346);let i=class{router;renderer;_template="";_subscriptions=new n.Subscription;constructor(e,t){this.router=e,this.renderer=t}beforeMount(){this._subscriptions.add(this.router.getTemplate().subscribe((e=>{this._template=e,this.renderer.update()})))}mount(){const e=window.location.hash.replace(/^#/,"");this.router.navigateTo(e,null)}unmount(){this._subscriptions.unsubscribe()}render(){if(this._template){const e=[`${this._template}`];return e.raw=[`${this._template}`],(0,s.html)(e)}return s.html``}};i=(0,a.__decorate)([(0,s.Component)({selector:"router-outlet"}),(0,a.__metadata)("design:paramtypes",[o.InternalRouter,s.Renderer])],i)},9282:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Router=void 0;const a=r(655),s=r(8522),n=r(3818),o=r(1346),i=r(4035);let u=class{internalRouter;constructor(e){this.internalRouter=e}getCurrentRoute(){return this.internalRouter.getCurrentRoute()}navigateTo(e,t){this.internalRouter.navigateTo(e,t)}static registerRoutes(e){if(!n.isNode){if(!Array.isArray(e))throw Error("router.addRoutes: the parameter must be an array");for(const t of e)i.StaticRouter.formatRoute(t)}}};u=(0,a.__decorate)([(0,s.Injectable)(),(0,a.__metadata)("design:paramtypes",[o.InternalRouter])],u),t.Router=u},4035:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StaticRouter=void 0;class r{static routList=[];static checkParams(e,t){let r=0;const a={},s=t.ParamCount;for(let s=0;s<e.length;s++){const n=t.Params[s];n.indexOf(":")>=0&&(a[n.split(":")[1]]=e[s],r+=1)}return r===s?a:{}}static getParamCount(e){let t=0;return e.forEach((e=>{e.indexOf(":")>=0&&(t+=1)})),t}static formatRoute(e){const t={Params:{},Url:"",Template:"",ParamCount:0,IsRegistered:!1,redirectTo:"",canActivate:()=>!0};if(t.Params=e.path.split("/").filter((e=>e.length>0)),t.Url=e.path,t.Template="",t.redirectTo=e.redirectTo,e.template){if(!e.templatePath)throw Error("templatePath is required in route if template is mentioned.");t.Template=e.template,t.TemplatePath=e.templatePath}e.canActivate&&(t.canActivate=e.canActivate),t.ParamCount=r.getParamCount(t.Params),r.routList.push(t)}}t.StaticRouter=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,