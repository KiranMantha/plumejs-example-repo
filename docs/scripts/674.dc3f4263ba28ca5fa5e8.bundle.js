"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[674],{9674:(t,e,r)=>{r.d(e,{F:()=>h});var a=r(655),s=r(6394),i=r(5720),o=r(6716),n=r(8658);class StaticRouter{static routeList=[];static checkParams(t,e){let r=0;const a={},s=e.ParamCount;for(let s=0;s<t.length;s++){const i=e.Params[s];i.indexOf(":")>=0&&(a[i.split(":")[1]]=t[s],r+=1)}return r===s?a:{}}static getParamCount(t){let e=0;return t.forEach((t=>{t.indexOf(":")>=0&&(e+=1)})),e}static formatRoute(t){const e={Params:{},Url:"",Template:"",ParamCount:0,IsRegistered:!1,redirectTo:"",canActivate:()=>!0};if(e.Params=t.path.split("/").filter((t=>t.length>0)),e.Url=t.path,e.Template="",e.redirectTo=t.redirectTo,t.template){if(!t.templatePath)throw Error("templatePath is required in route if template is mentioned.");e.Template=t.template,e.TemplatePath=t.templatePath}t.canActivate&&(e.canActivate=t.canActivate),e.ParamCount=StaticRouter.getParamCount(e.Params),StaticRouter.routeList.push(e)}static preloadRoutes(){for(const t of StaticRouter.routeList)t.TemplatePath&&t.TemplatePath()}}let u=class InternalRouter{_currentRoute={path:"",params:{},state:{}};_template=new o.x;constructor(){(0,n.R)(window,"hashchange").subscribe((()=>{this._registerOnHashChange()}))}getTemplate(){return this._template.asObservable()}getCurrentRoute(){return this._currentRoute}navigateTo(t="",e){if(t){window.location.hash.replace(/^#/,"")===t&&this._navigateTo(t,e),window.location.hash="#"+t}else this._navigateTo(t,e)}_registerOnHashChange(){const t=window.location.hash.replace(/^#/,"");this._navigateTo(t,null)}_routeMatcher(t,e){if(t){const r=new RegExp(t.replace(/:[^\s/]+/g,"([\\w-]+)"));return e.match(r)}return t===e}_navigateTo(t,e){const r=t.split("/").filter((t=>t.length>0)),a=StaticRouter.routeList.filter((e=>e.Params.length===r.length&&this._routeMatcher(e.Url,t)||e.Url===t?e:void 0)),i=a.length>0?a[0]:null;i&&(this._currentRoute.path=t,this._currentRoute.state={...e||{}},(0,s.lN)(i.canActivate()).subscribe((a=>{if(!a)return;const o=StaticRouter.checkParams(r,i);Object.keys(o).length>0||t?(this._currentRoute.params=o,i.IsRegistered?this._template.next(i.Template):i.TemplatePath&&(0,s.lN)(i.TemplatePath()).subscribe((()=>{i.IsRegistered=!0,this._template.next(i.Template)}))):this.navigateTo(i.redirectTo,e)})))}};u=(0,a.gn)([(0,s.GS)(),(0,a.w6)("design:paramtypes",[])],u);let l=class RouterOutlet{router;renderer;_template="";_subscriptions=new i.w0;constructor(t,e){this.router=t,this.renderer=e}beforeMount(){this._subscriptions.add(this.router.getTemplate().subscribe((t=>{this._template=t,this.renderer.update()})))}mount(){const t=window.location.hash.replace(/^#/,"");this.router.navigateTo(t,null)}unmount(){this._subscriptions.unsubscribe()}render(){if(this._template){const t=[`${this._template}`];return t.raw=[`${this._template}`],(0,s.dy)(t)}return s.dy``}};l=(0,a.gn)([(0,s.wA)({selector:"router-outlet"}),(0,a.w6)("design:paramtypes",[u,s.Th])],l);var c=r(3818);let h=class Router{internalRouter;constructor(t){this.internalRouter=t}getCurrentRoute(){return this.internalRouter.getCurrentRoute()}navigateTo(t,e){this.internalRouter.navigateTo(t,e)}static registerRoutes(t,e=!1){if(!c.UG){if(!Array.isArray(t))throw Error("router.addRoutes: the parameter must be an array");for(const e of t)StaticRouter.formatRoute(e);e&&StaticRouter.preloadRoutes()}}};h=(0,a.gn)([(0,s.GS)(),(0,a.w6)("design:paramtypes",[u])],h)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,