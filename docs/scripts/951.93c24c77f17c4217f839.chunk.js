"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[951],{501:(e,s,t)=>{t.d(s,{Z:()=>a});var r=t(537),n=t.n(r),i=t(645),o=t.n(i)()(n());o.push([e.id,".test{list-style:none;margin:0;padding:0}.test li{color:#000}","",{version:3,sources:["webpack://./src/persons/persons-list.scss"],names:[],mappings:"AAEA,MACE,eAAA,CACA,QAAA,CACA,SAAA,CACA,SACE,UAPG",sourcesContent:["$grey: #000;\n\n.test {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  li {\n    color: $grey;\n  }\n}"],sourceRoot:""}]);const a=o},951:(e,s,t)=>{t.r(s);var r=t(655),n=t(394);let i=class PersonDetails{ObservedProperties=["userDetails"];userDetails;render(){return this.userDetails&&this.userDetails.name?n.dy`
				<strong>Person Details</strong>
				<div>Name: ${this.userDetails.name}</div>
				<div>Company: ${this.userDetails.company.name}</div>
			`:n.dy`<div></div>`}};i=(0,r.gn)([(0,n.wA)({selector:"person-details"})],i);var o=t(719),a=t(501);let l=class PersonService{getPersons(){return fetch("https://jsonplaceholder.typicode.com/users").then((e=>e.json()))}};l=(0,r.gn)([(0,n.GS)()],l);let p=class PersonsList{personSrvc;router;persondetails={};update;usersListRef;personDetailsRef;constructor(e,s){this.personSrvc=e,this.router=s,console.log("current route ",this.router.getCurrentRoute())}mount(){this.personSrvc.getPersons().then((e=>{this.renderUsers(e)}))}alertName(e){this.persondetails=e,this.personDetailsRef.setProps({userDetails:e})}renderUsers(e){const s=e.map((e=>n.dy`
        <li
          class="pointer"
          onclick=${()=>{this.alertName(e)}}
        >
          ${e.name}
        </li>
      `));(0,n.sY)(this.usersListRef,n.dy`${s}`)}render(){return n.dy`
      <h4>
        Sample service injection with http call and passing data to other
        component
      </h4>
      Current route data:
      <code>${JSON.stringify(this.router.getCurrentRoute(),null,2)}</code>
      <div class="mt-20 mb-20 content">
        <ul
          ref="${e=>{this.usersListRef=e}}"
        ></ul>
        <person-details
          id="person-details"
          ref="${e=>{this.personDetailsRef=e}}"
        ></person-details>
      </div>
    `}};p=(0,r.gn)([(0,n.wA)({selector:"persons-list",styles:a.Z}),(0,r.w6)("design:paramtypes",[l,o.F])],p)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy85NTEuOTNjMjRjNzdmMTdjNDIxN2Y4MzkuY2h1bmsuanMiLCJtYXBwaW5ncyI6IjBLQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGdFQUFpRSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2Q0FBNkMsTUFBUSxHQUFHLFNBQVcsb0RBQW9ELGVBQWlCLENBQUMsZ0hBQWdILFdBQWEsTUFFM1ksVywyQ0NGQSxJQUFhQyxFQUFiLE1BQWFBLGNBQ0FDLG1CQUE0QixDQUFDLGVBQ3RDQyxZQUVBQyxTQUNJLE9BQUlDLEtBQUtGLGFBQWVFLEtBQUtGLFlBQVlHLEtBQzlCLElBQUk7O2lCQUVORCxLQUFLRixZQUFZRztvQkFDZEQsS0FBS0YsWUFBWUksUUFBUUQ7S0FHMUIsSUFBSSxnQkFaVkwsR0FBYSxVQUh6QixRQUFVLENBQ1BPLFNBQVUsb0JBRURQLEcsc0JDT2IsSUFBTVEsRUFBTixNQUFNQSxjQUNKQyxhQUNFLE9BQU9DLE1BQU0sOENBQThDQyxNQUFNQyxHQUMvREEsRUFBSUMsV0FISkwsR0FBYSxVQURsQixXQUNLQSxHQVlOLElBQU1NLEVBQU4sTUFBTUEsWUFNZ0JDLFdBQW1DQyxPQUx2REMsY0FBcUIsR0FDckJDLE9BQ0FDLGFBQ0FDLGlCQUVBQyxZQUFvQk4sRUFBbUNDLEdBQW5DLEtBQUFELFdBQUFBLEVBQW1DLEtBQUFDLE9BQUFBLEVBQ3JETSxRQUFRQyxJQUFJLGlCQUFrQm5CLEtBQUtZLE9BQU9RLG1CQUc1Q0MsUUFDRXJCLEtBQUtXLFdBQVdOLGFBQWFFLE1BQU1lLElBQ2pDdEIsS0FBS3VCLFlBQVlELE1BSXJCRSxVQUFVQyxHQUNSekIsS0FBS2EsY0FBZ0JZLEVBQ3JCekIsS0FBS2dCLGlCQUFpQlUsU0FBUyxDQUFFNUIsWUFBYTJCLElBR3hDRixZQUFZRCxHQUNsQixNQUFNSyxFQUFRTCxFQUFLTSxLQUFLSCxHQUNmLElBQUk7OztvQkFHRyxLQUNSekIsS0FBS3dCLFVBQVVDOztZQUdmQSxFQUFLeEI7O1dBSWIsUUFBT0QsS0FBS2UsYUFBYyxJQUFJLEdBQUdZLEtBR25DNUIsU0FDRSxPQUFPLElBQUk7Ozs7OztjQU1EOEIsS0FBS0MsVUFBVTlCLEtBQUtZLE9BQU9RLGtCQUFtQixLQUFNOzs7aUJBR2hEVyxJQUNOL0IsS0FBS2UsYUFBZWdCOzs7O2lCQUtkQSxJQUNOL0IsS0FBS2dCLGlCQUFtQmU7OztRQXREOUJyQixHQUFXLFVBSmhCLFFBQVUsQ0FDVFAsU0FBVSxlQUNWNkIsT0FBUSxPLDZCQVF3QjVCLEVBQStCLE9BTjNETSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9wZXJzb25zL3BlcnNvbnMtbGlzdC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9wZXJzb25zL3BlcnNvbi1kZXRhaWxzLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGVyc29ucy9wZXJzb25zLWxpc3QuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRlc3R7bGlzdC1zdHlsZTpub25lO21hcmdpbjowO3BhZGRpbmc6MH0udGVzdCBsaXtjb2xvcjojMDAwfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9wZXJzb25zL3BlcnNvbnMtbGlzdC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLE1BQ0UsZUFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBQ0EsU0FDRSxVQVBHXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiRncmV5OiAjMDAwO1xcblxcbi50ZXN0IHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgbGkge1xcbiAgICBjb2xvcjogJGdyZXk7XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIGh0bWwsIElIb29rcyB9IGZyb20gJ0BwbHVtZWpzL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJwZXJzb24tZGV0YWlsc1wiXG59KVxuZXhwb3J0IGNsYXNzIFBlcnNvbkRldGFpbHMgaW1wbGVtZW50cyBJSG9va3Mge1xuICAgIHJlYWRvbmx5IE9ic2VydmVkUHJvcGVydGllcyA9IDxjb25zdD5bJ3VzZXJEZXRhaWxzJ107XG4gICAgdXNlckRldGFpbHM6IHsgbmFtZTogc3RyaW5nOyBjb21wYW55OiB7IG5hbWU6IHN0cmluZyB9IH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnVzZXJEZXRhaWxzICYmIHRoaXMudXNlckRldGFpbHMubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWxgXG5cdFx0XHRcdDxzdHJvbmc+UGVyc29uIERldGFpbHM8L3N0cm9uZz5cblx0XHRcdFx0PGRpdj5OYW1lOiAke3RoaXMudXNlckRldGFpbHMubmFtZX08L2Rpdj5cblx0XHRcdFx0PGRpdj5Db21wYW55OiAke3RoaXMudXNlckRldGFpbHMuY29tcGFueS5uYW1lfTwvZGl2PlxuXHRcdFx0YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sYDxkaXY+PC9kaXY+YDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFJlZixcbiAgaHRtbCxcbiAgSW5qZWN0YWJsZSxcbiAgcmVuZGVyLFxufSBmcm9tIFwiQHBsdW1lanMvY29yZVwiO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBwbHVtZWpzL3JvdXRlclwiO1xuaW1wb3J0IHsgUGVyc29uRGV0YWlscyB9IGZyb20gXCIuL3BlcnNvbi1kZXRhaWxzLmNvbXBvbmVudFwiO1xuaW1wb3J0IHBlcnNvbkxpc3RTdHlsZXMgZnJvbSBcIi4vcGVyc29ucy1saXN0LnNjc3NcIjtcblxuQEluamVjdGFibGUoKVxuY2xhc3MgUGVyc29uU2VydmljZSB7XG4gIGdldFBlcnNvbnMoKSB7XG4gICAgcmV0dXJuIGZldGNoKFwiaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3VzZXJzXCIpLnRoZW4oKHJlcykgPT5cbiAgICAgIHJlcy5qc29uKClcbiAgICApO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJwZXJzb25zLWxpc3RcIixcbiAgc3R5bGVzOiBwZXJzb25MaXN0U3R5bGVzLFxufSlcbmNsYXNzIFBlcnNvbnNMaXN0IHtcbiAgcGVyc29uZGV0YWlsczogYW55ID0ge307XG4gIHVwZGF0ZTogYW55O1xuICB1c2Vyc0xpc3RSZWY6IEhUTUxFbGVtZW50O1xuICBwZXJzb25EZXRhaWxzUmVmOiBDb21wb25lbnRSZWY8UGVyc29uRGV0YWlscz47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwZXJzb25TcnZjOiBQZXJzb25TZXJ2aWNlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XG4gICAgY29uc29sZS5sb2coXCJjdXJyZW50IHJvdXRlIFwiLCB0aGlzLnJvdXRlci5nZXRDdXJyZW50Um91dGUoKSk7XG4gIH1cblxuICBtb3VudCgpIHtcbiAgICB0aGlzLnBlcnNvblNydmMuZ2V0UGVyc29ucygpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyVXNlcnMoZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBhbGVydE5hbWUodXNlcjogYW55KSB7XG4gICAgdGhpcy5wZXJzb25kZXRhaWxzID0gdXNlcjtcbiAgICB0aGlzLnBlcnNvbkRldGFpbHNSZWYuc2V0UHJvcHMoeyB1c2VyRGV0YWlsczogdXNlciB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyVXNlcnMoZGF0YTogQXJyYXk8YW55Pikge1xuICAgIGNvbnN0IG5vZGVzID0gZGF0YS5tYXAoKHVzZXI6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxsaVxuICAgICAgICAgIGNsYXNzPVwicG9pbnRlclwiXG4gICAgICAgICAgb25jbGljaz0keygpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxlcnROYW1lKHVzZXIpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAke3VzZXIubmFtZX1cbiAgICAgICAgPC9saT5cbiAgICAgIGA7XG4gICAgfSk7XG4gICAgcmVuZGVyKHRoaXMudXNlcnNMaXN0UmVmLCBodG1sYCR7bm9kZXN9YCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8aDQ+XG4gICAgICAgIFNhbXBsZSBzZXJ2aWNlIGluamVjdGlvbiB3aXRoIGh0dHAgY2FsbCBhbmQgcGFzc2luZyBkYXRhIHRvIG90aGVyXG4gICAgICAgIGNvbXBvbmVudFxuICAgICAgPC9oND5cbiAgICAgIEN1cnJlbnQgcm91dGUgZGF0YTpcbiAgICAgIDxjb2RlPiR7SlNPTi5zdHJpbmdpZnkodGhpcy5yb3V0ZXIuZ2V0Q3VycmVudFJvdXRlKCksIG51bGwsIDIpfTwvY29kZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC0yMCBtYi0yMCBjb250ZW50XCI+XG4gICAgICAgIDx1bFxuICAgICAgICAgIHJlZj1cIiR7KG5vZGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlcnNMaXN0UmVmID0gbm9kZTtcbiAgICAgICAgICB9fVwiXG4gICAgICAgID48L3VsPlxuICAgICAgICA8cGVyc29uLWRldGFpbHNcbiAgICAgICAgICBpZD1cInBlcnNvbi1kZXRhaWxzXCJcbiAgICAgICAgICByZWY9XCIkeyhub2RlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBlcnNvbkRldGFpbHNSZWYgPSBub2RlO1xuICAgICAgICAgIH19XCJcbiAgICAgICAgPjwvcGVyc29uLWRldGFpbHM+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG59XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJQZXJzb25EZXRhaWxzIiwiT2JzZXJ2ZWRQcm9wZXJ0aWVzIiwidXNlckRldGFpbHMiLCJyZW5kZXIiLCJ0aGlzIiwibmFtZSIsImNvbXBhbnkiLCJzZWxlY3RvciIsIlBlcnNvblNlcnZpY2UiLCJnZXRQZXJzb25zIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsIlBlcnNvbnNMaXN0IiwicGVyc29uU3J2YyIsInJvdXRlciIsInBlcnNvbmRldGFpbHMiLCJ1cGRhdGUiLCJ1c2Vyc0xpc3RSZWYiLCJwZXJzb25EZXRhaWxzUmVmIiwiY29uc3RydWN0b3IiLCJjb25zb2xlIiwibG9nIiwiZ2V0Q3VycmVudFJvdXRlIiwibW91bnQiLCJkYXRhIiwicmVuZGVyVXNlcnMiLCJhbGVydE5hbWUiLCJ1c2VyIiwic2V0UHJvcHMiLCJub2RlcyIsIm1hcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJub2RlIiwic3R5bGVzIl0sInNvdXJjZVJvb3QiOiIifQ==