/*! For license information please see 217.727873a260bd4ed6c814.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[217],{217:(r,t,e)=>{e.d(t,{x:()=>z});var n=function(r,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=t[e])},n(r,t)};function o(r,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=r}n(r,t),r.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}Object.create;function i(r){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&r[t],n=0;if(e)return e.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(r,t){var e="function"==typeof Symbol&&r[Symbol.iterator];if(!e)return r;var n,o,i=e.call(r),s=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(r){o={error:r}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return s}function u(r,t){for(var e=0,n=t.length,o=r.length;e<n;e++,o++)r[o]=t[e];return r}Object.create;function c(r){return"function"==typeof r}function a(r){var t=r((function(r){Error.call(r),r.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var l=a((function(r){return function(t){r(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(r,t){return t+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function p(r,t){if(r){var e=r.indexOf(t);0<=e&&r.splice(e,1)}}var f=function(){function r(r){this.initialTeardown=r,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return r.prototype.unsubscribe=function(){var r,t,e,n,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var p=i(a),f=p.next();!f.done;f=p.next()){f.value.remove(this)}}catch(t){r={error:t}}finally{try{f&&!f.done&&(t=p.return)&&t.call(p)}finally{if(r)throw r.error}}else a.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(r){o=r instanceof l?r.errors:[r]}var d=this._teardowns;if(d){this._teardowns=null;try{for(var y=i(d),b=y.next();!b.done;b=y.next()){var _=b.value;try{v(_)}catch(r){o=null!=o?o:[],r instanceof l?o=u(u([],s(o)),s(r.errors)):o.push(r)}}}catch(r){e={error:r}}finally{try{b&&!b.done&&(n=y.return)&&n.call(y)}finally{if(e)throw e.error}}}if(o)throw new l(o)}},r.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof r){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(t)}},r.prototype._hasParent=function(r){var t=this._parentage;return t===r||Array.isArray(t)&&t.includes(r)},r.prototype._addParent=function(r){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(r),t):t?[t,r]:r},r.prototype._removeParent=function(r){var t=this._parentage;t===r?this._parentage=null:Array.isArray(t)&&p(t,r)},r.prototype.remove=function(t){var e=this._teardowns;e&&p(e,t),t instanceof r&&t._removeParent(this)},r.EMPTY=((t=new r).closed=!0,t),r}(),h=f.EMPTY;function d(r){return r instanceof f||r&&"closed"in r&&c(r.remove)&&c(r.add)&&c(r.unsubscribe)}function v(r){c(r)?r():r.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var e=b.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,u([],s(r)))},clearTimeout:function(r){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(r)},delegate:void 0};function _(r){b.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw r;t(r)}))}function w(){}var m=S("C",void 0,void 0);function S(r,t,e){return{kind:r,value:t,error:e}}var g=null;function x(r){if(y.useDeprecatedSynchronousErrorHandling){var t=!g;if(t&&(g={errorThrown:!1,error:null}),r(),t){var e=g,n=e.errorThrown,o=e.error;if(g=null,n)throw o}}else r()}function E(r){y.useDeprecatedSynchronousErrorHandling&&g&&(g.errorThrown=!0,g.error=r)}var T=function(r){function t(t){var e=r.call(this)||this;return e.isStopped=!1,t?(e.destination=t,d(t)&&t.add(e)):e.destination=k,e}return o(t,r),t.create=function(r,t,e){return new P(r,t,e)},t.prototype.next=function(r){this.isStopped?C(function(r){return S("N",r,void 0)}(r),this):this._next(r)},t.prototype.error=function(r){this.isStopped?C(S("E",void 0,r),this):(this.isStopped=!0,this._error(r))},t.prototype.complete=function(){this.isStopped?C(m,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(r){this.destination.next(r)},t.prototype._error=function(r){try{this.destination.error(r)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),P=function(r){function t(t,e,n){var o,i=r.call(this)||this;if(c(t))o=t;else if(t){var s;o=t.next,e=t.error,n=t.complete,i&&y.useDeprecatedNextContext?(s=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:s=t,o=null==o?void 0:o.bind(s),e=null==e?void 0:e.bind(s),n=null==n?void 0:n.bind(s)}return i.destination={next:o?j(o,i):w,error:j(null!=e?e:O,i),complete:n?j(n,i):w},i}return o(t,r),t}(T);function j(r,t){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{r.apply(void 0,u([],s(t)))}catch(r){y.useDeprecatedSynchronousErrorHandling?E(r):_(r)}}}function O(r){throw r}function C(r,t){var e=y.onStoppedNotification;e&&b.setTimeout((function(){return e(r,t)}))}var k={closed:!0,next:w,error:O,complete:w},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(r){return r}function I(r){return 0===r.length?D:1===r.length?r[0]:function(t){return r.reduce((function(r,t){return t(r)}),t)}}var N=function(){function r(r){r&&(this._subscribe=r)}return r.prototype.lift=function(t){var e=new r;return e.source=this,e.operator=t,e},r.prototype.subscribe=function(r,t,e){var n,o=this,i=(n=r)&&n instanceof T||function(r){return r&&c(r.next)&&c(r.error)&&c(r.complete)}(n)&&d(n)?r:new P(r,t,e);return x((function(){var r=o,t=r.operator,e=r.source;i.add(t?t.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(t){r.error(t)}},r.prototype.forEach=function(r,t){var e=this;return new(t=H(t))((function(t,n){var o;o=e.subscribe((function(t){try{r(t)}catch(r){n(r),null==o||o.unsubscribe()}}),n,t)}))},r.prototype._subscribe=function(r){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(r)},r.prototype[A]=function(){return this},r.prototype.pipe=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return I(r)(this)},r.prototype.toPromise=function(r){var t=this;return new(r=H(r))((function(r,e){var n;t.subscribe((function(r){return n=r}),(function(r){return e(r)}),(function(){return r(n)}))}))},r.create=function(t){return new r(t)},r}();function H(r){var t;return null!==(t=null!=r?r:y.Promise)&&void 0!==t?t:Promise}var U=a((function(r){return function(){r(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),z=function(r){function t(){var t=r.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,r),t.prototype.lift=function(r){var t=new F(this,this);return t.operator=r,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new U},t.prototype.next=function(r){var t=this;x((function(){var e,n;if(t._throwIfClosed(),!t.isStopped){var o=t.observers.slice();try{for(var s=i(o),u=s.next();!u.done;u=s.next()){u.value.next(r)}}catch(r){e={error:r}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}}}))},t.prototype.error=function(r){var t=this;x((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=r;for(var e=t.observers;e.length;)e.shift().error(r)}}))},t.prototype.complete=function(){var r=this;x((function(){if(r._throwIfClosed(),!r.isStopped){r.isStopped=!0;for(var t=r.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var r;return(null===(r=this.observers)||void 0===r?void 0:r.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),r.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(r){return this._throwIfClosed(),this._checkFinalizedStatuses(r),this._innerSubscribe(r)},t.prototype._innerSubscribe=function(r){var t=this,e=t.hasError,n=t.isStopped,o=t.observers;return e||n?h:(o.push(r),new f((function(){return p(o,r)})))},t.prototype._checkFinalizedStatuses=function(r){var t=this,e=t.hasError,n=t.thrownError,o=t.isStopped;e?r.error(n):o&&r.complete()},t.prototype.asObservable=function(){var r=new N;return r.source=this,r},t.create=function(r,t){return new F(r,t)},t}(N),F=function(r){function t(t,e){var n=r.call(this)||this;return n.destination=t,n.source=e,n}return o(t,r),t.prototype.next=function(r){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===e||e.call(t,r)},t.prototype.error=function(r){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===e||e.call(t,r)},t.prototype.complete=function(){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.complete)||void 0===t||t.call(r)},t.prototype._subscribe=function(r){var t,e;return null!==(e=null===(t=this.source)||void 0===t?void 0:t.subscribe(r))&&void 0!==e?e:h},t}(z)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,