"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[394],{394:(e,t,s)=>{s.d(t,{wA:()=>k,B_:()=>C,GS:()=>E,Th:()=>Renderer,D7:()=>L,dy:()=>g,sY:()=>b,uA:()=>N,lN:()=>h});var n=s(905);const o=new class{map=new Map;register(e,t){if(this.map.get(e))throw Error(`${e} is already registered service.`);this.map.set(e,t)}getService(e){const t=this.map.get(e);if(t)return t;throw Error(`${e} is not a registered provider.`)}clear(){this.map=new Map}},a=(e,t,s)=>{const n=[];for(let e=0;e<t.length;e++)"Renderer"!==t[e]?n.push(o.getService(t[e])):n.push(s);return n.length>0?new e(...n):new e};var r=s(818),i=s(720),l=s(658);const c=new class{globalStyles;style_registry;isRootNodeSet;globalStyleTag;constructor(){try{this.globalStyles=new CSSStyleSheet}catch(e){this.globalStyles=""}this.isRootNodeSet=!1,this.globalStyleTag=null}getComputedCss=(e="")=>{let t=[];const s=new CSSStyleSheet;if(s.insertRule(":host { display: block; }"),t=[this.globalStyles,s],e){const s=new CSSStyleSheet;s.replace(e),t.push(s)}return t}};var d=s(954),u=s(513);Symbol("klass");const h=e=>{return(t=e)&&"function"==typeof t.subscribe?e:(e=>!!e&&"function"==typeof e.then)(e)?(0,d.D)(Promise.resolve(e)):(0,u.of)(e);var t},p=(()=>{try{return new CSSStyleSheet,!1}catch(e){return!0}})(),m=(e,t,s,n=!1)=>{e.addEventListener(t,s,n);return()=>{e.removeEventListener(t,s,n)}},{html:g,render:b}=(()=>{const e=/([^\s\\>"'=]+)\s*=\s*(['"]?)$/,t=/<[a-z][^>]+$/i,s=/^attr([^ ]+)/,n=/^insertNode([^ ]+)/,o=e=>{const t={"&":"&amp;","<":"&lt;",">":"&gt;","(":"%28",")":"%29"};let s=JSON.stringify(e);const n=e=>t[e]||e;return s=(e=>e.replace(/[&<>\(\)]/g,n))(s),JSON.parse(s)};return{html:(a,...r)=>{let i="";const{length:l}=a;for(let s=1;s<l;s++){const n=r[s-1];let o=!1;i+=a[s-1],e.test(i)&&t.test(i)&&(i=i.replace(e,((e,t,n)=>`attr${s-1}=${n||'"'}${t}${n?"":'"'}`)),o=!0),o||(Array.isArray(n)||n instanceof DocumentFragment?i+=`\x3c!--insertNode${s-1}--\x3e`:i+=n)}i+=a[l-1];const c=(e=>{const t=document.createElement("template");return t.innerHTML=e,t.content})(i.trim());return((e,t)=>{const n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null);let a=n.nextNode();for(;a;){if(a.eventSubscriptions=[],a.hasAttributes()){const e=Array.from(a.attributes).filter((e=>s.test(e.nodeName)));for(const{nodeName:n,nodeValue:r}of e){const e=s.exec(n)[1];switch(!0){case/^on+/.test(r):{const s=r.slice(2).toLowerCase(),n=m(a,s,t[e]);a.eventSubscriptions.push(n);break}case/ref/.test(r):t[e](a);break;case/^data-+/.test(r):a.setAttribute(`data-${r}`,o(t[e]));break;case/^aria-+/.test(r):a.setAttribute(`aria-${r}`,o(t[e]));break;case/class/.test(r):t[e]?a.classList.add(...t[e].split(" ")):a.setAttribute("class","");break;case/value/.test(r):a.value=o(t[e]);break;case/disabled/.test(r):case/checked/.test(r):t[e]?a.setAttribute(r,t[e]):a.removeAttribute(r);break;default:a.setAttribute(r,o(t[e]))}a.removeAttribute(n)}}a=n.nextNode()}})(c,r),((e,t)=>{const s=document.createTreeWalker(e,NodeFilter.SHOW_COMMENT,null);let o,a=s.nextNode();for(;a;){if(o=n.exec(a.data)){const n=Array.isArray(t[o[1]])?t[o[1]]:[t[o[1]]];a.replaceWith(...n),s.currentNode=e}a=s.nextNode()}})(c,r),c},render:(e,t)=>{e.textContent="",e.appendChild(t)}}})();class Renderer{shadowRoot;update;emitEvent}const S="data-compid",f={selector:"",root:!1,styles:""},y=(e,t=null)=>{const s=document.createElement("style");return s.innerHTML=e,t&&t.appendChild(s),s},w=(e,t,s)=>{if((e={...f,...e}).styles=e.styles.toString(),!r.UG)if(e.root&&!c.isRootNodeSet)c.isRootNodeSet=!0,e.styles&&(y(e.styles,document.head),c.globalStyles.replace(e.styles));else if(e.root&&c.isRootNodeSet)throw Error("Cannot register duplicate root component in "+e.selector+" component");window.customElements.define(e.selector,class extends HTMLElement{klass;shadow;subscriptions=new i.w0;componentStyleTag=null;eventSubscriptions;constructor(){if(super(),this.shadow=this.attachShadow({mode:"open"}),!p){const t=r.UG?[]:c.getComputedCss(e.styles);this.shadow.adoptedStyleSheets=t}this.update=this.update.bind(this),this.emitEvent=this.emitEvent.bind(this),this.setProps=this.setProps.bind(this),this.getInstance=this.getInstance.bind(this)}emulateComponent(){if(p&&e.styles){const n=(new Date).getTime()+Math.floor(1e3*Math.random()+1),o=(t=e.styles,s=`[data-compid="${n.toString()}"]`,t&&(t=s+" "+t.toString().replace("}",` } ${s} `)),t);this.componentStyleTag=y(o),this.setAttribute(S,n.toString())}var t,s}connectedCallback(){this.emulateComponent();const e=new Renderer;e.update=this.update,e.shadowRoot=this.shadow,e.emitEvent=this.emitEvent,this.klass=a(t,s,e),this.klass.beforeMount&&this.klass.beforeMount(),this.update(),this.klass.mount&&this.klass.mount(),this.subscriptions.add((0,l.R)(window,"onLanguageChange").subscribe((()=>{this.update()})))}update(){b(this.shadow,this.klass.render.bind(this.klass)()),p&&(e.styles&&this.shadow.insertBefore(this.componentStyleTag,this.shadow.childNodes[0]),c.globalStyleTag&&this.shadow.insertBefore(document.importNode(c.globalStyleTag,!0),this.shadow.childNodes[0]))}emitEvent(e,t,s=!0){const n=new CustomEvent(e,{detail:t,bubbles:s});this.dispatchEvent(n)}setProps(e){for(const[t,s]of Object.entries(e))this.klass[t]=s;this.klass.onPropsChanged&&this.klass.onPropsChanged(),this.update()}getInstance(){return this.klass}disconnectedCallback(){if(this.subscriptions.unsubscribe(),this.componentStyleTag&&this.componentStyleTag.remove(),this.klass.unmount&&this.klass.unmount(),this.eventSubscriptions?.length)for(const e of this.eventSubscriptions)e()}})},v=e=>(n.Hb.getMetadata("design:paramtypes",e)||[]).map((e=>e.name)),k=e=>t=>{if(e.selector.indexOf("-")<=0)throw new Error("You need at least 1 dash in the custom element name!");if(!window.customElements.get(e.selector)){const s=v(t);t.prototype.selector=e.selector,w(e,t,s)}},E=()=>e=>{const t=v(e),s=a(e,t);o.register(e.name,s)};var T=s(655);let C=class DomTransition{transition="";constructor(){this.whichTransitionEnd()}whichTransitionEnd(){const e=document.createElement("div").style,t={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"};for(const s in t)if(void 0!==e[s]){this.transition=t[s];break}}onTransitionEnd(e,t,s){let n=!1,o=null;const a=()=>{n||(n=!0,t&&t(),o.unsubscribe(),o=null)};o=(0,l.R)(e,this.transition).subscribe((()=>{a()})),setTimeout(a,s)}};C=(0,T.gn)([E(),(0,T.w6)("design:paramtypes",[])],C);const N=e=>{const t={...e},[s,n]=(e=>{const t=e;return[t,e=>{let s;s="function"==typeof e?e(t):e,Object.assign(t,s)}]})(e);return[s,e=>t=>{const o=(e=>{let t;switch(e.nodeName&&e.nodeName.toLowerCase()){case"input":case"textarea":t=["radio","checkbox"].includes(e.type)?!!e.checked&&(null===e.value||"on"===e.value||e.value):e.value;break;case"select":t="select-one"===e.type?e.value:[...Array.from(e.options)].filter((e=>e.selected)).map((e=>e.value));break;default:t=e.value}return t})(t.target);n((()=>(s[e]=o,s)))},()=>{Object.assign(s,t)}]};var A=s(949);let L=class TranslationService{_defaultLanguage="";setTranslate(e,t){(0,A.setTranslate)(e,t)}setDefaultLanguage(e){this._defaultLanguage=e,(0,A.setDefaultLanguage)(e);const t=new CustomEvent("onLanguageChange");window.dispatchEvent(t)}getCurrentLanguage(){return this._defaultLanguage}};L=(0,T.gn)([E()],L)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,