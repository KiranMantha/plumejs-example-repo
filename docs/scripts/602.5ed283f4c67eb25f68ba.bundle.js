"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[602],{1602:(t,e,r)=>{e.F=void 0,r(346);var a=r(9282);Object.defineProperty(e,"F",{enumerable:!0,get:function(){return a.Router}})},1346:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InternalRouter=void 0;const a=r(655),o=r(8522),s=r(8698),n=r(4035);let i=class InternalRouter{_currentRoute={path:"",params:{},state:{}};_template=new s.Subject;constructor(){(0,s.fromEvent)(window,"hashchange").subscribe((()=>{this._registerOnHashChange()}))}getTemplate(){return this._template.asObservable()}getCurrentRoute(){return this._currentRoute}navigateTo(t="",e){if(t){window.location.hash.replace(/^#/,"")===t&&this._navigateTo(t,e),window.location.hash="#"+t}else this._navigateTo(t,e)}_registerOnHashChange(){const t=window.location.hash.replace(/^#/,"");this._navigateTo(t,null)}_routeMatcher(t,e){if(t){const r=new RegExp(t.replace(/:[^\s/]+/g,"([\\w-]+)"));return e.match(r)}return t===e}_navigateTo(t,e){const r=t.split("/").filter((t=>t.length>0)),a=n.StaticRouter.routList.filter((e=>e.Params.length===r.length&&this._routeMatcher(e.Url,t)||e.Url===t?e:void 0)),s=a.length>0?a[0]:null;s&&(this._currentRoute.path=t,this._currentRoute.state={...e||{}},(0,o.wrapIntoObservable)(s.canActivate()).subscribe((a=>{if(!a)return;const i=n.StaticRouter.checkParams(r,s);Object.keys(i).length>0||t?(this._currentRoute.params=i,s.IsRegistered?this._template.next(s.Template):s.TemplatePath&&(0,o.wrapIntoObservable)(s.TemplatePath()).subscribe((()=>{s.IsRegistered=!0,this._template.next(s.Template)}))):this.navigateTo(s.redirectTo,e)})))}};i=(0,a.__decorate)([(0,o.Injectable)(),(0,a.__metadata)("design:paramtypes",[])],i),e.InternalRouter=i},346:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});const a=r(655),o=r(8522),s=r(8698),n=r(1346);let i=class RouterOutlet{router;renderer;_template="";_subscriptions=new s.Subscription;constructor(t,e){this.router=t,this.renderer=e}beforeMount(){this._subscriptions.add(this.router.getTemplate().subscribe((t=>{this._template=t,this.renderer.update()})))}mount(){const t=window.location.hash.replace(/^#/,"");this.router.navigateTo(t,null)}unmount(){this._subscriptions.unsubscribe()}render(){if(this._template){const t=[`${this._template}`];return t.raw=[`${this._template}`],(0,o.html)(t)}return o.html``}};i=(0,a.__decorate)([(0,o.Component)({selector:"router-outlet"}),(0,a.__metadata)("design:paramtypes",[n.InternalRouter,o.Renderer])],i)},9282:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Router=void 0;const a=r(655),o=r(8522),s=r(3818),n=r(1346),i=r(4035);let u=class Router{internalRouter;constructor(t){this.internalRouter=t}getCurrentRoute(){return this.internalRouter.getCurrentRoute()}navigateTo(t,e){this.internalRouter.navigateTo(t,e)}static registerRoutes(t){if(!s.isNode){if(!Array.isArray(t))throw Error("router.addRoutes: the parameter must be an array");for(const e of t)i.StaticRouter.formatRoute(e)}}};u=(0,a.__decorate)([(0,o.Injectable)(),(0,a.__metadata)("design:paramtypes",[n.InternalRouter])],u),e.Router=u},4035:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StaticRouter=void 0;class StaticRouter{static routList=[];static checkParams(t,e){let r=0;const a={},o=e.ParamCount;for(let o=0;o<t.length;o++){const s=e.Params[o];s.indexOf(":")>=0&&(a[s.split(":")[1]]=t[o],r+=1)}return r===o?a:{}}static getParamCount(t){let e=0;return t.forEach((t=>{t.indexOf(":")>=0&&(e+=1)})),e}static formatRoute(t){const e={Params:{},Url:"",Template:"",ParamCount:0,IsRegistered:!1,redirectTo:"",canActivate:()=>!0};if(e.Params=t.path.split("/").filter((t=>t.length>0)),e.Url=t.path,e.Template="",e.redirectTo=t.redirectTo,t.template){if(!t.templatePath)throw Error("templatePath is required in route if template is mentioned.");e.Template=t.template,e.TemplatePath=t.templatePath}t.canActivate&&(e.canActivate=t.canActivate),e.ParamCount=StaticRouter.getParamCount(e.Params),StaticRouter.routList.push(e)}}e.StaticRouter=StaticRouter}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy82MDIuNWVkMjgzZjRjNjdlYjI1ZjY4YmEuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiIySEFFQUEsRUFBUSxPQUFTLEVBQ2pCLEVBQVEsS0FDUixJQUFJQyxFQUFtQixFQUFRLE1BQy9CQyxPQUFPQyxlQUFlSCxFQUFTLElBQS9CLENBQTJDSSxZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPSixFQUFpQkssVyxlQ0p4R0osT0FBT0MsZUFBZUgsRUFBUyxhQUFjLENBQUVPLE9BQU8sSUFDdERQLEVBQVFRLG9CQUFpQixFQUN6QixNQUFNQyxFQUFVLEVBQVEsS0FDbEJDLEVBQVMsRUFBUSxNQUNqQkMsRUFBUyxFQUFRLE1BQ2pCQyxFQUFpQixFQUFRLE1BQy9CLElBQUlKLEVBQWlCLE1BQU1BLGVBQ3ZCSyxjQUFnQixDQUNaQyxLQUFNLEdBQ05DLE9BQVEsR0FDUkMsTUFBTyxJQUVYQyxVQUFZLElBQUlOLEVBQU9PLFFBQ3ZCQyxlQUNJLEVBQUlSLEVBQU9TLFdBQVdDLE9BQVEsY0FBY0MsV0FBVSxLQUNsREMsS0FBS0MsMkJBR2JDLGNBQ0ksT0FBT0YsS0FBS04sVUFBVVMsZUFFMUJDLGtCQUNJLE9BQU9KLEtBQUtWLGNBRWhCZSxXQUFXZCxFQUFPLEdBQUlFLEdBQ2xCLEdBQUlGLEVBQU0sQ0FDYU8sT0FBT1EsU0FBU0MsS0FBS0MsUUFBUSxLQUFNLE1BQ25DakIsR0FDZlMsS0FBS1MsWUFBWWxCLEVBQU1FLEdBRTNCSyxPQUFPUSxTQUFTQyxLQUFPLElBQU1oQixPQUc3QlMsS0FBS1MsWUFBWWxCLEVBQU1FLEdBRy9CUSx3QkFDSSxNQUFNVixFQUFPTyxPQUFPUSxTQUFTQyxLQUFLQyxRQUFRLEtBQU0sSUFDaERSLEtBQUtTLFlBQVlsQixFQUFNLE1BRTNCbUIsY0FBY0MsRUFBT3BCLEdBQ2pCLEdBQUlvQixFQUFPLENBQ1AsTUFBTUMsRUFBVyxJQUFJQyxPQUFPRixFQUFNSCxRQUFRLFlBQWEsY0FDdkQsT0FBT2pCLEVBQUt1QixNQUFNRixHQUdsQixP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UXZCLEdBTkFzRCxFQUFJMUQsT0FBUytDLEVBQUUvRSxLQUFLeUIsTUFBTSxLQUFLQyxRQUFRQyxHQUM1QkEsRUFBRUMsT0FBUyxJQUV0QjhELEVBQUl6RCxJQUFNOEMsRUFBRS9FLEtBQ1owRixFQUFJL0MsU0FBVyxHQUNmK0MsRUFBSTdDLFdBQWFrQyxFQUFFbEMsV0FDZmtDLEVBQUVZLFNBQVUsQ0FDWixJQUFLWixFQUFFYSxhQUNILE1BQU1oQixNQUFNLCtEQUNoQmMsRUFBSS9DLFNBQVdvQyxFQUFFWSxTQUNqQkQsRUFBSTlDLGFBQWVtQyxFQUFFYSxhQUVyQmIsRUFBRTNDLGNBQ0ZzRCxFQUFJdEQsWUFBYzJDLEVBQUUzQyxhQUN4QnNELEVBQUlQLFdBQWFyRCxhQUFhK0QsY0FBY0gsRUFBSTFELFFBQ2hERixhQUFhQyxTQUFTK0QsS0FBS0osSUFHbkN4RyxFQUFRNEMsYUFBZUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BwbHVtZWpzL3JvdXRlci9kaXN0L3NyYy9pbnRlcm5hbFJvdXRlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9yb3V0ZXIvZGlzdC9zcmMvcm91dGVyLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBsdW1lanMvcm91dGVyL2Rpc3Qvc3JjL3JvdXRlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcGx1bWVqcy9yb3V0ZXIvZGlzdC9zcmMvc3RhdGljUm91dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb3V0ZXIgPSB2b2lkIDA7XG5yZXF1aXJlKFwiLi9zcmMvcm91dGVyLmNvbXBvbmVudFwiKTtcbnZhciByb3V0ZXJfc2VydmljZV8xID0gcmVxdWlyZShcIi4vc3JjL3JvdXRlci5zZXJ2aWNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUm91dGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXJfc2VydmljZV8xLlJvdXRlcjsgfSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnRlcm5hbFJvdXRlciA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQHBsdW1lanMvY29yZVwiKTtcbmNvbnN0IHJ4anNfMSA9IHJlcXVpcmUoXCJyeGpzXCIpO1xuY29uc3Qgc3RhdGljUm91dGVyXzEgPSByZXF1aXJlKFwiLi9zdGF0aWNSb3V0ZXJcIik7XG5sZXQgSW50ZXJuYWxSb3V0ZXIgPSBjbGFzcyBJbnRlcm5hbFJvdXRlciB7XG4gICAgX2N1cnJlbnRSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIHBhcmFtczoge30sXG4gICAgICAgIHN0YXRlOiB7fVxuICAgIH07XG4gICAgX3RlbXBsYXRlID0gbmV3IHJ4anNfMS5TdWJqZWN0KCk7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICgwLCByeGpzXzEuZnJvbUV2ZW50KSh3aW5kb3csICdoYXNoY2hhbmdlJykuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyT25IYXNoQ2hhbmdlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cbiAgICBnZXRDdXJyZW50Um91dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50Um91dGU7XG4gICAgfVxuICAgIG5hdmlnYXRlVG8ocGF0aCA9ICcnLCBzdGF0ZSkge1xuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgY29uc3Qgd2luZG93SGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoL14jLywgJycpO1xuICAgICAgICAgICAgaWYgKHdpbmRvd0hhc2ggPT09IHBhdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9uYXZpZ2F0ZVRvKHBhdGgsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMnICsgcGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25hdmlnYXRlVG8ocGF0aCwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZWdpc3Rlck9uSGFzaENoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoL14jLywgJycpO1xuICAgICAgICB0aGlzLl9uYXZpZ2F0ZVRvKHBhdGgsIG51bGwpO1xuICAgIH1cbiAgICBfcm91dGVNYXRjaGVyKHJvdXRlLCBwYXRoKSB7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgY29uc3QgX21hdGNoZXIgPSBuZXcgUmVnRXhwKHJvdXRlLnJlcGxhY2UoLzpbXlxccy9dKy9nLCAnKFtcXFxcdy1dKyknKSk7XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5tYXRjaChfbWF0Y2hlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcm91dGUgPT09IHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX25hdmlnYXRlVG8ocGF0aCwgc3RhdGUpIHtcbiAgICAgICAgY29uc3QgdVBhcmFtcyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKGgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByb3V0ZUFyciA9IHN0YXRpY1JvdXRlcl8xLlN0YXRpY1JvdXRlci5yb3V0TGlzdC5maWx0ZXIoKHJvdXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAocm91dGUuUGFyYW1zLmxlbmd0aCA9PT0gdVBhcmFtcy5sZW5ndGggJiYgdGhpcy5fcm91dGVNYXRjaGVyKHJvdXRlLlVybCwgcGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyb3V0ZS5VcmwgPT09IHBhdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByb3V0ZUl0ZW0gPSByb3V0ZUFyci5sZW5ndGggPiAwID8gcm91dGVBcnJbMF0gOiBudWxsO1xuICAgICAgICBpZiAocm91dGVJdGVtKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Um91dGUucGF0aCA9IHBhdGg7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Um91dGUuc3RhdGUgPSB7IC4uLihzdGF0ZSB8fCB7fSkgfTtcbiAgICAgICAgICAgICgwLCBjb3JlXzEud3JhcEludG9PYnNlcnZhYmxlKShyb3V0ZUl0ZW0uY2FuQWN0aXZhdGUoKSkuc3Vic2NyaWJlKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9wYXJhbXMgPSBzdGF0aWNSb3V0ZXJfMS5TdGF0aWNSb3V0ZXIuY2hlY2tQYXJhbXModVBhcmFtcywgcm91dGVJdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoX3BhcmFtcykubGVuZ3RoID4gMCB8fCBwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSb3V0ZS5wYXJhbXMgPSBfcGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJvdXRlSXRlbS5Jc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3V0ZUl0ZW0uVGVtcGxhdGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGNvcmVfMS53cmFwSW50b09ic2VydmFibGUpKHJvdXRlSXRlbS5UZW1wbGF0ZVBhdGgoKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVJdGVtLklzUmVnaXN0ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlLm5leHQocm91dGVJdGVtLlRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlLm5leHQocm91dGVJdGVtLlRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvKHJvdXRlSXRlbS5yZWRpcmVjdFRvLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuSW50ZXJuYWxSb3V0ZXIgPSAoMCwgdHNsaWJfMS5fX2RlY29yYXRlKShbXG4gICAgKDAsIGNvcmVfMS5JbmplY3RhYmxlKSgpLFxuICAgICgwLCB0c2xpYl8xLl9fbWV0YWRhdGEpKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW10pXG5dLCBJbnRlcm5hbFJvdXRlcik7XG5leHBvcnRzLkludGVybmFsUm91dGVyID0gSW50ZXJuYWxSb3V0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQHBsdW1lanMvY29yZVwiKTtcbmNvbnN0IHJ4anNfMSA9IHJlcXVpcmUoXCJyeGpzXCIpO1xuY29uc3QgaW50ZXJuYWxSb3V0ZXJfc2VydmljZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxSb3V0ZXIuc2VydmljZVwiKTtcbmxldCBSb3V0ZXJPdXRsZXQgPSBjbGFzcyBSb3V0ZXJPdXRsZXQge1xuICAgIHJvdXRlcjtcbiAgICByZW5kZXJlcjtcbiAgICBfdGVtcGxhdGUgPSAnJztcbiAgICBfc3Vic2NyaXB0aW9ucyA9IG5ldyByeGpzXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgY29uc3RydWN0b3Iocm91dGVyLCByZW5kZXJlcikge1xuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIH1cbiAgICBiZWZvcmVNb3VudCgpIHtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5hZGQodGhpcy5yb3V0ZXIuZ2V0VGVtcGxhdGUoKS5zdWJzY3JpYmUoKHRtcGwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlID0gdG1wbDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudXBkYXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKC9eIy8sICcnKTtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVUbyhwYXRoLCBudWxsKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nQXJyYXkgPSBbYCR7dGhpcy5fdGVtcGxhdGV9YF07XG4gICAgICAgICAgICBzdHJpbmdBcnJheS5yYXcgPSBbYCR7dGhpcy5fdGVtcGxhdGV9YF07XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5odG1sKShzdHJpbmdBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5odG1sKSBgYDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5Sb3V0ZXJPdXRsZXQgPSAoMCwgdHNsaWJfMS5fX2RlY29yYXRlKShbXG4gICAgKDAsIGNvcmVfMS5Db21wb25lbnQpKHtcbiAgICAgICAgc2VsZWN0b3I6ICdyb3V0ZXItb3V0bGV0J1xuICAgIH0pLFxuICAgICgwLCB0c2xpYl8xLl9fbWV0YWRhdGEpKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW2ludGVybmFsUm91dGVyX3NlcnZpY2VfMS5JbnRlcm5hbFJvdXRlciwgY29yZV8xLlJlbmRlcmVyXSlcbl0sIFJvdXRlck91dGxldCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUm91dGVyID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJAcGx1bWVqcy9jb3JlXCIpO1xuY29uc3QgYnJvd3Nlcl9vcl9ub2RlXzEgPSByZXF1aXJlKFwiYnJvd3Nlci1vci1ub2RlXCIpO1xuY29uc3QgaW50ZXJuYWxSb3V0ZXJfc2VydmljZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxSb3V0ZXIuc2VydmljZVwiKTtcbmNvbnN0IHN0YXRpY1JvdXRlcl8xID0gcmVxdWlyZShcIi4vc3RhdGljUm91dGVyXCIpO1xubGV0IFJvdXRlciA9IGNsYXNzIFJvdXRlciB7XG4gICAgaW50ZXJuYWxSb3V0ZXI7XG4gICAgY29uc3RydWN0b3IoaW50ZXJuYWxSb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFJvdXRlciA9IGludGVybmFsUm91dGVyO1xuICAgIH1cbiAgICBnZXRDdXJyZW50Um91dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUm91dGVyLmdldEN1cnJlbnRSb3V0ZSgpO1xuICAgIH1cbiAgICBuYXZpZ2F0ZVRvKHBhdGgsIHN0YXRlKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxSb3V0ZXIubmF2aWdhdGVUbyhwYXRoLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRpYyByZWdpc3RlclJvdXRlcyhyb3V0ZXMpIHtcbiAgICAgICAgaWYgKCFicm93c2VyX29yX25vZGVfMS5pc05vZGUpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvdXRlcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJvdXRlIG9mIHJvdXRlcykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNSb3V0ZXJfMS5TdGF0aWNSb3V0ZXIuZm9ybWF0Um91dGUocm91dGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdyb3V0ZXIuYWRkUm91dGVzOiB0aGUgcGFyYW1ldGVyIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5Sb3V0ZXIgPSAoMCwgdHNsaWJfMS5fX2RlY29yYXRlKShbXG4gICAgKDAsIGNvcmVfMS5JbmplY3RhYmxlKSgpLFxuICAgICgwLCB0c2xpYl8xLl9fbWV0YWRhdGEpKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW2ludGVybmFsUm91dGVyX3NlcnZpY2VfMS5JbnRlcm5hbFJvdXRlcl0pXG5dLCBSb3V0ZXIpO1xuZXhwb3J0cy5Sb3V0ZXIgPSBSb3V0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RhdGljUm91dGVyID0gdm9pZCAwO1xuY2xhc3MgU3RhdGljUm91dGVyIHtcbiAgICBzdGF0aWMgcm91dExpc3QgPSBbXTtcbiAgICBzdGF0aWMgY2hlY2tQYXJhbXModXAsIHIpIHtcbiAgICAgICAgbGV0IHBtYyA9IDA7XG4gICAgICAgIGNvbnN0IHBvID0ge30sIHBjID0gci5QYXJhbUNvdW50O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBydFBhcmFtID0gci5QYXJhbXNbaV07XG4gICAgICAgICAgICBpZiAocnRQYXJhbS5pbmRleE9mKCc6JykgPj0gMCkge1xuICAgICAgICAgICAgICAgIHBvW3J0UGFyYW0uc3BsaXQoJzonKVsxXV0gPSB1cFtpXTtcbiAgICAgICAgICAgICAgICBwbWMgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocG1jID09PSBwYykge1xuICAgICAgICAgICAgcmV0dXJuIHBvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgc3RhdGljIGdldFBhcmFtQ291bnQocCkge1xuICAgICAgICBsZXQgcGMgPSAwO1xuICAgICAgICBwLmZvckVhY2goKGspID0+IHtcbiAgICAgICAgICAgIGlmIChrLmluZGV4T2YoJzonKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcGMgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYztcbiAgICB9XG4gICAgc3RhdGljIGZvcm1hdFJvdXRlKHIpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgUGFyYW1zOiB7fSxcbiAgICAgICAgICAgIFVybDogJycsXG4gICAgICAgICAgICBUZW1wbGF0ZTogJycsXG4gICAgICAgICAgICBQYXJhbUNvdW50OiAwLFxuICAgICAgICAgICAgSXNSZWdpc3RlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlZGlyZWN0VG86ICcnLFxuICAgICAgICAgICAgY2FuQWN0aXZhdGU6ICgpID0+IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgb2JqLlBhcmFtcyA9IHIucGF0aC5zcGxpdCgnLycpLmZpbHRlcigoaCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGgubGVuZ3RoID4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIG9iai5VcmwgPSByLnBhdGg7XG4gICAgICAgIG9iai5UZW1wbGF0ZSA9ICcnO1xuICAgICAgICBvYmoucmVkaXJlY3RUbyA9IHIucmVkaXJlY3RUbztcbiAgICAgICAgaWYgKHIudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIGlmICghci50ZW1wbGF0ZVBhdGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3RlbXBsYXRlUGF0aCBpcyByZXF1aXJlZCBpbiByb3V0ZSBpZiB0ZW1wbGF0ZSBpcyBtZW50aW9uZWQuJyk7XG4gICAgICAgICAgICBvYmouVGVtcGxhdGUgPSByLnRlbXBsYXRlO1xuICAgICAgICAgICAgb2JqLlRlbXBsYXRlUGF0aCA9IHIudGVtcGxhdGVQYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyLmNhbkFjdGl2YXRlKVxuICAgICAgICAgICAgb2JqLmNhbkFjdGl2YXRlID0gci5jYW5BY3RpdmF0ZTtcbiAgICAgICAgb2JqLlBhcmFtQ291bnQgPSBTdGF0aWNSb3V0ZXIuZ2V0UGFyYW1Db3VudChvYmouUGFyYW1zKTtcbiAgICAgICAgU3RhdGljUm91dGVyLnJvdXRMaXN0LnB1c2gob2JqKTtcbiAgICB9XG59XG5leHBvcnRzLlN0YXRpY1JvdXRlciA9IFN0YXRpY1JvdXRlcjtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwicm91dGVyX3NlcnZpY2VfMSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIlJvdXRlciIsInZhbHVlIiwiSW50ZXJuYWxSb3V0ZXIiLCJ0c2xpYl8xIiwiY29yZV8xIiwicnhqc18xIiwic3RhdGljUm91dGVyXzEiLCJfY3VycmVudFJvdXRlIiwicGF0aCIsInBhcmFtcyIsInN0YXRlIiwiX3RlbXBsYXRlIiwiU3ViamVjdCIsImNvbnN0cnVjdG9yIiwiZnJvbUV2ZW50Iiwid2luZG93Iiwic3Vic2NyaWJlIiwidGhpcyIsIl9yZWdpc3Rlck9uSGFzaENoYW5nZSIsImdldFRlbXBsYXRlIiwiYXNPYnNlcnZhYmxlIiwiZ2V0Q3VycmVudFJvdXRlIiwibmF2aWdhdGVUbyIsImxvY2F0aW9uIiwiaGFzaCIsInJlcGxhY2UiLCJfbmF2aWdhdGVUbyIsIl9yb3V0ZU1hdGNoZXIiLCJyb3V0ZSIsIl9tYXRjaGVyIiwiUmVnRXhwIiwibWF0Y2giLCJ1UGFyYW1zIiwic3BsaXQiLCJmaWx0ZXIiLCJoIiwibGVuZ3RoIiwicm91dGVBcnIiLCJTdGF0aWNSb3V0ZXIiLCJyb3V0TGlzdCIsIlBhcmFtcyIsIlVybCIsInJvdXRlSXRlbSIsIndyYXBJbnRvT2JzZXJ2YWJsZSIsImNhbkFjdGl2YXRlIiwidmFsIiwiX3BhcmFtcyIsImNoZWNrUGFyYW1zIiwia2V5cyIsIklzUmVnaXN0ZXJlZCIsIm5leHQiLCJUZW1wbGF0ZSIsIlRlbXBsYXRlUGF0aCIsInJlZGlyZWN0VG8iLCJfX2RlY29yYXRlIiwiSW5qZWN0YWJsZSIsIl9fbWV0YWRhdGEiLCJpbnRlcm5hbFJvdXRlcl9zZXJ2aWNlXzEiLCJSb3V0ZXJPdXRsZXQiLCJyb3V0ZXIiLCJyZW5kZXJlciIsIl9zdWJzY3JpcHRpb25zIiwiU3Vic2NyaXB0aW9uIiwiYmVmb3JlTW91bnQiLCJhZGQiLCJ0bXBsIiwidXBkYXRlIiwibW91bnQiLCJ1bm1vdW50IiwidW5zdWJzY3JpYmUiLCJyZW5kZXIiLCJzdHJpbmdBcnJheSIsInJhdyIsImh0bWwiLCJDb21wb25lbnQiLCJzZWxlY3RvciIsIlJlbmRlcmVyIiwiYnJvd3Nlcl9vcl9ub2RlXzEiLCJpbnRlcm5hbFJvdXRlciIsInN0YXRpYyIsInJvdXRlcyIsImlzTm9kZSIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwiZm9ybWF0Um91dGUiLCJ1cCIsInIiLCJwbWMiLCJwbyIsInBjIiwiUGFyYW1Db3VudCIsImkiLCJydFBhcmFtIiwiaW5kZXhPZiIsInAiLCJmb3JFYWNoIiwiayIsIm9iaiIsInRlbXBsYXRlIiwidGVtcGxhdGVQYXRoIiwiZ2V0UGFyYW1Db3VudCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9