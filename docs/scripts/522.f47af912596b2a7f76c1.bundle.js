"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[522],{8522:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestBed=t.wrapIntoObservable=t.useFormFields=t.TranslationService=t.Renderer=t.render=t.InjectionToken=t.Injector=t.Injectable=t.html=t.DomTransition=t.Component=void 0;var r=n(6195);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r.Component}}),Object.defineProperty(t,"DomTransition",{enumerable:!0,get:function(){return r.DomTransition}}),Object.defineProperty(t,"html",{enumerable:!0,get:function(){return r.html}}),Object.defineProperty(t,"Injectable",{enumerable:!0,get:function(){return r.Injectable}}),Object.defineProperty(t,"Injector",{enumerable:!0,get:function(){return r.Injector}}),Object.defineProperty(t,"InjectionToken",{enumerable:!0,get:function(){return r.InjectionToken}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return r.render}}),Object.defineProperty(t,"Renderer",{enumerable:!0,get:function(){return r.Renderer}}),Object.defineProperty(t,"TranslationService",{enumerable:!0,get:function(){return r.TranslationService}}),Object.defineProperty(t,"useFormFields",{enumerable:!0,get:function(){return r.useFormFields}}),Object.defineProperty(t,"wrapIntoObservable",{enumerable:!0,get:function(){return r.wrapIntoObservable}});var o=n(9280);Object.defineProperty(t,"TestBed",{enumerable:!0,get:function(){return o.TestBed}})},4497:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.componentRegistry=void 0;const n=new class{globalStyles;style_registry;isRootNodeSet;globalStyleTag;constructor(){try{this.globalStyles=new CSSStyleSheet}catch(e){this.globalStyles=""}this.isRootNodeSet=!1,this.globalStyleTag=null}getComputedCss=(e="")=>{let t=[];const n=new CSSStyleSheet;if(n.insertRule(":host { display: block; }"),t=[this.globalStyles,n],e){const n=new CSSStyleSheet;n.replace(e),t.push(n)}return t}};t.componentRegistry=n},4384:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InjectionToken=t.Injectable=t.Component=void 0;const r=n(1905),o=n(2223),s=n(3913),i=n(4858),a=e=>(r.Reflection.getMetadata("design:paramtypes",e)||[]).map((e=>e.name));t.Component=e=>t=>{if(e.selector.indexOf("-")<=0)throw new Error("You need at least 1 dash in the custom element name!");if(!window.customElements.get(e.selector)){const n=a(t);t.prototype.selector=e.selector,(0,s.registerElement)(e,t,n)}};t.Injectable=()=>e=>{const t=a(e),n=(0,o.instantiate)(e,t);i.Injector.register(e.name,n)};t.InjectionToken=(e,t)=>{i.Injector.register(e,t)}},202:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DomTransition=void 0;const r=n(655),o=n(8698),s=n(4384);let i=class{transition="";constructor(){this.whichTransitionEnd()}whichTransitionEnd(){const e=document.createElement("div").style,t={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"otransitionend"};for(const n in t)if(void 0!==e[n]){this.transition=t[n];break}}onTransitionEnd(e,t,n){let r=!1,s=null;const i=()=>{r||(r=!0,t&&t(),s.unsubscribe(),s=null)};s=(0,o.fromEvent)(e,this.transition).subscribe((()=>{i()})),setTimeout(i,n)}};i=(0,r.__decorate)([(0,s.Injectable)(),(0,r.__metadata)("design:paramtypes",[])],i),t.DomTransition=i},861:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});(0,n(655).__exportStar)(n(2533),t)},2533:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useFormFields=void 0;const r=n(5546);t.useFormFields=e=>{const t={...e},[n,o]=(0,r.useState)(e);return[n,e=>t=>{const r=(e=>{let t;switch(e.nodeName&&e.nodeName.toLowerCase()){case"input":case"textarea":t=["radio","checkbox"].includes(e.type)?!!e.checked&&(null===e.value||"on"===e.value||e.value):e.value;break;case"select":t="select-one"===e.type?e.value:[...Array.from(e.options)].filter((e=>e.selected)).map((e=>e.value));break;default:t=e.value}return t})(t.target);o((()=>(n[e]=r,n)))},()=>{Object.assign(n,t)}]}},5546:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useState=void 0;const r=n(7401);t.useState=e=>{const t=e;return[t,e=>{let n;n=(0,r.isFunction)(e)?e(t):e,Object.assign(t,n)}]}},2827:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.render=t.html=void 0;const{html:n,render:r}=(()=>{const e=/([^\s\\>"'=]+)\s*=\s*(['"]?)$/,t=/<[a-z][^>]+$/i,n=/^attr([^ ]+)/,r=/^insertNode([^ ]+)/,o=e=>{const t={"&":"&amp;","<":"&lt;",">":"&gt;","(":"%28",")":"%29"};let n=JSON.stringify(e);const r=e=>t[e]||e;return n=(e=>e.replace(/[&<>\(\)]/g,r))(n),JSON.parse(n)};return{html:(s,...i)=>{let a="";const{length:c}=s;for(let n=1;n<c;n++){const r=i[n-1];let o=!1;a+=s[n-1],e.test(a)&&t.test(a)&&(a=a.replace(e,((e,t,r)=>`attr${n-1}=${r||'"'}${t}${r?"":'"'}`)),o=!0),o||(Array.isArray(r)||r instanceof DocumentFragment?a+=`\x3c!--insertNode${n-1}--\x3e`:a+=r)}a+=s[c-1];const l=(e=>{const t=document.createElement("template");return t.innerHTML=e,t.content})(a.trim());return((e,t)=>{const r=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,null);let s=r.nextNode();for(;s;){if(s.hasAttributes()){const e=Array.from(s.attributes).filter((e=>n.test(e.nodeName)));for(const{nodeName:r,nodeValue:i}of e){const e=n.exec(r)[1];switch(!0){case/^on+/.test(i):{const n=i.slice(2).toLowerCase();s.removeEventListener(n,t[e]),s.addEventListener(n,t[e]),(s.eventListenersMap||(s.eventListenersMap={}))[n]=t[e];break}case/ref/.test(i):t[e](s);break;case/^data-+/.test(i):s.setAttribute(`data-${i}`,o(t[e]));break;case/^aria-+/.test(i):s.setAttribute(`aria-${i}`,o(t[e]));break;case/class/.test(i):t[e]?s.classList.add(...t[e].split(" ")):s.setAttribute("class","");break;case/value/.test(i):s.value=o(t[e]);break;case/disabled/.test(i):case/checked/.test(i):t[e]?s.setAttribute(i,t[e]):s.removeAttribute(i);break;default:s.setAttribute(i,o(t[e]))}s.removeAttribute(r)}}s=r.nextNode()}})(l,i),((e,t)=>{const n=document.createTreeWalker(e,NodeFilter.SHOW_COMMENT,null);let o,s=n.nextNode();for(;s;){if(o=r.exec(s.data)){const r=Array.isArray(t[o[1]])?t[o[1]]:[t[o[1]]];s.replaceWith(...r),n.currentNode=e}s=n.nextNode()}})(l,i),l},render:(e,t)=>{e.textContent="",e.appendChild(t)}}})();t.html=n,t.render=r},2223:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.instantiate=void 0;const r=n(4858);t.instantiate=(e,t,n)=>{const o=[];for(let e=0;e<t.length;e++)"Renderer"!==t[e]?o.push(r.Injector.getService(t[e])):o.push(n);return o.length>0?new e(...o):new e}},3913:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registerElement=void 0;const r=n(3818),o=n(8698),s=n(4497),i=n(2827),a=n(2223),c=n(816),l=n(7401),u="data-compid",d={selector:"",root:!1,styles:""},m=(e,t=null)=>{const n=document.createElement("style");return n.innerHTML=e,t&&t.appendChild(n),n};t.registerElement=(e,t,n)=>{if((e={...d,...e}).styles=e.styles.toString(),!r.isNode)if(e.root&&!s.componentRegistry.isRootNodeSet)s.componentRegistry.isRootNodeSet=!0,e.styles&&(m(e.styles,document.head),s.componentRegistry.globalStyles.replace(e.styles));else if(e.root&&s.componentRegistry.isRootNodeSet)throw Error("Cannot register duplicate root component in "+e.selector+" component");window.customElements.define(e.selector,class extends HTMLElement{#e;#t;#n=new o.Subscription;#r=null;eventListenersMap;constructor(){if(super(),this.#t=this.attachShadow({mode:"open"}),!l.CSS_SHEET_NOT_SUPPORTED){const t=r.isNode?[]:s.componentRegistry.getComputedCss(e.styles);this.#t.adoptedStyleSheets=t}this.update=this.update.bind(this),this.emitEvent=this.emitEvent.bind(this),this.setProps=this.setProps.bind(this),this.getInstance=this.getInstance.bind(this)}emulateComponent(){if(l.CSS_SHEET_NOT_SUPPORTED&&e.styles){const r=(new Date).getTime()+Math.floor(1e3*Math.random()+1),o=(t=e.styles,n=`[data-compid="${r.toString()}"]`,t&&(t=n+" "+t.toString().replace("}",` } ${n} `)),t);this.#r=m(o),this.setAttribute(u,r.toString())}var t,n}connectedCallback(){this.emulateComponent();const e=new c.Renderer;e.update=this.update,e.shadowRoot=this.#t,e.emitEvent=this.emitEvent,this.#e=(0,a.instantiate)(t,n,e),this.#e.beforeMount&&this.#e.beforeMount(),this.update(),this.#e.mount&&this.#e.mount(),this.#n.add((0,o.fromEvent)(window,"onLanguageChange").subscribe((()=>{this.update()})))}update(){(0,i.render)(this.#t,this.#e.render.bind(this.#e)()),l.CSS_SHEET_NOT_SUPPORTED&&(e.styles&&this.#t.insertBefore(this.#r,this.#t.childNodes[0]),s.componentRegistry.globalStyleTag&&this.#t.insertBefore(document.importNode(s.componentRegistry.globalStyleTag,!0),this.#t.childNodes[0]))}emitEvent(e,t,n=!0){const r=new CustomEvent(e,{detail:t,bubbles:n});this.dispatchEvent(r)}setProps(e){for(const[t,n]of Object.entries(e))this.#e[t]=n;this.#e.onPropsChanged&&this.#e.onPropsChanged(),this.update()}getInstance(){return this.#e}disconnectedCallback(){if(this.#n.unsubscribe(),this.#r&&this.#r.remove(),this.#e.unmount&&this.#e.unmount(),this.eventListenersMap)for(const[e,t]of Object.entries(this.eventListenersMap))this.removeEventListener(e,t);this.eventListenersMap=null}})}},4858:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Injector=void 0;const n=new class{#o=new Map;register(e,t){if(this.#o.get(e))throw Error(`${e} is already registered service.`);this.#o.set(e,t)}getService(e){const t=this.#o.get(e);if(t)return t;throw Error(`${e} is not a registered provider.`)}clear(){this.#o=new Map}};t.Injector=n},4708:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TranslationService=void 0;const r=n(655),o=n(7949),s=n(4384);let i=class{_defaultLanguage="";setTranslate(e,t){(0,o.setTranslate)(e,t)}setDefaultLanguage(e){this._defaultLanguage=e,(0,o.setDefaultLanguage)(e);const t=new CustomEvent("onLanguageChange");window.dispatchEvent(t)}getCurrentLanguage(){return this._defaultLanguage}};i=(0,r.__decorate)([(0,s.Injectable)()],i),t.TranslationService=i},816:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;t.Renderer=class{shadowRoot;update;emitEvent}},7401:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CSS_SHEET_NOT_SUPPORTED=t.klass=t.wrapIntoObservable=t.isPromise=t.isObservable=t.isUndefined=t.isFunction=t.isObject=void 0;const r=n(8698),o=Symbol("klass");t.klass=o;t.isObject=e=>null!==e&&"object"==typeof e;t.isFunction=e=>"function"==typeof e;t.isUndefined=e=>void 0===e;const s=e=>!!e&&"function"==typeof e.subscribe;t.isObservable=s;const i=e=>!!e&&"function"==typeof e.then;t.isPromise=i;t.wrapIntoObservable=e=>s(e)?e:i(e)?(0,r.from)(Promise.resolve(e)):(0,r.of)(e);const a=(()=>{try{return new CSSStyleSheet,!1}catch(e){return!0}})();t.CSS_SHEET_NOT_SUPPORTED=a},6195:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.wrapIntoObservable=t.Renderer=t.TranslationService=t.Injector=t.render=t.html=t.useFormFields=t.DomTransition=t.InjectionToken=t.Injectable=t.Component=void 0;var r=n(4384);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r.Component}}),Object.defineProperty(t,"Injectable",{enumerable:!0,get:function(){return r.Injectable}}),Object.defineProperty(t,"InjectionToken",{enumerable:!0,get:function(){return r.InjectionToken}});var o=n(202);Object.defineProperty(t,"DomTransition",{enumerable:!0,get:function(){return o.DomTransition}});var s=n(861);Object.defineProperty(t,"useFormFields",{enumerable:!0,get:function(){return s.useFormFields}});var i=n(2827);Object.defineProperty(t,"html",{enumerable:!0,get:function(){return i.html}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return i.render}});var a=n(4858);Object.defineProperty(t,"Injector",{enumerable:!0,get:function(){return a.Injector}});var c=n(4708);Object.defineProperty(t,"TranslationService",{enumerable:!0,get:function(){return c.TranslationService}});var l=n(816);Object.defineProperty(t,"Renderer",{enumerable:!0,get:function(){return l.Renderer}});var u=n(7401);Object.defineProperty(t,"wrapIntoObservable",{enumerable:!0,get:function(){return u.wrapIntoObservable}})},9280:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestBed=void 0;const r=n(4858);t.TestBed=class{static async MockComponent(e){const t=await async function(e){const t=document.createElement(e);return document.body.appendChild(t),new Promise((t=>{function n(){const r=document.querySelector(e);r?t(r):window.requestAnimationFrame(n)}n()}))}(e.prototype.selector);return{componentInstance:t.getInstance(),element:t.shadowRoot}}static MockService(e,t){return r.Injector.register(e,t),r.Injector.getService(e)}static RemoveComponent(e){document.body.removeChild(e.element.host)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,