"use strict";(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[602],{1602:(t,e,r)=>{e.F=void 0,r(346);var a=r(9282);Object.defineProperty(e,"F",{enumerable:!0,get:function(){return a.Router}})},1346:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InternalRouter=void 0;const a=r(655),o=r(8522),s=r(8698),n=r(4035);let i=class InternalRouter{_currentRoute={path:"",params:{},state:{}};_template=new s.Subject;constructor(){(0,s.fromEvent)(window,"hashchange").subscribe((()=>{this._registerOnHashChange()}))}getTemplate(){return this._template.asObservable()}getCurrentRoute(){return this._currentRoute}navigateTo(t="",e){if(t){window.location.hash.replace(/^#/,"")===t&&this._navigateTo(t,e),window.location.hash="#"+t}else this._navigateTo(t,e)}_registerOnHashChange(){const t=window.location.hash.replace(/^#/,"");this._navigateTo(t,null)}_routeMatcher(t,e){if(t){const r=new RegExp(t.replace(/:[^\s/]+/g,"([\\w-]+)"));return e.match(r)}return t===e}_navigateTo(t,e){const r=t.split("/").filter((t=>t.length>0)),a=n.StaticRouter.routeList.filter((e=>e.Params.length===r.length&&this._routeMatcher(e.Url,t)||e.Url===t?e:void 0)),s=a.length>0?a[0]:null;s&&(this._currentRoute.path=t,this._currentRoute.state={...e||{}},(0,o.wrapIntoObservable)(s.canActivate()).subscribe((a=>{if(!a)return;const i=n.StaticRouter.checkParams(r,s);Object.keys(i).length>0||t?(this._currentRoute.params=i,s.IsRegistered?this._template.next(s.Template):s.TemplatePath&&(0,o.wrapIntoObservable)(s.TemplatePath()).subscribe((()=>{s.IsRegistered=!0,this._template.next(s.Template)}))):this.navigateTo(s.redirectTo,e)})))}};i=(0,a.__decorate)([(0,o.Injectable)(),(0,a.__metadata)("design:paramtypes",[])],i),e.InternalRouter=i},346:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});const a=r(655),o=r(8522),s=r(8698),n=r(1346);let i=class RouterOutlet{router;renderer;_template="";_subscriptions=new s.Subscription;constructor(t,e){this.router=t,this.renderer=e}beforeMount(){this._subscriptions.add(this.router.getTemplate().subscribe((t=>{this._template=t,this.renderer.update()})))}mount(){const t=window.location.hash.replace(/^#/,"");this.router.navigateTo(t,null)}unmount(){this._subscriptions.unsubscribe()}render(){if(this._template){const t=[`${this._template}`];return t.raw=[`${this._template}`],(0,o.html)(t)}return o.html``}};i=(0,a.__decorate)([(0,o.Component)({selector:"router-outlet"}),(0,a.__metadata)("design:paramtypes",[n.InternalRouter,o.Renderer])],i)},9282:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Router=void 0;const a=r(655),o=r(8522),s=r(3818),n=r(1346),i=r(4035);let u=class Router{internalRouter;constructor(t){this.internalRouter=t}getCurrentRoute(){return this.internalRouter.getCurrentRoute()}navigateTo(t,e){this.internalRouter.navigateTo(t,e)}static registerRoutes(t,e=!1){if(!s.isNode){if(!Array.isArray(t))throw Error("router.addRoutes: the parameter must be an array");for(const e of t)i.StaticRouter.formatRoute(e);e&&i.StaticRouter.preloadRoutes()}}};u=(0,a.__decorate)([(0,o.Injectable)(),(0,a.__metadata)("design:paramtypes",[n.InternalRouter])],u),e.Router=u},4035:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StaticRouter=void 0;class StaticRouter{static routeList=[];static checkParams(t,e){let r=0;const a={},o=e.ParamCount;for(let o=0;o<t.length;o++){const s=e.Params[o];s.indexOf(":")>=0&&(a[s.split(":")[1]]=t[o],r+=1)}return r===o?a:{}}static getParamCount(t){let e=0;return t.forEach((t=>{t.indexOf(":")>=0&&(e+=1)})),e}static formatRoute(t){const e={Params:{},Url:"",Template:"",ParamCount:0,IsRegistered:!1,redirectTo:"",canActivate:()=>!0};if(e.Params=t.path.split("/").filter((t=>t.length>0)),e.Url=t.path,e.Template="",e.redirectTo=t.redirectTo,t.template){if(!t.templatePath)throw Error("templatePath is required in route if template is mentioned.");e.Template=t.template,e.TemplatePath=t.templatePath}t.canActivate&&(e.canActivate=t.canActivate),e.ParamCount=StaticRouter.getParamCount(e.Params),StaticRouter.routeList.push(e)}static preloadRoutes(){for(const t of StaticRouter.routeList)t.TemplatePath&&t.TemplatePath()}}e.StaticRouter=StaticRouter}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,