{"version":3,"file":"scripts/184.340844de60d51c13e5e1.chunk.js","mappings":"sKASO,IAAMA,EAAN,MA0CeC,SAzCpBC,WACAC,oBACAC,yBACAC,QACAC,UACAC,WAAY,EACZC,aAAc,EAEdC,gBAA4C,CAC1CC,QAAS,CACP,CACEC,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,OAGXC,UAAU,EACVC,WAAaJ,GACY,IAAnBA,EAAQK,OACH,gBACEL,EAAQK,OAAS,EACnBL,EAAQK,OAAS,YAEjBL,EAAQM,KAAKC,GAASA,EAAKN,QAAOO,KAAK,OAKpDC,YAEA,WAAAC,CAAoBnB,GAAA,KAAAA,SAAAA,CAAqB,CAEzC,WAAAoB,GACEC,KAAKpB,WAAa,IAAI,EAAAqB,YAAY,CAChCC,MAAO,CAAC,GAAI,CAAC,EAAAC,WAAWC,SAAU,EAAAD,WAAWE,QAAQ,iDACrDC,SAAU,GACVC,SAAS,EACTC,OAAQ,IACRpB,QAAS,CAAC,IACVqB,OAAQ,KAEVT,KAAKnB,oBAAsBmB,KAAKpB,WAAW8B,cAC3CV,KAAKlB,yBAA2BkB,KAAKnB,oBAAoB,UAC3D,CAEA,UAAA8B,CAAWC,GACTA,EAAEC,iBACFb,KAAKf,YAAce,KAAKpB,WAAWkC,OAAOC,KACtCf,KAAKpB,WAAWoC,OAClBC,MAAM,+BAERC,QAAQC,IAAInB,KAAKpB,WAAWU,MAC9B,CAEA,SAAA8B,GAEEpB,KAAKpB,WAAWyC,OAClB,CAEA,MAAAC,GACE,OAAO,EAAAC,IAAI;;;qBAGOX,IACVZ,KAAKW,WAAWC,EAAE;;;;;;;;;sBAURZ,KAAKpB,WAAW4C,WAAW,SAASlC;wBAClCU,KAAKnB,oBAAoB;;;;;;;;;;sBAU3BmB,KAAKpB,WAAW4C,WAAW,YAAYlC;wBACrCU,KAAKnB,oBAAoB;;;;;;;;0BAQvBmB,KAAKpB,WAAW4C,WAAW,WAAWlC;2BACrCU,KAAKnB,oBAAoB;;;;;;;4BAOxBmB,KAAKpB,WAAW4C,WAAW,UAAUlC,kBAAkBU,KAAKnB,oBAAoB;;;;;;;;;;;2BAWjF,CACXM,gBAAiBa,KAAKb;iCAEJsC,IAClBzB,KAAKlB,yBAAyB,CAC5B4C,OAAQ,CACNpC,MAAOmC,EAAME,SAEf;;;;;;;;;;2BAWS3B,KAAKnB,oBAAoB;;;;;;;;;;2BAUzBmB,KAAKnB,oBAAoB;;;;;;;sBAO9B,KACRmB,KAAKoB,WAAW;;;;;;;;wBASLQ,IACjB5B,KAAKhB,UAAY4C,CAAI;gBAEb5B,KAAKf,UAAY4C,KAAKC,UAAUC,OAAOC,YAAYhC,KAAKpB,WAAWkC,QAAS,KAAM,GAAK;;;;;gBAKtFc,IACT5B,KAAKjB,QAAU6C,CAAI;UAEjBC,KAAKC,UAAU9B,KAAKpB,WAAWU,MAAO,KAAM;;;KAIpD,GA1LWZ,GAAU,UAJtB,IAAAuD,WAAU,CACTC,SAAU,cACVC,KAAM,CAAC,EAAAC,aAEI1D,E","sources":["webpack:///./src/form/sample-form.component.ts"],"sourcesContent":["import { Component, ComponentRef, html, IHooks, Renderer } from '@plumejs/core';\nimport { FormBuilder, Validators } from '@plumejs/forms';\n\nimport { IDropdownOptions, IOption, DropdownComponent } from '@plumejs/ui';\n\n@Component({\n  selector: 'sample-form',\n  deps: [Renderer]\n})\nexport class SampleForm implements IHooks {\n  sampleform: FormBuilder;\n  createChangeHandler: (key: string) => (e: Event) => void;\n  multiSelectChangehandler: (e: any) => void;\n  jsonRef: HTMLElement;\n  errorsRef: HTMLElement;\n  hasErrors = false;\n  isSubmitted = false;\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: true,\n    buttonText: (options: IOption<string>[]): string => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((item) => item.label).join(', ');\n      }\n    }\n  };\n\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  constructor(private renderer: Renderer) {}\n\n  beforeMount() {\n    this.sampleform = new FormBuilder({\n      email: ['', [Validators.required, Validators.pattern(/^[a-z0-9]((\\.|\\+)?[a-z0-9]){5,}@gmail\\.com$/)]],\n      password: '',\n      checkme: true,\n      option: '1',\n      options: [[]],\n      gender: ''\n    });\n    this.createChangeHandler = this.sampleform.changeHandler;\n    this.multiSelectChangehandler = this.createChangeHandler('options');\n  }\n\n  submitForm(e: Event) {\n    e.preventDefault();\n    this.hasErrors = !!this.sampleform.errors.size;\n    if (this.sampleform.valid) {\n      alert('form submitted successfully');\n    }\n    console.log(this.sampleform.value);\n  }\n\n  resetForm() {\n    // this.isSubmitted = false;\n    this.sampleform.reset();\n  }\n\n  render() {\n    return html`\n      <div>\n        <form\n          onsubmit=${(e: Event) => {\n            this.submitForm(e);\n          }}\n        >\n          <div>\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter gmail id\"\n              value=${this.sampleform.getControl('email').value}\n              oninput=${this.createChangeHandler('email')}\n            />\n            <small id=\"emailHelp\"> We'll never share your email with anyone else. </small>\n          </div>\n          <div>\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"Password\"\n              value=${this.sampleform.getControl('password').value}\n              oninput=${this.createChangeHandler('password')}\n            />\n          </div>\n          <div>\n            <label for=\"exampleCheck1\">\n              <input\n                type=\"checkbox\"\n                id=\"exampleCheck1\"\n                checked=${this.sampleform.getControl('checkme').value}\n                onchange=${this.createChangeHandler('checkme')}\n              />\n              Check me out\n            </label>\n          </div>\n          <div>\n            <label>single select</label>\n            <select value=${this.sampleform.getControl('option').value} onchange=${this.createChangeHandler('option')}>\n              <option>select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div class=\"mb-20\">\n            <label>plumejs multi select</label>\n            <ui-dropdown\n              data-input=${{\n                dropdownOptions: this.dropdownOptions\n              }}\n              onoptionselected=${(event) => {\n                this.multiSelectChangehandler({\n                  target: {\n                    value: event.detail\n                  }\n                });\n              }}\n            ></ui-dropdown>\n          </div>\n          <div class=\"mb-20\">\n            <label for=\"gender_male\">\n              <input\n                type=\"radio\"\n                id=\"gender_male\"\n                name=\"gender\"\n                value=\"male\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Male\n            </label>\n            <label for=\"gender_female\">\n              <input\n                type=\"radio\"\n                id=\"gender_female\"\n                name=\"gender\"\n                value=\"female\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Female\n            </label>\n          </div>\n          <button type=\"submit\">Submit</button>\n          <button\n            onclick=${() => {\n              this.resetForm();\n            }}\n          >\n            Reset\n          </button>\n        </form>\n      </div>\n      <p>Error summary</p>\n      <pre>\n            <code ref=${(node) => {\n        this.errorsRef = node;\n      }}>\n              ${this.hasErrors ? JSON.stringify(Object.fromEntries(this.sampleform.errors), null, 4) : null}\n            </code>\n      </pre>\n      <p>Form value</p>\n      <pre>\n\t\t\t\t<code ref=${(node) => {\n        this.jsonRef = node;\n      }}>\n        ${JSON.stringify(this.sampleform.value, null, 4)}\n\t\t\t\t</code>\n\t\t\t</pre>\n    `;\n  }\n}\n"],"names":["SampleForm","renderer","sampleform","createChangeHandler","multiSelectChangehandler","jsonRef","errorsRef","hasErrors","isSubmitted","dropdownOptions","options","label","value","multiple","buttonText","length","map","item","join","dropdownRef","constructor","beforeMount","this","FormBuilder","email","Validators","required","pattern","password","checkme","option","gender","changeHandler","submitForm","e","preventDefault","errors","size","valid","alert","console","log","resetForm","reset","render","html","getControl","event","target","detail","node","JSON","stringify","Object","fromEntries","Component","selector","deps","Renderer"],"sourceRoot":""}