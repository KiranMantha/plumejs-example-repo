{"version":3,"file":"scripts/716.591b7edf25a392d2f347.chunk.js","mappings":"uMAMA,IAAMA,EAAN,MACsBC,SAApBC,YAAoBD,GAAA,KAAAA,SAAAA,CAAqB,CACzCE,MAAQ,GAERC,QACEC,MAAM,8CACHC,MAAMC,GAAaA,EAASC,SAC5BF,MAAMH,IACLM,KAAKN,MAAQA,EACbM,KAAKR,SAASS,QAAQ,GAE5B,CAEAC,aAAaC,GACXA,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SAASH,EAAEI,eAChCC,QAAQC,IAAIC,KAAKC,UAAUC,OAAOC,YAAYR,EAASS,WAAY,KAAM,GAC3E,CAEAC,SACE,OAAKf,KAAKN,MAAMsB,OAIT,IAAI;;;;;;;;;;;YAWHhB,KAAKN,MAAMuB,KAAI,EAAGC,KAAIC,OAAMC,WACrB,IAAI;;;qDAG8BF,eAAgBlB,KAAKE;wDAClBgB,wBAAyBA;4DACrBC,wBAA2BD;;;yDAG9BE,wBAA4BF;;;4CAGzCA;;;;;;;MA1B/B,IAAI,SAmCf,GAxDI3B,GAAa,UAJlB,QAAU,CACT8B,SAAU,qBACVC,KAAM,CAAC,SAEH/B,GCkBN,IAAMgC,EAAN,MACWC,mBAA4B,CAAC,YAEtCC,SACAC,UAEAC,oBACE3B,KAAK0B,UAAUE,UAAUC,OAAO,WAClC,CAEAC,sBACE,OAAI9B,KAAKyB,SAASM,UAAUf,OACnBhB,KAAKyB,SAASM,UAAUd,KAAKe,GAC3B,IAAI;gBACHA,EAASd;gBACTc,EAASb;gBACTa,EAASC;iBAIZ,IAAI;;YAIf,CAEAlB,SACE,OAAIf,KAAKyB,SACA,IAAI;;gBAEDzB,KAAKyB,SAASP;gBACdlB,KAAKyB,SAASN;;;wBAGN,KACRnB,KAAK2B,mBAAmB;;;;;;;gBAQvBO,IACLlC,KAAK0B,UAAYQ,CAAG;;;;;;;;;;;;;kBAcdlC,KAAK8B;;;;;QAOV,IAAI,EAEf,GAnEIP,GAAO,UAVZ,QAAU,CACTF,SAAU,eACVc,OAAQ,iGAQJZ,GAyEC,IAAMa,EAAN,MACLC,WAAyB,CACvB,CACEnB,GAAI,EACJC,KAAM,aACNY,UAAW,CACT,CACEb,GAAI,EACJC,KAAM,cACNc,KAAM,QAER,CACEf,GAAI,EACJC,KAAM,cACNc,KAAM,UAIZ,CACEf,GAAI,EACJC,KAAM,aACNY,UAAW,KAGfhB,SACE,OAAO,IAAI;;;;;;;;;UASLf,KAAKqC,WAAWpB,KAAKQ,GACd,IAAI,6BAA6B,KAA2B,CAAGA;;;;;KAO9E,GA1CWW,GAAW,UAHvB,QAAU,CACTf,SAAU,sBAECe,E","sources":["webpack:///./src/nested-table/editable-table.ts","webpack:///./src/nested-table/index.ts"],"sourcesContent":["import { Component, html, Renderer } from '@plumejs/core';\n\n@Component({\n  selector: 'app-editable-table',\n  deps: [Renderer]\n})\nclass EditableTable {\n  constructor(private renderer: Renderer) {}\n  users = [];\n\n  mount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => {\n        this.users = users;\n        this.renderer.update();\n      });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    console.log(JSON.stringify(Object.fromEntries(formData.entries()), null, 4));\n  }\n\n  render() {\n    if (!this.users.length) {\n      return html`Loading`;\n    }\n\n    return html`\n      <table class=\"table-bordered\">\n        <caption>Editable table. Edit any row, click on save and check console</caption>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          ${this.users.map(({ id, name, email }) => {\n            return html`\n            <tr>\n              <td>\n                <form method=\"GET\" id=\"inline-form-${id}\" onsubmit=${this.onFormSubmit}></form>\n                <input type='hidden' name='id' value='${id}' form='inline-form-${id}'/>\n                <input type='text' name='username' value='${name}' form='inline-form-${id}'/>\n                </td>\n              <td>\n                <input type='text' name='email' value='${email}' form='inline-form-${id}'/>\n              </td>\n              <td>\n                <button form='inline-form-${id}'>save</button>\n              </td>\n            </tr>\n        `;\n          })}\n          \n        </tbody>\n      </table>\n    `;\n  }\n}\n","import { Component, html } from '@plumejs/core';\nimport { IHooks, InputProps } from '@plumejs/core/dist/src/lib/types';\nimport './editable-table';\n\ninterface Category {\n  id: number;\n  name: string;\n  questions: Array<{\n    id: number;\n    name: string;\n    type: string;\n  }>;\n}\n\n@Component({\n  selector: 'app-row-item',\n  styles: `:host {\n      display: table-row-group;\n  }\n  .hide-row {\n      display: none;\n  }\n  `\n})\nclass RowItem implements IHooks {\n  readonly ObservedProperties = <const>['category'];\n\n  category: Category;\n  nestedRow: HTMLElement;\n\n  toggleNestedTable() {\n    this.nestedRow.classList.toggle('hide-row');\n  }\n\n  populateNestedTable() {\n    if (this.category.questions.length) {\n      return this.category.questions.map((question) => {\n        return html`<tr>\n          <td>${question.id}</td>\n          <td>${question.name}</td>\n          <td>${question.type}</td>\n        </tr>`;\n      });\n    } else {\n      return html`<tr>\n        <td colspan=\"3\">Please add a question</td>\n      </tr>`;\n    }\n  }\n\n  render() {\n    if (this.category) {\n      return html`\n        <tr>\n          <td>${this.category.id}</td>\n          <td>${this.category.name}</td>\n          <td>\n            <button\n              onclick=${() => {\n                this.toggleNestedTable();\n              }}\n            >\n              toggle\n            </button>\n          </td>\n        </tr>\n        <tr\n          ref=${(row) => {\n            this.nestedRow = row;\n          }}\n          class=\"hide-row\"\n        >\n          <td colspan=\"3\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Question Id</th>\n                  <th>Question</th>\n                  <th>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${this.populateNestedTable()}\n              </tbody>\n            </table>\n          </td>\n        </tr>\n      `;\n    } else {\n      return html``;\n    }\n  }\n}\n\n@Component({\n  selector: 'app-nested-table'\n})\nexport class NestedTable {\n  categories: Category[] = [\n    {\n      id: 1,\n      name: 'category 1',\n      questions: [\n        {\n          id: 1,\n          name: 'how are you',\n          type: 'text'\n        },\n        {\n          id: 2,\n          name: 'what you do',\n          type: 'text'\n        }\n      ]\n    },\n    {\n      id: 2,\n      name: 'category 2',\n      questions: []\n    }\n  ];\n  render() {\n    return html`\n      <table>\n        <thead>\n          <tr>\n            <th>Category Id</th>\n            <th>Category Name</th>\n            <th></th>\n          </tr>\n        </thead>\n        ${this.categories.map((category: Category) => {\n          return html`<app-row-item onbindprops=${(): InputProps<RowItem> => ({ category })}></app-row-item>`;\n        })}\n      </table>\n      <br />\n      <br />\n      <app-editable-table></app-editable-table>\n    `;\n  }\n}\n"],"names":["EditableTable","renderer","constructor","users","mount","fetch","then","response","json","this","update","onFormSubmit","e","preventDefault","formData","FormData","currentTarget","console","log","JSON","stringify","Object","fromEntries","entries","render","length","map","id","name","email","selector","deps","RowItem","ObservedProperties","category","nestedRow","toggleNestedTable","classList","toggle","populateNestedTable","questions","question","type","row","styles","NestedTable","categories"],"sourceRoot":""}