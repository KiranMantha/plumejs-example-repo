{"version":3,"file":"scripts/621.f6dd6ac77a03b1b950a8.chunk.js","mappings":"+JAUA,IAAaA,EAAb,MACEC,SACE,OAAO,IAAI,+BACb,GAHWD,GAAkB,UAR9B,QAAU,CACTE,SAAU,kBACVC,OAAQ,kIAMGH,GCNb,IAAMI,EAAN,MACEC,WACEC,QAAQC,IAAI,+BACd,GAHIH,GAAa,UADlB,WACKA,GAON,IAAMI,EAAN,MACsBC,WAApBC,YAAoBD,GAAA,KAAAA,WAAAA,CAA4B,CAChDJ,WACEM,KAAKF,WAAWJ,UAClB,CAEAO,WACE,OAAOC,MAAM,yCACf,GARIL,GAAW,UADhB,QAAW,CAAEM,KAAM,CAACV,MACfI,GAeN,IAAaO,EAAb,MASsBC,SAA+BC,SARnDC,KACAC,SAAW,cACXC,SACAC,MACAC,WAEQC,WAERb,YAAoBM,EAA+BC,GAA/B,KAAAD,SAAAA,EAA+B,KAAAC,SAAAA,EACjDN,KAAKO,KAAO,aACZP,KAAKU,MAAQ,CACXG,KAAMb,KAAKO,KAEf,CAEAO,cACEnB,QAAQC,IAAI,qBACd,CAEAmB,QACEpB,QAAQC,IAAI,oBACZD,QAAQC,IAAII,KAAKW,YACjBX,KAAKK,SAASX,WACdM,KAAKY,WAAWI,SAAS,CAAEC,UAAWjB,KAAKU,OAC7C,CAEAQ,UACEvB,QAAQC,IAAI,qBACd,CAEAuB,qBACEC,OAAOC,aAAaC,QAAQ,gBAAiB,iCAC/C,CAEAC,sBACEH,OAAOC,aAAaG,WAAW,gBACjC,CAEAC,cACEzB,KAAKY,WAAWI,SAAS,CAAEC,UAAW,CAAEJ,KAAM,eAChD,CAEAa,MAAMC,GACJ3B,KAAKO,KAAOoB,EACZ3B,KAAKU,MAAMG,KAAOc,EAClB3B,KAAKY,WAAWI,SAAS,CAAEC,UAAWjB,KAAKU,OAC7C,CAEAkB,SACEjC,QAAQC,IAAII,KAAKW,WACnB,CAEArB,SACE,OAAO,IAAI;;;;;;0BAMWU,KAAKmB;;;0BAGLnB,KAAKuB;;;;8CAIe,iBAAiBM,UAAU,CAAEhB,KAAM;iDAChCb,KAAKQ;;;cAGvCsB,IACL9B,KAAKW,WAAamB,CAAI;iBAEf9B,KAAKQ;kBACHuB,IACT/B,KAAKQ,SAAWuB,EAAEC,OAAOC,KAAK;;;kBAItB,KACRjC,KAAK4B,QAAQ;;;;;;iCAOU5B,KAAKO;;;sBAGhB,KACRP,KAAKyB,aAAa;;;;;;iBAOdK,IACN9B,KAAKY,WAAakB,CAAI;qBAEZC,IACV/B,KAAK0B,MAAMK,EAAEG,OAAO;;;;QAKxB,CAAC,EAAG,EAAG,GAAGC,KAAKC,GAAM,IAAI,iCAAiCA;KAEhE,GA9GWhC,GAAS,UAJrB,QAAU,CACTb,SAAU,aACVY,KAAM,CAACN,EAAa,SAETO,GCpBb,IAAaiC,EAAb,MAIsB/B,SAHXgC,mBAA4B,CAAC,aACtCrB,UAEAlB,YAAoBO,GAAA,KAAAA,SAAAA,CAAqB,CAEzChB,SACE,OAAIU,KAAKiB,UACA,IAAI;;mCAEkBjB,KAAKiB,UAAUJ;4BACtB,IAAMb,KAAKuC;;oBAEnBvC,KAAKiB,UAAUJ;sBACZkB,IACT/B,KAAKwC,OAAOT,EAAEC,OAAOC,OACrBF,EAAEC,OAAOS,OAAO;;;;QAOjB,IAAI,EAEf,CAEAF,SACEvC,KAAKM,SAASoC,UAAU,QAAS,qBACnC,CAEAF,OAAOb,GACL3B,KAAKM,SAASoC,UAAU,QAASf,EACnC,CAEAZ,QACEpB,QAAQC,IAAI,oBACZD,QAAQC,IAAI,UAAWI,KAAKiB,UAC9B,CAEAC,UACEvB,QAAQC,IAAI,qBACd,GA1CWyC,GAAO,UAJnB,QAAU,CACT9C,SAAU,WACVY,KAAM,CAAC,SAEIkC,E","sources":["webpack:///./src/home/emulated-styles.component.ts","webpack:///./src/home/sample-ele.component.ts","webpack:///./src/home/test-ele.component.ts"],"sourcesContent":["import { Component, html } from '@plumejs/core';\n\n@Component({\n  selector: 'emulated-styles',\n  styles: `\n    :host(.color-1) p { color: green; }\n    :host(.color-2) p { color: blue; }\n    :host(.color-3) p { color: red; }\n  `\n})\nexport class EmulatedStylesComp {\n  render() {\n    return html`<p>my styles are emulated</p>`;\n  }\n}\n","import { Component, ComponentRef, html, Injectable, Renderer } from '@plumejs/core';\nimport { TestEle } from './test-ele.component';\n\n@Injectable()\nclass SampleService {\n  testMeth() {\n    console.log('testmethod in sample service');\n  }\n}\n\n@Injectable({ deps: [SampleService] })\nclass TestService {\n  constructor(private sampleSrvc: SampleService) {}\n  testMeth() {\n    this.sampleSrvc.testMeth();\n  }\n\n  getUsers() {\n    return fetch('https://api.github.com/users?since=135');\n  }\n}\n\n@Component({\n  selector: 'sample-ele',\n  deps: [TestService, Renderer]\n})\nexport class SampleEle {\n  test: string;\n  greeting = 'hello world';\n  outCount: () => void;\n  props: any;\n  inputField: HTMLInputElement;\n\n  private testEleRef: ComponentRef<TestEle>;\n\n  constructor(private testSrvc: TestService, private renderer: Renderer) {\n    this.test = 'sample 123';\n    this.props = {\n      name: this.test\n    };\n  }\n\n  beforeMount() {\n    console.log('before mounting...');\n  }\n\n  mount() {\n    console.log('component loaded');\n    console.log(this.inputField);\n    this.testSrvc.testMeth();\n    this.testEleRef.setProps({ testprops: this.props });\n  }\n\n  unmount() {\n    console.log('component unloaded');\n  }\n\n  enablePersonsRoute() {\n    window.localStorage.setItem('@plumejs/core', 'now persons route is activated');\n  }\n\n  disablePersonsRoute() {\n    window.localStorage.removeItem('@plumejs/core');\n  }\n\n  updateProps() {\n    this.testEleRef.setProps({ testprops: { name: 'sample 123' } });\n  }\n\n  count(val: string) {\n    this.test = val;\n    this.props.name = val;\n    this.testEleRef.setProps({ testprops: this.props });\n  }\n\n  getRef() {\n    console.log(this.inputField);\n  }\n\n  render() {\n    return html`\n      <p>\n        Persons route has <b>canActivate</b> gaurd which check for <i>plumejs</i> key in localstorage. Click enable\n        button to navigate to persons route. Click disable button to disable persons route.\n      </p>\n      <div>\n        <button onclick=${this.enablePersonsRoute} title=\"click persons nav to check persons route\">\n          Enable Persons route\n        </button>\n        <button onclick=${this.disablePersonsRoute} title=\"click persons nav to check persons route\">\n          Disable Persons route\n        </button>\n      </div>\n      <div class=\"mt-20\">check translation: ${'username.greet'.translate({ name: 'test user' })}</div>\n      <p>type in below text box and see magic: ${this.greeting}</p>\n      <input\n        type=\"text\"\n        ref=${(node) => {\n          this.inputField = node;\n        }}\n        value=\"${this.greeting}\"\n        oninput=${(e) => {\n          this.greeting = e.target.value;\n        }}\n      />\n      <button\n        onclick=${() => {\n          this.getRef();\n        }}\n      >\n        click\n      </button>\n      <div>\n        <h1>Sample two way data binding</h1>\n        testing web component1 ${this.test}\n        <div>\n          <button\n            onclick=${() => {\n              this.updateProps();\n            }}\n          >\n            change props\n          </button>\n        </div>\n        <test-ele\n          ref=\"${(node) => {\n            this.testEleRef = node;\n          }}\"\n          oncount=\"${(e: CustomEvent) => {\n            this.count(e.detail);\n          }}\"\n        >\n        </test-ele>\n      </div>\n      ${[1, 2, 3].map((i) => html`<emulated-styles class=\"color-${i}\"></emulated-styles>`)}\n    `;\n  }\n}\n","import { Component, html, IHooks, Renderer } from '@plumejs/core';\n\n@Component({\n  selector: 'test-ele',\n  deps: [Renderer]\n})\nexport class TestEle implements IHooks {\n  readonly ObservedProperties = <const>['testprops'];\n  testprops: { name: string };\n\n  constructor(private renderer: Renderer) {}\n\n  render() {\n    if (this.testprops) {\n      return html`\n        <div>\n          testing web component2 ${this.testprops.name}\n          <button onclick=${() => this.counts()}>hi</button>\n          <input\n            value=${this.testprops.name}\n            oninput=${(e: any) => {\n              this.change(e.target.value);\n              e.target.focus();\n            }}\n          />\n          <slot>testing slots</slot>\n        </div>\n      `;\n    } else {\n      return html``;\n    }\n  }\n\n  counts() {\n    this.renderer.emitEvent('count', 'testing from click');\n  }\n\n  change(val: string) {\n    this.renderer.emitEvent('count', val);\n  }\n\n  mount() {\n    console.log('component loaded');\n    console.log('props: ', this.testprops);\n  }\n\n  unmount() {\n    console.log('component unloaded');\n  }\n}\n"],"names":["EmulatedStylesComp","render","selector","styles","SampleService","testMeth","console","log","TestService","sampleSrvc","constructor","this","getUsers","fetch","deps","SampleEle","testSrvc","renderer","test","greeting","outCount","props","inputField","testEleRef","name","beforeMount","mount","setProps","testprops","unmount","enablePersonsRoute","window","localStorage","setItem","disablePersonsRoute","removeItem","updateProps","count","val","getRef","translate","node","e","target","value","detail","map","i","TestEle","ObservedProperties","counts","change","focus","emitEvent"],"sourceRoot":""}