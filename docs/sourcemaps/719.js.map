{"version":3,"file":"scripts/719.2bb8368d14881009f456.bundle.js","mappings":"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","sources":["webpack:///./node_modules/@plumejs/router/dist/mjs/src/staticRouter.js","webpack:///./node_modules/@plumejs/router/dist/mjs/src/utils.js","webpack:///./node_modules/@plumejs/router/dist/mjs/src/internalRouter.service.js","webpack:///./node_modules/@plumejs/router/dist/mjs/src/router.component.js","webpack:///./node_modules/@plumejs/router/dist/mjs/src/router.service.js"],"sourcesContent":["export class StaticRouter {\n    static routeList = [];\n    static checkParams(up, r) {\n        let pmc = 0;\n        const po = {}, pc = r.ParamCount;\n        for (let i = 0; i < up.length; i++) {\n            const rtParam = r.Params[i];\n            if (rtParam.indexOf(':') >= 0) {\n                po[rtParam.split(':')[1]] = up[i];\n                pmc += 1;\n            }\n        }\n        if (pmc === pc) {\n            return po;\n        }\n        return {};\n    }\n    static getParamCount(p) {\n        let pc = 0;\n        p.forEach((k) => {\n            if (k.indexOf(':') >= 0) {\n                pc += 1;\n            }\n        });\n        return pc;\n    }\n    static formatRoute(r) {\n        const obj = {\n            Params: {},\n            Url: '',\n            Template: '',\n            ParamCount: 0,\n            IsRegistered: false,\n            redirectTo: '',\n            canActivate: () => true\n        };\n        obj.Params = r.path.split('/').filter((h) => {\n            return h.length > 0;\n        });\n        obj.Url = r.path;\n        obj.Template = '';\n        obj.redirectTo = r.redirectTo;\n        if (r.template) {\n            if (!r.templatePath)\n                throw Error('templatePath is required in route if template is mentioned.');\n            obj.Template = r.template;\n            obj.TemplatePath = r.templatePath;\n        }\n        if (r.canActivate)\n            obj.canActivate = r.canActivate;\n        obj.ParamCount = StaticRouter.getParamCount(obj.Params);\n        StaticRouter.routeList.push(obj);\n    }\n    static preloadRoutes() {\n        for (const route of StaticRouter.routeList) {\n            route.TemplatePath && route.TemplatePath();\n        }\n    }\n}\n","const isObservable = (obj) => !!obj && typeof obj.subscribe === 'function';\nconst isPromise = (obj) => !!obj && typeof obj.then === 'function';\nconst ofObs = (input) => {\n    return {\n        subscribe: (fn) => {\n            fn(input);\n        }\n    };\n};\nconst fromPromiseObs = (input) => {\n    return {\n        subscribe: (fn) => {\n            Promise.resolve(input).then((value) => {\n                fn(value);\n            });\n        }\n    };\n};\nclass SubjectObs {\n    _internalFn;\n    asObservable() {\n        return {\n            subscribe: (fn) => {\n                return this.subscribe(fn);\n            }\n        };\n    }\n    subscribe(fn) {\n        this._internalFn = fn;\n        return this.unsubscribe;\n    }\n    unsubscribe() {\n        this._internalFn = null;\n    }\n    next(value) {\n        this._internalFn(value);\n    }\n}\nconst wrapIntoObservable = (value) => {\n    if (isObservable(value)) {\n        return value;\n    }\n    if (isPromise(value)) {\n        return fromPromiseObs(Promise.resolve(value));\n    }\n    return ofObs(value);\n};\nconst fromVanillaEvent = (target, eventName, onNext, options = false) => {\n    target.addEventListener(eventName, onNext, options);\n    const unsubscribe = () => {\n        target.removeEventListener(eventName, onNext, options);\n    };\n    return unsubscribe;\n};\nexport { wrapIntoObservable, SubjectObs, fromVanillaEvent };\n","import { __decorate } from \"tslib\";\nimport { Injectable } from '@plumejs/core';\nimport { StaticRouter } from './staticRouter';\nimport { wrapIntoObservable, SubjectObs, fromVanillaEvent } from './utils';\nlet InternalRouter = class InternalRouter {\n    _currentRoute = {\n        path: '',\n        routeParams: new Map(),\n        queryParams: new Map(),\n        state: {}\n    };\n    _template = new SubjectObs();\n    _unSubscribeHashEvent;\n    startHashChange() {\n        this._unSubscribeHashEvent = fromVanillaEvent(window, 'hashchange', () => {\n            this._registerOnHashChange();\n        });\n    }\n    stopHashChange() {\n        this._unSubscribeHashEvent();\n    }\n    getTemplate() {\n        return this._template.asObservable();\n    }\n    getCurrentRoute() {\n        return this._currentRoute;\n    }\n    navigateTo(path = '', state) {\n        if (path) {\n            const windowHash = window.location.hash.replace(/^#/, '');\n            if (windowHash === path) {\n                this._navigateTo(path, state);\n            }\n            window.location.hash = '#' + path;\n        }\n        else {\n            this._navigateTo(path, state);\n        }\n    }\n    _registerOnHashChange() {\n        const path = window.location.hash.replace(/^#/, '');\n        this._navigateTo(path, null);\n    }\n    _routeMatcher(route, path) {\n        if (route) {\n            const _matcher = new RegExp(route.replace(/:[^\\s/]+/g, '([\\\\w-]+)'));\n            return path.match(_matcher);\n        }\n        else {\n            return route === path;\n        }\n    }\n    _navigateTo(path, state) {\n        const uParams = path.split('/').filter((h) => {\n            return h.length > 0;\n        });\n        const routeArr = StaticRouter.routeList.filter((route) => {\n            if (route.Params.length === uParams.length && this._routeMatcher(route.Url, path)) {\n                return route;\n            }\n            else if (route.Url === path) {\n                return route;\n            }\n        });\n        const routeItem = routeArr.length > 0 ? routeArr[0] : null;\n        if (routeItem) {\n            this._currentRoute.path = path;\n            this._currentRoute.state = { ...(state || {}) };\n            wrapIntoObservable(routeItem.canActivate()).subscribe((val) => {\n                if (!val)\n                    return;\n                const _params = StaticRouter.checkParams(uParams, routeItem);\n                if (Object.keys(_params).length > 0 || path) {\n                    this._currentRoute.routeParams = new Map(Object.entries(_params));\n                    const entries = window.location.hash.split('?')[1]\n                        ? new URLSearchParams(window.location.hash.split('?')[1]).entries()\n                        : [];\n                    this._currentRoute.queryParams = new Map(entries);\n                    if (!routeItem.IsRegistered) {\n                        if (routeItem.TemplatePath) {\n                            wrapIntoObservable(routeItem.TemplatePath()).subscribe(() => {\n                                routeItem.IsRegistered = true;\n                                this._template.next(routeItem.Template);\n                            });\n                        }\n                    }\n                    else {\n                        this._template.next(routeItem.Template);\n                    }\n                }\n                else {\n                    this.navigateTo(routeItem.redirectTo, state);\n                }\n            });\n        }\n    }\n};\nInternalRouter = __decorate([\n    Injectable()\n], InternalRouter);\nexport { InternalRouter };\n","import { __decorate, __metadata } from \"tslib\";\nimport { Component, html, Renderer } from '@plumejs/core';\nimport { InternalRouter } from './internalRouter.service';\nlet RouterOutlet = class RouterOutlet {\n    internalRouterSrvc;\n    renderer;\n    _template = '';\n    _templateSubscription;\n    constructor(internalRouterSrvc, renderer) {\n        this.internalRouterSrvc = internalRouterSrvc;\n        this.renderer = renderer;\n    }\n    beforeMount() {\n        this._templateSubscription = this.internalRouterSrvc.getTemplate().subscribe((tmpl) => {\n            this._template = tmpl;\n            this.renderer.update();\n        });\n        this.internalRouterSrvc.startHashChange();\n    }\n    mount() {\n        const path = window.location.hash.replace(/^#/, '');\n        this.internalRouterSrvc.navigateTo(path, null);\n    }\n    unmount() {\n        this._templateSubscription();\n        this.internalRouterSrvc.stopHashChange();\n    }\n    render() {\n        if (this._template) {\n            const stringArray = [`${this._template}`];\n            stringArray.raw = [`${this._template}`];\n            return html(stringArray);\n        }\n        else {\n            return html ``;\n        }\n    }\n};\nRouterOutlet = __decorate([\n    Component({\n        selector: 'router-outlet',\n        deps: [InternalRouter, Renderer]\n    }),\n    __metadata(\"design:paramtypes\", [InternalRouter, Renderer])\n], RouterOutlet);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@plumejs/core';\nimport { isNode } from 'browser-or-node';\nimport { InternalRouter } from './internalRouter.service';\nimport { StaticRouter } from './staticRouter';\nlet Router = class Router {\n    internalRouter;\n    constructor(internalRouter) {\n        this.internalRouter = internalRouter;\n    }\n    getCurrentRoute() {\n        return this.internalRouter.getCurrentRoute();\n    }\n    navigateTo(path, state) {\n        this.internalRouter.navigateTo(path, state);\n    }\n    static registerRoutes(routes, preloadAllRoutes = false) {\n        if (!isNode) {\n            if (Array.isArray(routes)) {\n                for (const route of routes) {\n                    StaticRouter.formatRoute(route);\n                }\n                preloadAllRoutes && StaticRouter.preloadRoutes();\n            }\n            else {\n                throw Error('router.addRoutes: the parameter must be an array');\n            }\n        }\n    }\n};\nRouter = __decorate([\n    Injectable({ deps: [InternalRouter] }),\n    __metadata(\"design:paramtypes\", [InternalRouter])\n], Router);\nexport { Router };\n"],"names":["StaticRouter","static","up","r","pmc","po","pc","ParamCount","i","length","rtParam","Params","indexOf","split","p","forEach","k","obj","Url","Template","IsRegistered","redirectTo","canActivate","path","filter","h","template","templatePath","Error","TemplatePath","getParamCount","routeList","push","route","SubjectObs","_internalFn","asObservable","subscribe","fn","this","unsubscribe","next","value","wrapIntoObservable","then","isPromise","input","Promise","resolve","ofObs","InternalRouter","_currentRoute","routeParams","Map","queryParams","state","_template","_unSubscribeHashEvent","startHashChange","target","eventName","onNext","options","addEventListener","removeEventListener","fromVanillaEvent","window","_registerOnHashChange","stopHashChange","getTemplate","getCurrentRoute","navigateTo","location","hash","replace","_navigateTo","_routeMatcher","_matcher","RegExp","match","uParams","routeArr","routeItem","val","_params","checkParams","Object","keys","entries","URLSearchParams","RouterOutlet","internalRouterSrvc","renderer","_templateSubscription","constructor","beforeMount","tmpl","update","mount","unmount","render","stringArray","raw","selector","deps","Router","internalRouter","routes","preloadAllRoutes","Array","isArray","formatRoute","preloadRoutes"],"sourceRoot":""}