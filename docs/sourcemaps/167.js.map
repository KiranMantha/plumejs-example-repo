{"version":3,"file":"scripts/167.014332db32872c40cb11.chunk.js","mappings":"uJAUA,IAAMA,EAAN,MAAMA,mBACJC,eACAC,SACE,OAAO,IAAI,kCAHTF,GAAkB,UARvB,QAAU,CACTG,SAAU,kBACVC,OAAQ,kI,iCAMJJ,GCNN,IAAMK,EAAN,MAAMA,cACLJ,eACAK,WACCC,QAAQC,IAAI,kCAHRH,GAAa,UADlB,W,iCACKA,GAQN,IAAMI,EAAN,MAAMA,YACeC,WAApBT,YAAoBS,GAAA,KAAAA,WAAAA,EACpBJ,WACCK,KAAKD,WAAWJ,WAGjBM,WACC,OAAOC,MAAM,4CAPTJ,GAAW,UADhB,W,6BAEgCJ,KAD3BI,GAeN,IAAMK,EAAN,MAAMA,UAQeC,SAA+BC,SAPnDC,KACAC,SACAC,MACAC,WAEQC,WAERpB,YAAoBc,EAA+BC,GAA/B,KAAAD,SAAAA,EAA+B,KAAAC,SAAAA,EAClDL,KAAKM,KAAO,aACZN,KAAKQ,MAAQ,CACZG,KAAMX,KAAKM,MAIbM,cACChB,QAAQC,IAAI,sBAGbgB,QACCjB,QAAQC,IAAI,oBACZD,QAAQC,IAAIG,KAAKS,YACjBT,KAAKI,SAAST,WACdK,KAAKU,WAAWI,SAAS,CAAEC,UAAWf,KAAKQ,QAG5CQ,UACCpB,QAAQC,IAAI,sBAGboB,qBACCC,OAAOC,aAAaC,QAAQ,gBAAiB,kCAG9CC,sBACCH,OAAOC,aAAaG,WAAW,iBAGhCC,cACCvB,KAAKU,WAAWI,SAAS,CAAEC,UAAWf,KAAKQ,QAG5CgB,MAAMC,GACLzB,KAAKM,KAAOmB,EACZzB,KAAKQ,MAAMG,KAAOc,EAClBzB,KAAKK,SAASqB,SACd1B,KAAKU,WAAWI,SAAS,CAAEC,UAAWf,KAAKQ,QAG5CmB,SACC/B,QAAQC,IAAIG,KAAKS,YAGlBlB,SACC,OAAO,IAAI;;;sBAGSS,KAAKiB;sBACLjB,KAAKqB;;2CAEgB,iBAAiBO,UAAU,CAAEjB,KAAM;4BACjDkB,IAAW7B,KAAKS,WAAaoB;qBACrC,KAAQ7B,KAAK2B;;;6BAGL3B,KAAKM;;uBAEX,KAAQN,KAAKuB;;qBAEdM,IAAW7B,KAAKU,WAAamB,gBAAsBC,IAAqB9B,KAAKwB,MAAMM,EAAEC;;;KAGtG,CAAC,EAAG,EAAG,GAAGC,KAAKC,GAAM,IAAI,iCAAiCA;MAxEzD9B,GAAS,UAHd,QAAU,CACVX,SAAU,gB,6BAUoBM,EAA+B,QARxDK,GCtBN,IAAa+B,EAAb,MAAaA,QAIW7B,SAHX8B,mBAA4B,CAAC,aACtCpB,UAEAzB,YAAoBe,GAAA,KAAAA,SAAAA,EAEpBd,SACI,OAAIS,KAAKe,UACE,IAAI;;8BAEOf,KAAKe,UAAUJ;uBACrBmB,GAAW9B,KAAKoC,OAAON;;cAEjC9B,KAAKe,UAAUJ;gBACZmB,IAAa9B,KAAKqC,OAAOP,EAAEQ,OAAOC,OAAQT,EAAEQ,OAAOE;;;;KAMjD,IAAI,GAInBJ,OAAON,GACH9B,KAAKK,SAASoC,UAAU,QAAS,sBAGrCJ,OAAOZ,GACHzB,KAAKK,SAASoC,UAAU,QAAShB,GAGrCZ,QACIjB,QAAQC,IAAI,oBACZD,QAAQC,IAAI,UAAWG,KAAKe,WAGhCC,UACIpB,QAAQC,IAAI,wBAtCPqC,GAAO,UAHnB,QAAU,CACP1C,SAAU,c,6BAMoB,QAJrB0C","sources":["webpack:///./src/home/emulated-styles.component.ts","webpack:///./src/home/sample-ele.component.ts","webpack:///./src/home/test-ele.component.ts"],"sourcesContent":["import { Component, html } from \"@plumejs/core\";\n\n@Component({\n  selector: 'emulated-styles',\n  styles: `\n    :host(.color-1) p { color: green; }\n    :host(.color-2) p { color: blue; }\n    :host(.color-3) p { color: red; }\n  `\n})\nclass EmulatedStylesComp {\n  constructor() { }\n  render() {\n    return html`<p>my styles are emulated</p>`;\n  }\n}","import { Component, ComponentRef, html, Injectable, Renderer } from \"@plumejs/core\";\nimport { TestEle } from './test-ele.component';\n\n@Injectable()\nclass SampleService {\n\tconstructor() { }\n\ttestMeth() {\n\t\tconsole.log(\"testmethod in sample service\");\n\t}\n}\n\n@Injectable()\nclass TestService {\n\tconstructor(private sampleSrvc: SampleService) { }\n\ttestMeth() {\n\t\tthis.sampleSrvc.testMeth();\n\t}\n\n\tgetUsers() {\n\t\treturn fetch(\"https://api.github.com/users?since=135\");\n\t}\n}\n\n\n@Component({\n\tselector: \"sample-ele\"\n})\nclass SampleEle {\n\ttest: string;\n\toutCount: Function;\n\tprops: any;\n\tinputField: HTMLInputElement;\n\n\tprivate testEleRef: ComponentRef<TestEle>;\n\n\tconstructor(private testSrvc: TestService, private renderer: Renderer) {\n\t\tthis.test = \"sample 123\";\n\t\tthis.props = {\n\t\t\tname: this.test\n\t\t};\n\t}\n\n\tbeforeMount() {\n\t\tconsole.log(\"before mounting...\");\n\t}\n\n\tmount() {\n\t\tconsole.log(\"component loaded\");\n\t\tconsole.log(this.inputField);\n\t\tthis.testSrvc.testMeth();\n\t\tthis.testEleRef.setProps({ testprops: this.props });\n\t}\n\n\tunmount() {\n\t\tconsole.log(\"component unloaded\");\n\t}\n\n\tenablePersonsRoute() {\n\t\twindow.localStorage.setItem('@plumejs/core', 'now persons route is activated');\n\t}\n\n\tdisablePersonsRoute() {\n\t\twindow.localStorage.removeItem('@plumejs/core');\n\t}\n\n\tupdateProps() {\n\t\tthis.testEleRef.setProps({ testprops: this.props });\n\t}\n\n\tcount(val: string) {\n\t\tthis.test = val;\n\t\tthis.props.name = val;\n\t\tthis.renderer.update();\n\t\tthis.testEleRef.setProps({ testprops: this.props });\n\t}\n\n\tgetRef() {\n\t\tconsole.log(this.inputField);\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<p>Persons route has <b>canActivate</b> gaurd which check for <i>plumejs</i> key in localstorage. Click enable button to navigate to persons route. Click disable button to disable persons route. </p>\n\t\t\t<div>\n\t\t\t\t<button onclick=${this.enablePersonsRoute} title='click persons nav to check persons route'>Enable Persons route</button>\n\t\t\t\t<button onclick=${this.disablePersonsRoute} title='click persons nav to check persons route'>Disable Persons route</button>\n\t\t\t</div>\n\t\t\t<div class='mt-20'>check translation: ${'username.greet'.translate({ name: 'test user' })}</div>\n\t\t\t<input type='text' ref=${(node) => { this.inputField = node }} />\n\t\t\t<button onclick=${() => { this.getRef() }}>click</button>\n\t\t\t<div>\n\t\t\t\t<h1>Sample two way data binding</h1>\n\t\t\t\ttesting web component1 ${this.test}\n\t\t\t\t<div>\n\t\t\t\t\t<button onclick=${() => { this.updateProps(); }}>change props</button>\n\t\t\t\t</div>\n\t\t\t\t<test-ele ref=\"${(node) => { this.testEleRef = node; }}\" oncount=\"${(e: CustomEvent) => { this.count(e.detail); }}\">\n\t\t\t\t</test-ele>\n\t\t\t</div>\n\t\t\t${[1, 2, 3].map((i) => html`<emulated-styles class=\"color-${i}\"></emulated-styles>`)}\n\t\t`;\n\t}\n}\n\n","import { Component, html, IHooks, Renderer } from '@plumejs/core';\n\n@Component({\n    selector: \"test-ele\"\n})\nexport class TestEle implements IHooks {\n    readonly ObservedProperties = <const>['testprops'];\n    testprops: { name: string };\n\n    constructor(private renderer: Renderer) { }\n\n    render() {\n        if (this.testprops) {\n            return html`\n\t\t\t\t<div>\n\t\t\t\t\ttesting web component2 ${this.testprops.name}\n\t\t\t\t\t<button onclick=${(e: any) => this.counts(e)}>hi</button>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue=${this.testprops.name}\n\t\t\t\t\t\toninput=${(e: any) => { this.change(e.target.value); e.target.focus(); }}\n\t\t\t\t\t/>\n\t\t\t\t\t<slot>testing slots</slot>\n\t\t\t\t</div>\n\t\t\t`;\n        } else {\n            return html``;\n        }\n    }\n\n    counts(e: any) {\n        this.renderer.emitEvent('count', \"testing from click\")\n    }\n\n    change(val: string) {\n        this.renderer.emitEvent('count', val);\n    }\n\n    mount() {\n        console.log(\"component loaded\");\n        console.log(\"props: \", this.testprops);\n    }\n\n    unmount() {\n        console.log(\"component unloaded\");\n    }\n}"],"names":["EmulatedStylesComp","constructor","render","selector","styles","SampleService","testMeth","console","log","TestService","sampleSrvc","this","getUsers","fetch","SampleEle","testSrvc","renderer","test","outCount","props","inputField","testEleRef","name","beforeMount","mount","setProps","testprops","unmount","enablePersonsRoute","window","localStorage","setItem","disablePersonsRoute","removeItem","updateProps","count","val","update","getRef","translate","node","e","detail","map","i","TestEle","ObservedProperties","counts","change","target","value","focus","emitEvent"],"sourceRoot":""}