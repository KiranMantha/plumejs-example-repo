{"version":3,"file":"scripts/167.4a458b61d37d9e6240ad.chunk.js","mappings":"6JAUA,IAAaA,EAAb,MACEC,SACE,OAAO,IAAI,kCAFFD,GAAkB,UAR9B,QAAU,CACTE,SAAU,kBACVC,OAAQ,kIAMGH,GCNb,IAAMI,EAAN,MACEC,WACEC,QAAQC,IAAI,kCAFVH,GAAa,UADlB,WACKA,GAON,IAAMI,EAAN,MACsBC,WAApBC,YAAoBD,GAAA,KAAAA,WAAAA,EACpBJ,WACEM,KAAKF,WAAWJ,WAGlBO,WACE,OAAOC,MAAM,4CAPXL,GAAW,UADhB,QAAW,CAAEM,KAAM,CAACV,MACfI,GAeN,IAAaO,EAAb,MAQsBC,SAA+BC,SAPnDC,KACAC,SACAC,MACAC,WAEQC,WAERZ,YAAoBM,EAA+BC,GAA/B,KAAAD,SAAAA,EAA+B,KAAAC,SAAAA,EACjDN,KAAKO,KAAO,aACZP,KAAKS,MAAQ,CACXG,KAAMZ,KAAKO,MAIfM,cACElB,QAAQC,IAAI,sBAGdkB,QACEnB,QAAQC,IAAI,oBACZD,QAAQC,IAAII,KAAKU,YACjBV,KAAKK,SAASX,WACdM,KAAKW,WAAWI,SAAS,CAAEC,UAAWhB,KAAKS,QAG7CQ,UACEtB,QAAQC,IAAI,sBAGdsB,qBACEC,OAAOC,aAAaC,QAAQ,gBAAiB,kCAG/CC,sBACEH,OAAOC,aAAaG,WAAW,iBAGjCC,cACExB,KAAKW,WAAWI,SAAS,CAAEC,UAAWhB,KAAKS,QAG7CgB,MAAMC,GACJ1B,KAAKO,KAAOmB,EACZ1B,KAAKS,MAAMG,KAAOc,EAClB1B,KAAKM,SAASqB,SACd3B,KAAKW,WAAWI,SAAS,CAAEC,UAAWhB,KAAKS,QAG7CmB,SACEjC,QAAQC,IAAII,KAAKU,YAGnBpB,SACE,OAAO,IAAI;;;;;;0BAMWU,KAAKkB;;;0BAGLlB,KAAKsB;;;;8CAIe,iBAAiBO,UAAU,CAAEjB,KAAM;;;cAGlEkB,IACL9B,KAAKU,WAAaoB;;;kBAIV,KACR9B,KAAK4B;;;;;;iCAOkB5B,KAAKO;;;sBAGhB,KACRP,KAAKwB;;;;;;iBAODM,IACN9B,KAAKW,WAAamB;qBAERC,IACV/B,KAAKyB,MAAMM,EAAEC;;;;QAKjB,CAAC,EAAG,EAAG,GAAGC,KAAKC,GAAM,IAAI,iCAAiCA;QAvGrD9B,GAAS,UAJrB,QAAU,CACTb,SAAU,aACVY,KAAM,CAACN,EAAa,SAETO,GCpBb,IAAa+B,EAAb,MAIsB7B,SAHX8B,mBAA4B,CAAC,aACtCpB,UAEAjB,YAAoBO,GAAA,KAAAA,SAAAA,EAEpBhB,SACE,OAAIU,KAAKgB,UACA,IAAI;;mCAEkBhB,KAAKgB,UAAUJ;4BACtB,IAAMZ,KAAKqC;;oBAEnBrC,KAAKgB,UAAUJ;sBACZmB,IACT/B,KAAKsC,OAAOP,EAAEQ,OAAOC,OACrBT,EAAEQ,OAAOE;;;;QAOV,IAAI,GAIfJ,SACErC,KAAKM,SAASoC,UAAU,QAAS,sBAGnCJ,OAAOZ,GACL1B,KAAKM,SAASoC,UAAU,QAAShB,GAGnCZ,QACEnB,QAAQC,IAAI,oBACZD,QAAQC,IAAI,UAAWI,KAAKgB,WAG9BC,UACEtB,QAAQC,IAAI,wBAzCHuC,GAAO,UAJnB,QAAU,CACT5C,SAAU,WACVY,KAAM,CAAC,SAEIgC","sources":["webpack:///./src/home/emulated-styles.component.ts","webpack:///./src/home/sample-ele.component.ts","webpack:///./src/home/test-ele.component.ts"],"sourcesContent":["import { Component, html } from '@plumejs/core';\n\n@Component({\n  selector: 'emulated-styles',\n  styles: `\n    :host(.color-1) p { color: green; }\n    :host(.color-2) p { color: blue; }\n    :host(.color-3) p { color: red; }\n  `\n})\nexport class EmulatedStylesComp {\n  render() {\n    return html`<p>my styles are emulated</p>`;\n  }\n}\n","import { Component, ComponentRef, html, Injectable, Renderer } from '@plumejs/core';\nimport { TestEle } from './test-ele.component';\n\n@Injectable()\nclass SampleService {\n  testMeth() {\n    console.log('testmethod in sample service');\n  }\n}\n\n@Injectable({ deps: [SampleService] })\nclass TestService {\n  constructor(private sampleSrvc: SampleService) {}\n  testMeth() {\n    this.sampleSrvc.testMeth();\n  }\n\n  getUsers() {\n    return fetch('https://api.github.com/users?since=135');\n  }\n}\n\n@Component({\n  selector: 'sample-ele',\n  deps: [TestService, Renderer]\n})\nexport class SampleEle {\n  test: string;\n  outCount: () => void;\n  props: any;\n  inputField: HTMLInputElement;\n\n  private testEleRef: ComponentRef<TestEle>;\n\n  constructor(private testSrvc: TestService, private renderer: Renderer) {\n    this.test = 'sample 123';\n    this.props = {\n      name: this.test\n    };\n  }\n\n  beforeMount() {\n    console.log('before mounting...');\n  }\n\n  mount() {\n    console.log('component loaded');\n    console.log(this.inputField);\n    this.testSrvc.testMeth();\n    this.testEleRef.setProps({ testprops: this.props });\n  }\n\n  unmount() {\n    console.log('component unloaded');\n  }\n\n  enablePersonsRoute() {\n    window.localStorage.setItem('@plumejs/core', 'now persons route is activated');\n  }\n\n  disablePersonsRoute() {\n    window.localStorage.removeItem('@plumejs/core');\n  }\n\n  updateProps() {\n    this.testEleRef.setProps({ testprops: this.props });\n  }\n\n  count(val: string) {\n    this.test = val;\n    this.props.name = val;\n    this.renderer.update();\n    this.testEleRef.setProps({ testprops: this.props });\n  }\n\n  getRef() {\n    console.log(this.inputField);\n  }\n\n  render() {\n    return html`\n      <p>\n        Persons route has <b>canActivate</b> gaurd which check for <i>plumejs</i> key in localstorage. Click enable\n        button to navigate to persons route. Click disable button to disable persons route.\n      </p>\n      <div>\n        <button onclick=${this.enablePersonsRoute} title=\"click persons nav to check persons route\">\n          Enable Persons route\n        </button>\n        <button onclick=${this.disablePersonsRoute} title=\"click persons nav to check persons route\">\n          Disable Persons route\n        </button>\n      </div>\n      <div class=\"mt-20\">check translation: ${'username.greet'.translate({ name: 'test user' })}</div>\n      <input\n        type=\"text\"\n        ref=${(node) => {\n          this.inputField = node;\n        }}\n      />\n      <button\n        onclick=${() => {\n          this.getRef();\n        }}\n      >\n        click\n      </button>\n      <div>\n        <h1>Sample two way data binding</h1>\n        testing web component1 ${this.test}\n        <div>\n          <button\n            onclick=${() => {\n              this.updateProps();\n            }}\n          >\n            change props\n          </button>\n        </div>\n        <test-ele\n          ref=\"${(node) => {\n            this.testEleRef = node;\n          }}\"\n          oncount=\"${(e: CustomEvent) => {\n            this.count(e.detail);\n          }}\"\n        >\n        </test-ele>\n      </div>\n      ${[1, 2, 3].map((i) => html`<emulated-styles class=\"color-${i}\"></emulated-styles>`)}\n    `;\n  }\n}\n","import { Component, html, IHooks, Renderer } from '@plumejs/core';\n\n@Component({\n  selector: 'test-ele',\n  deps: [Renderer]\n})\nexport class TestEle implements IHooks {\n  readonly ObservedProperties = <const>['testprops'];\n  testprops: { name: string };\n\n  constructor(private renderer: Renderer) {}\n\n  render() {\n    if (this.testprops) {\n      return html`\n        <div>\n          testing web component2 ${this.testprops.name}\n          <button onclick=${() => this.counts()}>hi</button>\n          <input\n            value=${this.testprops.name}\n            oninput=${(e: any) => {\n              this.change(e.target.value);\n              e.target.focus();\n            }}\n          />\n          <slot>testing slots</slot>\n        </div>\n      `;\n    } else {\n      return html``;\n    }\n  }\n\n  counts() {\n    this.renderer.emitEvent('count', 'testing from click');\n  }\n\n  change(val: string) {\n    this.renderer.emitEvent('count', val);\n  }\n\n  mount() {\n    console.log('component loaded');\n    console.log('props: ', this.testprops);\n  }\n\n  unmount() {\n    console.log('component unloaded');\n  }\n}\n"],"names":["EmulatedStylesComp","render","selector","styles","SampleService","testMeth","console","log","TestService","sampleSrvc","constructor","this","getUsers","fetch","deps","SampleEle","testSrvc","renderer","test","outCount","props","inputField","testEleRef","name","beforeMount","mount","setProps","testprops","unmount","enablePersonsRoute","window","localStorage","setItem","disablePersonsRoute","removeItem","updateProps","count","val","update","getRef","translate","node","e","detail","map","i","TestEle","ObservedProperties","counts","change","target","value","focus","emitEvent"],"sourceRoot":""}