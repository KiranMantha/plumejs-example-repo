{"version":3,"file":"scripts/951.93c24c77f17c4217f839.chunk.js","mappings":"0KAGIA,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,GAAI,gEAAiE,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,6CAA6C,MAAQ,GAAG,SAAW,oDAAoD,eAAiB,CAAC,gHAAgH,WAAa,MAE3Y,W,2CCFA,IAAaC,EAAb,MAAaA,cACAC,mBAA4B,CAAC,eACtCC,YAEAC,SACI,OAAIC,KAAKF,aAAeE,KAAKF,YAAYG,KAC9B,IAAI;;iBAEND,KAAKF,YAAYG;oBACdD,KAAKF,YAAYI,QAAQD;KAG1B,IAAI,gBAZVL,GAAa,UAHzB,QAAU,CACPO,SAAU,oBAEDP,G,sBCOb,IAAMQ,EAAN,MAAMA,cACJC,aACE,OAAOC,MAAM,8CAA8CC,MAAMC,GAC/DA,EAAIC,WAHJL,GAAa,UADlB,WACKA,GAYN,IAAMM,EAAN,MAAMA,YAMgBC,WAAmCC,OALvDC,cAAqB,GACrBC,OACAC,aACAC,iBAEAC,YAAoBN,EAAmCC,GAAnC,KAAAD,WAAAA,EAAmC,KAAAC,OAAAA,EACrDM,QAAQC,IAAI,iBAAkBnB,KAAKY,OAAOQ,mBAG5CC,QACErB,KAAKW,WAAWN,aAAaE,MAAMe,IACjCtB,KAAKuB,YAAYD,MAIrBE,UAAUC,GACRzB,KAAKa,cAAgBY,EACrBzB,KAAKgB,iBAAiBU,SAAS,CAAE5B,YAAa2B,IAGxCF,YAAYD,GAClB,MAAMK,EAAQL,EAAKM,KAAKH,GACf,IAAI;;;oBAGG,KACRzB,KAAKwB,UAAUC;;YAGfA,EAAKxB;;WAIb,QAAOD,KAAKe,aAAc,IAAI,GAAGY,KAGnC5B,SACE,OAAO,IAAI;;;;;;cAMD8B,KAAKC,UAAU9B,KAAKY,OAAOQ,kBAAmB,KAAM;;;iBAGhDW,IACN/B,KAAKe,aAAegB;;;;iBAKdA,IACN/B,KAAKgB,iBAAmBe;;;QAtD9BrB,GAAW,UAJhB,QAAU,CACTP,SAAU,eACV6B,OAAQ,O,6BAQwB5B,EAA+B,OAN3DM","sources":["webpack:///./src/persons/persons-list.scss","webpack:///./src/persons/person-details.component.ts","webpack:///./src/persons/persons-list.component.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".test{list-style:none;margin:0;padding:0}.test li{color:#000}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/persons/persons-list.scss\"],\"names\":[],\"mappings\":\"AAEA,MACE,eAAA,CACA,QAAA,CACA,SAAA,CACA,SACE,UAPG\",\"sourcesContent\":[\"$grey: #000;\\n\\n.test {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n  li {\\n    color: $grey;\\n  }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { Component, html, IHooks } from '@plumejs/core';\n\n@Component({\n    selector: \"person-details\"\n})\nexport class PersonDetails implements IHooks {\n    readonly ObservedProperties = <const>['userDetails'];\n    userDetails: { name: string; company: { name: string } };\n\n    render() {\n        if (this.userDetails && this.userDetails.name) {\n            return html`\n\t\t\t\t<strong>Person Details</strong>\n\t\t\t\t<div>Name: ${this.userDetails.name}</div>\n\t\t\t\t<div>Company: ${this.userDetails.company.name}</div>\n\t\t\t`;\n        } else {\n            return html`<div></div>`;\n        }\n    }\n}","import {\n  Component,\n  ComponentRef,\n  html,\n  Injectable,\n  render,\n} from \"@plumejs/core\";\nimport { Router } from \"@plumejs/router\";\nimport { PersonDetails } from \"./person-details.component\";\nimport personListStyles from \"./persons-list.scss\";\n\n@Injectable()\nclass PersonService {\n  getPersons() {\n    return fetch(\"https://jsonplaceholder.typicode.com/users\").then((res) =>\n      res.json()\n    );\n  }\n}\n\n@Component({\n  selector: \"persons-list\",\n  styles: personListStyles,\n})\nclass PersonsList {\n  persondetails: any = {};\n  update: any;\n  usersListRef: HTMLElement;\n  personDetailsRef: ComponentRef<PersonDetails>;\n\n  constructor(private personSrvc: PersonService, private router: Router) {\n    console.log(\"current route \", this.router.getCurrentRoute());\n  }\n\n  mount() {\n    this.personSrvc.getPersons().then((data) => {\n      this.renderUsers(data);\n    });\n  }\n\n  alertName(user: any) {\n    this.persondetails = user;\n    this.personDetailsRef.setProps({ userDetails: user });\n  }\n\n  private renderUsers(data: Array<any>) {\n    const nodes = data.map((user: any) => {\n      return html`\n        <li\n          class=\"pointer\"\n          onclick=${() => {\n            this.alertName(user);\n          }}\n        >\n          ${user.name}\n        </li>\n      `;\n    });\n    render(this.usersListRef, html`${nodes}`);\n  }\n\n  render() {\n    return html`\n      <h4>\n        Sample service injection with http call and passing data to other\n        component\n      </h4>\n      Current route data:\n      <code>${JSON.stringify(this.router.getCurrentRoute(), null, 2)}</code>\n      <div class=\"mt-20 mb-20 content\">\n        <ul\n          ref=\"${(node) => {\n            this.usersListRef = node;\n          }}\"\n        ></ul>\n        <person-details\n          id=\"person-details\"\n          ref=\"${(node) => {\n            this.personDetailsRef = node;\n          }}\"\n        ></person-details>\n      </div>\n    `;\n  }\n}\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","PersonDetails","ObservedProperties","userDetails","render","this","name","company","selector","PersonService","getPersons","fetch","then","res","json","PersonsList","personSrvc","router","persondetails","update","usersListRef","personDetailsRef","constructor","console","log","getCurrentRoute","mount","data","renderUsers","alertName","user","setProps","nodes","map","JSON","stringify","node","styles"],"sourceRoot":""}