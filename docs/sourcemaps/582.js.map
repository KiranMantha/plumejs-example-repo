{"version":3,"file":"scripts/582.43c186755f77348dcc09.chunk.js","mappings":"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","sources":["webpack:///../plumejs-forms/dist/index.js","webpack:///./src/form/sample-form.component.ts"],"sourcesContent":["var i = Object.defineProperty;\nvar a = (r, e, t) => e in r ? i(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;\nvar l = (r, e, t) => (a(r, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nconst c = (r) => {\n  let e;\n  switch (r.nodeName && r.nodeName.toLowerCase()) {\n    case \"input\":\n    case \"textarea\": {\n      [\"radio\", \"checkbox\"].includes(r.type) ? e = r.checked ? r.value !== null && r.value !== \"on\" ? r.value : !0 : !1 : e = r.value;\n      break;\n    }\n    case \"select\": {\n      const t = r.type === \"select-one\", o = [...Array.from(r.options)].filter((n) => n.selected).map(\n        (n) => n.value ?? (n.textContent.match(/[^\\x20\\t\\r\\n\\f]+/g) || []).join(\" \")\n      );\n      e = t ? o[0] : o;\n      break;\n    }\n    default: {\n      e = r.value;\n      break;\n    }\n  }\n  return e;\n};\nclass h {\n  constructor(e) {\n    /**\n     * @private\n     */\n    l(this, \"_initialValues\");\n    /**\n     * @private\n     */\n    l(this, \"_controls\", /* @__PURE__ */ Object.create(null));\n    /**\n     * @private\n     */\n    l(this, \"_errors\", /* @__PURE__ */ new Map());\n    this._initialValues = e;\n    for (const [t, s] of Object.entries(e)) {\n      const o = [...Array.isArray(s) ? s : [s]];\n      this._controls[t] = {\n        value: o[0],\n        validators: o.length > 1 ? o[1] : []\n      };\n    }\n    this.changeHandler = this.changeHandler.bind(this), this.getControl = this.getControl.bind(this), this.reset = this.reset.bind(this);\n  }\n  /**\n   * @type Map\n   */\n  get errors() {\n    return this._checkValidity(), this._errors;\n  }\n  /**\n   * @type boolean\n   */\n  get valid() {\n    return this._checkValidity(), !this._errors.size;\n  }\n  /**\n   * @type Object\n   */\n  get value() {\n    const e = {};\n    for (const [t, s] of Object.entries(this._controls))\n      e[t] = s.value;\n    return e;\n  }\n  getControl(e) {\n    return this._controls[e];\n  }\n  changeHandler(e) {\n    return (t) => {\n      const s = c(t.target);\n      this.getControl(e).value = s, this._isTouched = !0;\n    };\n  }\n  reset() {\n    for (const [e, t] of Object.entries(this._initialValues)) {\n      const s = [...Array.isArray(t) ? t : [t]];\n      this._controls[e].value = JSON.parse(JSON.stringify(s))[0];\n    }\n    this._errors.clear(), this._isTouched = !1;\n  }\n  /**\n   * @private\n   */\n  _checkValidity() {\n    this._errors.clear(), this._isTouched = !0;\n    for (const e in this._controls) {\n      const t = this._controls[e].value, s = this._controls[e].validators;\n      this._controls[e].errors = null;\n      for (const o of s) {\n        const n = o(t);\n        n !== null && (this._errors.has(e) ? (this._errors.set(e, { ...this._errors.get(e), ...n }), this._controls[e].errors = {\n          ...this._controls[e].errors,\n          ...n\n        }) : (this._errors.set(e, n), this._controls[e].errors = n));\n      }\n    }\n  }\n}\nclass d {\n  static required(e) {\n    return e.length ? null : { required: !0 };\n  }\n  static min(e) {\n    return (t) => t.length >= e ? null : { minLength: { requiredLength: e } };\n  }\n  static max(e) {\n    return (t) => t.length <= e ? null : { maxLength: { requiredLength: e } };\n  }\n  static pattern(e) {\n    return (t) => new RegExp(e).test(t) ? null : { pattern: !0 };\n  }\n}\nexport {\n  h as FormBuilder,\n  d as Validators\n};\n","import { Component, ComponentRef, html, IHooks, Renderer } from '@plumejs/core';\nimport { FormBuilder, Validators } from '@plumejs/forms';\n\nimport { IDropdownOptions, IOption, DropdownComponent } from '@plumejs/ui';\n\n@Component({\n  selector: 'sample-form',\n  deps: [Renderer]\n})\nexport class SampleForm implements IHooks {\n  sampleform: FormBuilder;\n  createChangeHandler: (key: string) => (e: Event) => void;\n  multiSelectChangehandler: (e: any) => void;\n  jsonRef: HTMLElement;\n  errorsRef: HTMLElement;\n  hasErrors = false;\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: true,\n    buttonText: (options: IOption<string>[]): string => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((item) => item.label).join(', ');\n      }\n    }\n  };\n\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  constructor(private renderer: Renderer) {}\n\n  beforeMount() {\n    this.sampleform = new FormBuilder({\n      email: ['', [Validators.required, Validators.pattern(/^[a-z0-9]((\\.|\\+)?[a-z0-9]){5,}@gmail\\.com$/)]],\n      password: '',\n      checkme: false,\n      option: '',\n      options: [[]],\n      gender: ''\n    });\n    this.createChangeHandler = this.sampleform.changeHandler;\n    this.multiSelectChangehandler = this.createChangeHandler('options');\n  }\n\n  submitForm(e: Event) {\n    e.preventDefault();\n    this.hasErrors = !!this.sampleform.errors.size;\n    if (this.sampleform.valid) {\n      alert('form submitted successfully');\n    }\n    console.log(this.sampleform);\n  }\n\n  resetForm() {\n    this.sampleform.reset();\n  }\n\n  render() {\n    return html`\n      <div>\n        <form\n          onsubmit=${(e: Event) => {\n            this.submitForm(e);\n          }}\n        >\n          <div>\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter gmail id\"\n              value=${this.sampleform.getControl('email').value}\n              oninput=${this.createChangeHandler('email')}\n            />\n            <small id=\"emailHelp\"> We'll never share your email with anyone else. </small>\n          </div>\n          <div>\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"Password\"\n              value=${this.sampleform.getControl('password').value}\n              oninput=${this.createChangeHandler('password')}\n            />\n          </div>\n          <div>\n            <label for=\"exampleCheck1\">\n              <input\n                type=\"checkbox\"\n                id=\"exampleCheck1\"\n                checked=${this.sampleform.getControl('checkme').value}\n                onchange=${this.createChangeHandler('checkme')}\n              />\n              Check me out\n            </label>\n          </div>\n          <div>\n            <label>single select</label>\n            <select value=${this.sampleform.getControl('option').value} onchange=${this.createChangeHandler('option')}>\n              <option>select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div class=\"mb-20\">\n            <label>plumejs multi select</label>\n            <ui-dropdown\n              data-input=${{\n                dropdownOptions: this.dropdownOptions\n              }}\n              onoptionselected=${(event) => {\n                this.multiSelectChangehandler({\n                  target: {\n                    value: event.detail\n                  }\n                });\n              }}\n            ></ui-dropdown>\n          </div>\n          <div class=\"mb-20\">\n            <label for=\"gender_male\">\n              <input\n                type=\"radio\"\n                id=\"gender_male\"\n                name=\"gender\"\n                value=\"male\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Male\n            </label>\n            <label for=\"gender_female\">\n              <input\n                type=\"radio\"\n                id=\"gender_female\"\n                name=\"gender\"\n                value=\"female\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Female\n            </label>\n          </div>\n          <button type=\"submit\">Submit</button>\n          <button\n            onclick=${() => {\n              this.resetForm();\n            }}\n          >\n            Reset\n          </button>\n        </form>\n      </div>\n      <p>Error summary</p>\n      <pre>\n            <code ref=${(node) => {\n        this.errorsRef = node;\n      }}>\n              ${this.hasErrors ? JSON.stringify(Object.fromEntries(this.sampleform.errors), null, 4) : null}\n            </code>\n      </pre>\n      <p>Form value</p>\n      <pre>\n\t\t\t\t<code ref=${(node) => {\n        this.jsonRef = node;\n      }}>\n        ${JSON.stringify(this.sampleform.value, null, 4)}\n\t\t\t\t</code>\n\t\t\t</pre>\n    `;\n  }\n}\n"],"names":["i","Object","defineProperty","l","r","e","t","enumerable","configurable","writable","value","a","h","constructor","this","create","Map","_initialValues","s","entries","o","Array","isArray","_controls","validators","length","changeHandler","bind","getControl","reset","errors","_checkValidity","_errors","valid","size","nodeName","toLowerCase","includes","type","checked","from","options","filter","n","selected","map","textContent","match","join","c","target","_isTouched","JSON","parse","stringify","clear","has","set","get","d","static","required","minLength","requiredLength","maxLength","RegExp","test","pattern","SampleForm","renderer","sampleform","createChangeHandler","multiSelectChangehandler","jsonRef","errorsRef","hasErrors","dropdownOptions","label","multiple","buttonText","item","dropdownRef","beforeMount","email","password","checkme","option","gender","submitForm","preventDefault","alert","console","log","resetForm","render","event","detail","node","fromEntries","selector","deps"],"sourceRoot":""}