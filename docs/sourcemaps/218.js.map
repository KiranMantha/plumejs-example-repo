{"version":3,"file":"scripts/218.a09b8f1c830d3071ff56.chunk.js","mappings":"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","sources":["webpack:///./src/ui-controls/nested-modal.component.ts","webpack:///./src/ui-controls/plume-components.component.ts"],"sourcesContent":["import { Component, html, IHooks } from '@plumejs/core';\nimport { IDropdownOptions, IOption, ModalService } from '@plumejs/ui';\n\n@Component({\n  selector: 'nested-modal',\n  deps: [ModalService]\n})\nexport class NestedModal implements IHooks {\n  readonly ObservedProperties = <const>['nestedModalData'];\n  nestedModalData: { message: string };\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: false,\n    buttonText: (options: IOption<string>[]) => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((i) => i.label).join(', ');\n      }\n    }\n  };\n\n  constructor(private modalsrvc: ModalService) {}\n\n  openAnotherModal() {\n    const modal = this.modalsrvc.show({\n      renderTemplate: () => html`<div>i'm nested modal</div>`,\n      modalTitle: 'nested modal',\n      modalClass: 'nested-class'\n    });\n\n    modal.onOpen.subscribe(() => {\n      console.log('nested modal open');\n    });\n\n    modal.onClose.subscribe(() => {\n      console.log('nested modal closed');\n    });\n  }\n\n  render() {\n    if (this.nestedModalData) {\n      return html`\n        <div>sample modal</div>\n        <div>${this.nestedModalData.message}</div>\n        <ui-dropdown\n          onbindprops=${() => ({ dropdownOptions: this.dropdownOptions })}\n          onoptionselected=${(event) => {\n            console.log(event.detail);\n          }}\n        ></ui-dropdown>\n        <button\n          onclick=${() => {\n            this.openAnotherModal();\n          }}\n        >\n          open another modal\n        </button>\n      `;\n    } else {\n      return html``;\n    }\n  }\n}\n","import { Component, ComponentRef, html, IHooks } from '@plumejs/core';\nimport { Router } from '@plumejs/router';\nimport {\n  IModal,\n  IToggleInput,\n  ModalService,\n  NotificationService,\n  NotificationType,\n  ToggleComponent,\n  IDropdownOptions,\n  IOption,\n  DropdownComponent,\n  registerUIModal,\n  registerUINotifications,\n  registerUIToggle,\n  registerUIDropdown\n} from '@plumejs/ui';\nimport { NestedModal } from './nested-modal.component';\n\nregisterUIModal();\nregisterUINotifications();\nregisterUIToggle();\nregisterUIDropdown();\n\n@Component({\n  selector: 'plume-comp',\n  deps: [Router, ModalService, NotificationService]\n})\nexport class PlumeComponents implements IHooks {\n  constructor(private router: Router, private modalsrvc: ModalService, private notifySrvc: NotificationService) {}\n\n  toggleInput: IToggleInput = {\n    onText: 'ON',\n    offText: 'OFF'\n  };\n\n  toggleProps: IToggleInput = {\n    onText: '',\n    offText: ''\n  };\n\n  enableMultiselect(_checked: boolean) {\n    this.dropdownOptions.multiple = _checked;\n    this.dropdownOptions.resetDropdown = true;\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions\n    });\n  }\n\n  disableDropdown(checked: boolean) {\n    this.dropdownOptions.disable = checked;\n    this.dropdownOptions.resetDropdown = true;\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions\n    });\n  }\n\n  enableFilter(checked: boolean) {\n    this.dropdownOptions.enableFilter = checked;\n    this.dropdownOptions.resetDropdown = true;\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions\n    });\n  }\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: false,\n    buttonText: (options: IOption<string>[]) => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((i) => i.label).join(', ');\n      }\n    }\n  };\n\n  nestedModalRef: ComponentRef<NestedModal>;\n  sampleToggleRef: ComponentRef<ToggleComponent>;\n  enableDropdownRef: ComponentRef<ToggleComponent>;\n  disableDropdownRef: ComponentRef<ToggleComponent>;\n  enableFilterRef: ComponentRef<ToggleComponent>;\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  mount() {\n    console.log(this.router.getCurrentRoute());\n    this.sampleToggleRef.setProps({\n      toggleOptions: this.toggleInput\n    });\n\n    this.enableDropdownRef.setProps({\n      toggleOptions: { ...this.toggleProps }\n    });\n\n    this.disableDropdownRef.setProps({\n      toggleOptions: { ...this.toggleProps }\n    });\n\n    this.enableFilterRef.setProps({\n      toggleOptions: { ...this.toggleProps }\n    });\n\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions\n    });\n  }\n\n  openModal() {\n    const modal: IModal = this.modalsrvc.show({\n      renderTemplate: () =>\n        html`<nested-modal\n          ref=${(node) => {\n            this.nestedModalRef = node;\n          }}\n        ></nested-modal>`,\n      modalTitle: 'testing modal',\n      modalClass: 'sample-class'\n    });\n\n    modal.onOpen.subscribe(() => {\n      console.log('main modal open', modal.Id);\n      this.nestedModalRef.setProps({\n        nestedModalData: { message: 'Hello World' }\n      });\n    });\n\n    modal.onClose.subscribe(() => {\n      console.log('main modal closed');\n    });\n  }\n\n  notify() {\n    this.notifySrvc.sendMessage('hello world', NotificationType.Info);\n  }\n\n  notifyWithAutoHide() {\n    this.notifySrvc.sendMessage('hello world', NotificationType.Info, true);\n  }\n\n  onToggleChange(_checked: boolean) {\n    console.log(_checked);\n  }\n\n  render() {\n    return html`\n      <div>\n        <h2>Plumejs UI Control Collection</h2>\n        <div class=\"mb-20\">\n          <h5>Modal</h5>\n          <button\n            class=\"button is-small is-info\"\n            onclick=${() => {\n              this.openModal();\n            }}\n          >\n            Open Modal\n          </button>\n        </div>\n        <div class=\"mb-20\">\n          <h5>Notification</h5>\n          <button\n            onclick=${() => {\n              this.notify();\n            }}\n          >\n            Notify with action\n          </button>\n          <button\n            onclick=${() => {\n              this.notifyWithAutoHide();\n            }}\n          >\n            Notify with auto hide\n          </button>\n        </div>\n        <div class=\"mb-20\">\n          <h5>Toggle Button</h5>\n          <ui-toggle-button\n            ref=${(node) => {\n              this.sampleToggleRef = node;\n            }}\n            ontogglechange=${(event) => {\n              this.onToggleChange(event.detail);\n            }}\n          ></ui-toggle-button>\n        </div>\n        <div class=\"mb-20\">\n          <h5>Multi select</h5>\n          <div>\n            <div class=\"d-flex mb-20\">\n              <span>enable multi select</span>\n              <ui-toggle-button\n                ref=${(node) => {\n                  this.enableDropdownRef = node;\n                }}\n                ontogglechange=${(event) => {\n                  this.enableMultiselect(event.detail);\n                }}\n              ></ui-toggle-button>\n            </div>\n            <div class=\"d-flex mb-20\">\n              <span>disable dropdown</span>\n              <ui-toggle-button\n                ref=${(node) => {\n                  this.disableDropdownRef = node;\n                }}\n                ontogglechange=${(event) => {\n                  this.disableDropdown(event.detail);\n                }}\n              ></ui-toggle-button>\n            </div>\n            <div class=\"d-flex mb-20\">\n              <span>enable filtering</span>\n              <ui-toggle-button\n                ref=${(node) => {\n                  this.enableFilterRef = node;\n                }}\n                ontogglechange=${(event) => {\n                  this.enableFilter(event.detail);\n                }}\n              ></ui-toggle-button>\n            </div>\n          </div>\n          <div>\n            <ui-dropdown\n              ref=${(node) => {\n                this.dropdownRef = node;\n              }}\n              onoptionselected=${(event) => {\n                console.log(event.detail);\n              }}\n            ></ui-dropdown>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n"],"names":["NestedModal","modalsrvc","ObservedProperties","nestedModalData","dropdownOptions","options","label","value","multiple","buttonText","length","map","i","join","constructor","openAnotherModal","modal","this","show","renderTemplate","modalTitle","modalClass","onOpen","subscribe","console","log","onClose","render","message","event","detail","selector","deps","PlumeComponents","router","notifySrvc","toggleInput","onText","offText","toggleProps","enableMultiselect","_checked","resetDropdown","dropdownRef","setProps","disableDropdown","checked","disable","enableFilter","nestedModalRef","sampleToggleRef","enableDropdownRef","disableDropdownRef","enableFilterRef","mount","getCurrentRoute","toggleOptions","openModal","node","Id","notify","sendMessage","notifyWithAutoHide","onToggleChange"],"sourceRoot":""}