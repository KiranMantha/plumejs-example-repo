{"version":3,"file":"scripts/629.87fc07739e099e3fa273.chunk.js","mappings":"8JAIA,E,OAAA,MAMA,IAAaA,EAAb,MAuCsBC,SAtCpBC,WACAC,oBACAC,yBACAC,QAEAC,gBAA4C,CAC1CC,QAAS,CACP,CACEC,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,OAGXC,UAAU,EACVC,WAAaJ,GACY,IAAnBA,EAAQK,OACH,gBACEL,EAAQK,OAAS,EACnBL,EAAQK,OAAS,YAEjBL,EAAQM,KAAKC,GAASA,EAAKN,QAAOO,KAAK,OAKpDC,YAEAC,YAAoBhB,GAAA,KAAAA,SAAAA,EAEpBiB,eACGC,KAAKjB,WAAYiB,KAAKhB,sBAAuB,QAAc,CAC1DiB,MAAO,GACPC,SAAU,GACVC,SAAS,EACTC,OAAQ,GACRhB,QAAS,CAAC,IACViB,OAAQ,KAEVL,KAAKf,yBAA2Be,KAAKhB,oBAAoB,WAG3DsB,QACEN,KAAKH,YAAYU,SAAS,CACxBpB,gBAAiBa,KAAKb,kBAI1BqB,WAAWC,GACTA,EAAEC,iBACFC,QAAQC,IAAIZ,KAAKjB,YACjBiB,KAAKd,QAAQ2B,UAAYC,KAAKC,UAAUf,KAAKjB,WAAWO,MAAO,KAAM,GAGvE0B,YACEhB,KAAKjB,WAAWkC,QAChBjB,KAAKlB,SAASoC,SAGhBC,SACE,OAAO,IAAI;;;qBAGOV,IACVT,KAAKQ,WAAWC;;;;;;;;;sBAUNT,KAAKjB,WAAWqC,IAAI,SAAS9B;yBAC1BU,KAAKhB,oBAAoB;;;;;;;;;;sBAU5BgB,KAAKjB,WAAWqC,IAAI,YAAY9B;yBAC7BU,KAAKhB,oBAAoB;;;;;;;;0BAQxBgB,KAAKjB,WAAWqC,IAAI,WAAW9B;2BAC9BU,KAAKhB,oBAAoB;;;;;;;4BAOxBgB,KAAKjB,WAAWqC,IAAI,UAAU9B,kBAAkBU,KAAKhB,oBAAoB;;;;;;;;;;;oBAWhFqC,IACLrB,KAAKH,YAAcwB;iCAEDC,IAClBtB,KAAKf,yBAAyB,CAC5BsC,OAAQ,CACNjC,MAAOgC,EAAME;;;;;;;;;;2BAaNxB,KAAKhB,oBAAoB;;;;;;;;;;2BAUzBgB,KAAKhB,oBAAoB;;;;;;;sBAO9B,KACRgB,KAAKgB;;;;;;;gBAQFK,IACTrB,KAAKd,QAAUmC;UAEbP,KAAKC,UAAUf,KAAKjB,WAAWO,MAAO,KAAM;;;QA5KzCT,GAAU,UAJtB,QAAU,CACT4C,SAAU,cACVC,KAAM,CAAC,SAEI7C","sources":["webpack:///./src/form/sample-form.component.ts"],"sourcesContent":["import { Component, ComponentRef, html, IHooks, Renderer, useFormFields, Form } from '@plumejs/core';\n\nimport { IDropdownOptions, IOption, DropdownComponent, registerUIDropdown } from '@plumejs/ui';\n\nregisterUIDropdown();\n\n@Component({\n  selector: 'sample-form',\n  deps: [Renderer]\n})\nexport class SampleForm implements IHooks {\n  sampleform: Form;\n  createChangeHandler: (key: string) => (e: Event) => void;\n  multiSelectChangehandler: (e: any) => void;\n  jsonRef: HTMLElement;\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: true,\n    buttonText: (options: IOption<string>[]): string => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((item) => item.label).join(', ');\n      }\n    }\n  };\n\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  constructor(private renderer: Renderer) {}\n\n  beforeMount() {\n    [this.sampleform, this.createChangeHandler] = useFormFields({\n      email: '',\n      password: '',\n      checkme: false,\n      option: '',\n      options: [[]],\n      gender: ''\n    });\n    this.multiSelectChangehandler = this.createChangeHandler('options');\n  }\n\n  mount() {\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions\n    });\n  }\n\n  submitForm(e: Event) {\n    e.preventDefault();\n    console.log(this.sampleform);\n    this.jsonRef.innerHTML = JSON.stringify(this.sampleform.value, null, 4);\n  }\n\n  resetForm() {\n    this.sampleform.reset();\n    this.renderer.update();\n  }\n\n  render() {\n    return html`\n      <div>\n        <form\n          onsubmit=${(e: Event) => {\n            this.submitForm(e);\n          }}\n        >\n          <div>\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter email\"\n              value=${this.sampleform.get('email').value}\n              onchange=${this.createChangeHandler('email')}\n            />\n            <small id=\"emailHelp\"> We'll never share your email with anyone else. </small>\n          </div>\n          <div>\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"Password\"\n              value=${this.sampleform.get('password').value}\n              onchange=${this.createChangeHandler('password')}\n            />\n          </div>\n          <div>\n            <label for=\"exampleCheck1\">\n              <input\n                type=\"checkbox\"\n                id=\"exampleCheck1\"\n                checked=${this.sampleform.get('checkme').value}\n                onchange=${this.createChangeHandler('checkme')}\n              />\n              Check me out\n            </label>\n          </div>\n          <div>\n            <label>single select</label>\n            <select value=${this.sampleform.get('option').value} onchange=${this.createChangeHandler('option')}>\n              <option>select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div class=\"mb-20\">\n            <label>plumejs multi select</label>\n            <ui-dropdown\n              ref=${(node) => {\n                this.dropdownRef = node;\n              }}\n              onoptionselected=${(event) => {\n                this.multiSelectChangehandler({\n                  target: {\n                    value: event.detail\n                  }\n                });\n              }}\n            ></ui-dropdown>\n          </div>\n          <div class=\"mb-20\">\n            <label for=\"gender_male\">\n              <input\n                type=\"radio\"\n                id=\"gender_male\"\n                name=\"gender\"\n                value=\"male\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Male\n            </label>\n            <label for=\"gender_female\">\n              <input\n                type=\"radio\"\n                id=\"gender_female\"\n                name=\"gender\"\n                value=\"female\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Female\n            </label>\n          </div>\n          <button type=\"submit\">Submit</button>\n          <button\n            onclick=${() => {\n              this.resetForm();\n            }}\n          >\n            Reset\n          </button>\n        </form>\n      </div>\n      <pre>\n\t\t\t\t<code ref=${(node) => {\n        this.jsonRef = node;\n      }}>\n        ${JSON.stringify(this.sampleform.value, null, 4)}\n\t\t\t\t</code>\n\t\t\t</pre>\n    `;\n  }\n}\n"],"names":["SampleForm","renderer","sampleform","createChangeHandler","multiSelectChangehandler","jsonRef","dropdownOptions","options","label","value","multiple","buttonText","length","map","item","join","dropdownRef","constructor","beforeMount","this","email","password","checkme","option","gender","mount","setProps","submitForm","e","preventDefault","console","log","innerHTML","JSON","stringify","resetForm","reset","update","render","get","node","event","target","detail","selector","deps"],"sourceRoot":""}