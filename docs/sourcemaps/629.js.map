{"version":3,"file":"scripts/629.96a850c09af04d02cc11.chunk.js","mappings":"wJAgBA,E,OAAA,MAKA,IAAMA,EAAN,MAAMA,WAwCgBC,SAvCpBC,iBACAC,oBACAC,yBACAC,gBACAC,QAEAC,gBAA4C,CAC1CC,QAAS,CACP,CACEC,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,OAGXC,UAAU,EACVC,WAAaJ,GACY,IAAnBA,EAAQK,OACH,gBACEL,EAAQK,OAAS,EACnBL,EAAQK,OAAS,YAEjBL,EAAQM,KAAKC,GAASA,EAAKN,QAAOO,KAAK,OAKpDC,YAEAC,YAAoBjB,GAAA,KAAAA,SAAAA,EAEpBkB,eACGC,KAAKlB,iBAAkBkB,KAAKjB,oBAAqBiB,KAAKf,kBACrD,QAAc,CACZgB,MAAO,GACPC,SAAU,GACVC,SAAS,EACTC,OAAQ,GACRhB,QAAS,GACTiB,OAAQ,KAEZL,KAAKhB,yBAA2BgB,KAAKjB,oBAAoB,WAG3DuB,QACEN,KAAKH,YAAYU,SAAS,CACxBpB,gBAAiBa,KAAKb,kBAI1BqB,WAAWC,GACTA,EAAEC,iBACFC,QAAQC,IAAIZ,KAAKlB,kBACjBkB,KAAKd,QAAQ2B,UAAYC,KAAKC,UAAUf,KAAKlB,iBAAkB,KAAM,GAGvEkC,YACEhB,KAAKf,kBACLe,KAAKnB,SAASoC,SAGhBC,SACE,OAAO,IAAI;;;qBAGOT,IACVT,KAAKQ,WAAWC;;;;;;;;;sBAUNT,KAAKlB,iBAAiBmB;yBACnBD,KAAKjB,oBAAoB;;;;;;;;;;;;sBAY5BiB,KAAKlB,iBAAiBoB;yBACnBF,KAAKjB,oBAAoB;;;;;;;;0BAQxBiB,KAAKlB,iBAAiBqB;2BACrBH,KAAKjB,oBAAoB;;;;;;;;sBAQ9BiB,KAAKlB,iBAAiBsB;yBACnBJ,KAAKjB,oBAAoB;;;;;;;;;;;;oBAY7BoC,IACLnB,KAAKH,YAAcsB;iCAEDC,IAClBpB,KAAKhB,yBAAyB,CAC5BqC,OAAQ,CACN/B,MAAO8B,EAAME;;;;;;;;;;2BAaNtB,KAAKjB,oBAAoB;;;;;;;;;;2BAUzBiB,KAAKjB,oBAAoB;;;;;;;sBAO9B,KACRiB,KAAKgB;;;;;;;gBAQFG,IACTnB,KAAKd,QAAUiC;UAEbL,KAAKC,UAAUf,KAAKlB,iBAAkB,KAAM;;;QAnLhDF,GAAU,UAHf,QAAU,CACT2C,SAAU,iB,6BA0CoB,QAxC1B3C","sources":["webpack:///./src/form/sample-form.component.ts"],"sourcesContent":["import {\n  Component,\n  ComponentRef,\n  html,\n  IHooks,\n  Renderer,\n  useFormFields,\n} from '@plumejs/core';\n\nimport {\n  IDropdownOptions,\n  IOption,\n  DropdownComponent,\n  registerUIDropdown,\n} from '@plumejs/ui';\n\nregisterUIDropdown();\n\n@Component({\n  selector: 'sample-form',\n})\nclass SampleForm implements IHooks {\n  sampleformFields: any;\n  createChangeHandler: (key: string) => (e: Event) => void;\n  multiSelectChangehandler: (e: any) => void;\n  resetFormFields: () => void;\n  jsonRef: HTMLElement;\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1',\n      },\n      {\n        label: 'Option 2',\n        value: 'o2',\n      },\n      {\n        label: 'Option 3',\n        value: 'o3',\n      },\n      {\n        label: 'Option 4',\n        value: 'o4',\n      },\n    ],\n    multiple: true,\n    buttonText: (options: IOption<string>[]): string => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((item) => item.label).join(', ');\n      }\n    },\n  };\n\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  constructor(private renderer: Renderer) {}\n\n  beforeMount() {\n    [this.sampleformFields, this.createChangeHandler, this.resetFormFields] =\n      useFormFields({\n        email: '',\n        password: '',\n        checkme: false,\n        option: '',\n        options: [],\n        gender: '',\n      });\n    this.multiSelectChangehandler = this.createChangeHandler('options');\n  }\n\n  mount() {\n    this.dropdownRef.setProps({\n      dropdownOptions: this.dropdownOptions,\n    });\n  }\n\n  submitForm(e: Event) {\n    e.preventDefault();\n    console.log(this.sampleformFields);\n    this.jsonRef.innerHTML = JSON.stringify(this.sampleformFields, null, 4);\n  }\n\n  resetForm() {\n    this.resetFormFields();\n    this.renderer.update();\n  }\n\n  render() {\n    return html`\n      <div>\n        <form\n          onsubmit=${(e: Event) => {\n            this.submitForm(e);\n          }}\n        >\n          <div>\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter email\"\n              value=${this.sampleformFields.email}\n              onchange=${this.createChangeHandler('email')}\n            />\n            <small id=\"emailHelp\">\n              We'll never share your email with anyone else.\n            </small>\n          </div>\n          <div>\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"Password\"\n              value=${this.sampleformFields.password}\n              onchange=${this.createChangeHandler('password')}\n            />\n          </div>\n          <div>\n            <label for=\"exampleCheck1\">\n              <input\n                type=\"checkbox\"\n                id=\"exampleCheck1\"\n                checked=${this.sampleformFields.checkme}\n                onchange=${this.createChangeHandler('checkme')}\n              />\n              Check me out\n            </label>\n          </div>\n          <div>\n            <label>single select</label>\n            <select\n              value=${this.sampleformFields.option}\n              onchange=${this.createChangeHandler('option')}\n            >\n              <option>select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div class=\"mb-20\">\n            <label>plumejs multi select</label>\n            <ui-dropdown\n              ref=${(node) => {\n                this.dropdownRef = node;\n              }}\n              onoptionselected=${(event) => {\n                this.multiSelectChangehandler({\n                  target: {\n                    value: event.detail,\n                  },\n                });\n              }}\n            ></ui-dropdown>\n          </div>\n          <div class=\"mb-20\">\n            <label for=\"gender_male\">\n              <input\n                type=\"radio\"\n                id=\"gender_male\"\n                name=\"gender\"\n                value=\"male\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Male\n            </label>\n            <label for=\"gender_female\">\n              <input\n                type=\"radio\"\n                id=\"gender_female\"\n                name=\"gender\"\n                value=\"female\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Female\n            </label>\n          </div>\n          <button type=\"submit\">Submit</button>\n          <button\n            onclick=${() => {\n              this.resetForm();\n            }}\n          >\n            Reset\n          </button>\n        </form>\n      </div>\n      <pre>\n\t\t\t\t<code ref=${(node) => {\n        this.jsonRef = node;\n      }}>\n        ${JSON.stringify(this.sampleformFields, null, 4)}\n\t\t\t\t</code>\n\t\t\t</pre>\n    `;\n  }\n}\n"],"names":["SampleForm","renderer","sampleformFields","createChangeHandler","multiSelectChangehandler","resetFormFields","jsonRef","dropdownOptions","options","label","value","multiple","buttonText","length","map","item","join","dropdownRef","constructor","beforeMount","this","email","password","checkme","option","gender","mount","setProps","submitForm","e","preventDefault","console","log","innerHTML","JSON","stringify","resetForm","update","render","node","event","target","detail","selector"],"sourceRoot":""}