{"version":3,"file":"scripts/45.0c19ab3edf83fb5b8756.bundle.js","mappings":"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","sources":["webpack:///./node_modules/@plumejs/router/dist/src/staticRouter.js","webpack:///./node_modules/@plumejs/router/dist/src/utils.js","webpack:///./node_modules/@plumejs/router/dist/src/internalRouter.service.js","webpack:///./node_modules/@plumejs/router/dist/src/router.component.js","webpack:///./node_modules/@plumejs/router/dist/src/router.service.js"],"sourcesContent":["export class StaticRouter {\n    static routeList = [];\n    static checkParams(urlParams, routeItem) {\n        let paramMapCount = 0;\n        const paramsObject = {}, paramCount = routeItem.ParamCount;\n        for (let i = 0; i < urlParams.length; i++) {\n            const routeParam = routeItem.Params[i];\n            if (routeParam.indexOf(':') >= 0) {\n                paramsObject[routeParam.split(':')[1]] = urlParams[i].split('?')[0];\n                paramMapCount += 1;\n            }\n        }\n        if (paramMapCount === paramCount) {\n            return paramsObject;\n        }\n        return {};\n    }\n    static getParamCount(params) {\n        let paramCount = 0;\n        params.forEach((param) => {\n            if (param.indexOf(':') >= 0) {\n                paramCount += 1;\n            }\n        });\n        return paramCount;\n    }\n    static formatRoute(route) {\n        const obj = {\n            Params: {},\n            Url: '',\n            Template: '',\n            ParamCount: 0,\n            IsRegistered: false,\n            redirectTo: '',\n            canActivate: () => true\n        };\n        obj.Params = route.path.split('/').filter((str) => {\n            return str.length > 0;\n        });\n        obj.Url = route.path;\n        obj.Template = '';\n        obj.redirectTo = route.redirectTo;\n        if (route.template) {\n            if (!route.templatePath)\n                throw Error('templatePath is required in route if template is mentioned.');\n            obj.Template = route.template;\n            obj.TemplatePath = route.templatePath;\n        }\n        if (route.canActivate)\n            obj.canActivate = route.canActivate;\n        obj.ParamCount = StaticRouter.getParamCount(obj.Params);\n        StaticRouter.routeList.push(obj);\n    }\n    static preloadRoutes() {\n        for (const route of StaticRouter.routeList) {\n            route.TemplatePath && route.TemplatePath();\n        }\n    }\n}\n","const isObservable = (obj) => !!obj && typeof obj.subscribe === 'function';\nconst isPromise = (obj) => !!obj && typeof obj.then === 'function';\nconst ofObs = (input) => {\n    return {\n        subscribe: (fn) => {\n            fn(input);\n        }\n    };\n};\nconst fromPromiseObs = (input) => {\n    return {\n        subscribe: (fn) => {\n            Promise.resolve(input).then((value) => {\n                fn(value);\n            });\n        }\n    };\n};\nclass SubjectObs {\n    _internalFn;\n    asObservable() {\n        return {\n            subscribe: (fn) => {\n                return this.subscribe(fn);\n            }\n        };\n    }\n    subscribe(fn) {\n        this._internalFn = fn;\n        return this.unsubscribe;\n    }\n    unsubscribe() {\n        this._internalFn = null;\n    }\n    next(value) {\n        this._internalFn(value);\n    }\n}\nconst wrapIntoObservable = (value) => {\n    if (isObservable(value)) {\n        return value;\n    }\n    if (isPromise(value)) {\n        return fromPromiseObs(Promise.resolve(value));\n    }\n    return ofObs(value);\n};\nconst fromVanillaEvent = (target, eventName, onNext, options = false) => {\n    target.addEventListener(eventName, onNext, options);\n    const unsubscribe = () => {\n        target.removeEventListener(eventName, onNext, options);\n    };\n    return unsubscribe;\n};\nexport { wrapIntoObservable, SubjectObs, fromVanillaEvent };\n","import { __decorate } from \"tslib\";\nimport { Injectable } from '@plumejs/core';\nimport { StaticRouter } from './staticRouter';\nimport { wrapIntoObservable, SubjectObs, fromVanillaEvent } from './utils';\nlet InternalRouter = class InternalRouter {\n    _currentRoute = {\n        path: '',\n        routeParams: new Map(),\n        queryParams: new Map(),\n        state: {}\n    };\n    _template = new SubjectObs();\n    _unSubscribeHashEvent;\n    startHashChange() {\n        this._unSubscribeHashEvent = fromVanillaEvent(window, 'hashchange', () => {\n            this._registerOnHashChange();\n        });\n    }\n    stopHashChange() {\n        this._unSubscribeHashEvent();\n    }\n    getTemplate() {\n        return this._template.asObservable();\n    }\n    getCurrentRoute() {\n        return this._currentRoute;\n    }\n    navigateTo(path = '', state) {\n        if (path) {\n            const windowHash = window.location.hash.replace(/^#/, '');\n            if (windowHash === path) {\n                this._navigateTo(path, state);\n            }\n            window.location.hash = '#' + path;\n        }\n        else {\n            this._navigateTo(path, state);\n        }\n    }\n    _registerOnHashChange() {\n        const path = window.location.hash.replace(/^#/, '');\n        this._navigateTo(path, null);\n    }\n    _routeMatcher(route, path) {\n        if (route) {\n            const _matcher = new RegExp(route.replace(/:[^\\s/]+/g, '([\\\\w-]+)'));\n            return path.match(_matcher);\n        }\n        else {\n            return route === path;\n        }\n    }\n    _navigateTo(path, state) {\n        const uParams = path.split('/').filter((h) => {\n            return h.length > 0;\n        });\n        const routeArr = StaticRouter.routeList.filter((route) => {\n            if (route.Params.length === uParams.length && this._routeMatcher(route.Url, path)) {\n                return route;\n            }\n            else if (route.Url === path) {\n                return route;\n            }\n        });\n        const routeItem = routeArr.length > 0 ? routeArr[0] : null;\n        if (routeItem) {\n            this._currentRoute.path = path;\n            this._currentRoute.state = { ...(state || {}) };\n            wrapIntoObservable(routeItem.canActivate()).subscribe((val) => {\n                if (!val)\n                    return;\n                const _params = StaticRouter.checkParams(uParams, routeItem);\n                if (Object.keys(_params).length > 0 || path) {\n                    this._currentRoute.routeParams = new Map(Object.entries(_params));\n                    const entries = window.location.hash.split('?')[1]\n                        ? new URLSearchParams(window.location.hash.split('?')[1]).entries()\n                        : [];\n                    this._currentRoute.queryParams = new Map(entries);\n                    if (!routeItem.IsRegistered) {\n                        if (routeItem.TemplatePath) {\n                            wrapIntoObservable(routeItem.TemplatePath()).subscribe(() => {\n                                routeItem.IsRegistered = true;\n                                this._template.next(routeItem.Template);\n                            });\n                        }\n                    }\n                    else {\n                        this._template.next(routeItem.Template);\n                    }\n                }\n                else {\n                    this.navigateTo(routeItem.redirectTo, state);\n                }\n            });\n        }\n    }\n};\nInternalRouter = __decorate([\n    Injectable()\n], InternalRouter);\nexport { InternalRouter };\n","import { __decorate, __metadata } from \"tslib\";\nimport { Component, html, Renderer } from '@plumejs/core';\nimport { InternalRouter } from './internalRouter.service';\nlet RouterOutlet = class RouterOutlet {\n    internalRouterSrvc;\n    renderer;\n    _template = '';\n    _templateSubscription;\n    constructor(internalRouterSrvc, renderer) {\n        this.internalRouterSrvc = internalRouterSrvc;\n        this.renderer = renderer;\n    }\n    beforeMount() {\n        this._templateSubscription = this.internalRouterSrvc.getTemplate().subscribe((tmpl) => {\n            this._template = tmpl;\n            this.renderer.update();\n        });\n        this.internalRouterSrvc.startHashChange();\n    }\n    mount() {\n        const path = window.location.hash.replace(/^#/, '');\n        this.internalRouterSrvc.navigateTo(path, null);\n    }\n    unmount() {\n        this._templateSubscription();\n        this.internalRouterSrvc.stopHashChange();\n    }\n    render() {\n        if (this._template) {\n            const stringArray = [`${this._template}`];\n            stringArray.raw = [`${this._template}`];\n            return html(stringArray);\n        }\n        else {\n            return html ``;\n        }\n    }\n};\nRouterOutlet = __decorate([\n    Component({\n        selector: 'router-outlet',\n        deps: [InternalRouter, Renderer]\n    }),\n    __metadata(\"design:paramtypes\", [InternalRouter, Renderer])\n], RouterOutlet);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@plumejs/core';\nimport { InternalRouter } from './internalRouter.service';\nimport { StaticRouter } from './staticRouter';\nlet Router = class Router {\n    internalRouter;\n    constructor(internalRouter) {\n        this.internalRouter = internalRouter;\n    }\n    getCurrentRoute() {\n        return this.internalRouter.getCurrentRoute();\n    }\n    navigateTo(path, state) {\n        this.internalRouter.navigateTo(path, state);\n    }\n    static registerRoutes(routes, preloadAllRoutes = false) {\n        if (Array.isArray(routes)) {\n            for (const route of routes) {\n                StaticRouter.formatRoute(route);\n            }\n            preloadAllRoutes && StaticRouter.preloadRoutes();\n        }\n        else {\n            throw Error('router.addRoutes: the parameter must be an array');\n        }\n    }\n};\nRouter = __decorate([\n    Injectable({ deps: [InternalRouter] }),\n    __metadata(\"design:paramtypes\", [InternalRouter])\n], Router);\nexport { Router };\n"],"names":["StaticRouter","static","urlParams","routeItem","paramMapCount","paramsObject","paramCount","ParamCount","i","length","routeParam","Params","indexOf","split","params","forEach","param","route","obj","Url","Template","IsRegistered","redirectTo","canActivate","path","filter","str","template","templatePath","Error","TemplatePath","getParamCount","routeList","push","SubjectObs","_internalFn","asObservable","subscribe","fn","this","unsubscribe","next","value","wrapIntoObservable","then","isPromise","input","Promise","resolve","ofObs","InternalRouter","_currentRoute","routeParams","Map","queryParams","state","_template","_unSubscribeHashEvent","startHashChange","target","eventName","onNext","options","addEventListener","removeEventListener","fromVanillaEvent","window","_registerOnHashChange","stopHashChange","getTemplate","getCurrentRoute","navigateTo","location","hash","replace","_navigateTo","_routeMatcher","_matcher","RegExp","match","uParams","h","routeArr","val","_params","checkParams","Object","keys","entries","URLSearchParams","RouterOutlet","internalRouterSrvc","renderer","_templateSubscription","constructor","beforeMount","tmpl","update","mount","unmount","render","stringArray","raw","selector","deps","Router","internalRouter","routes","preloadAllRoutes","Array","isArray","formatRoute","preloadRoutes"],"sourceRoot":""}