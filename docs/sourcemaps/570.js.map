{"version":3,"file":"scripts/570.b0f740f5bd701a812274.chunk.js","mappings":"+JAQA,IAAaA,EAAb,MAwCsBC,SAvCpBC,WACAC,oBACAC,yBACAC,QACAC,UAEAC,gBAA4C,CAC1CC,QAAS,CACP,CACEC,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,OAGXC,UAAU,EACVC,WAAaJ,GACY,IAAnBA,EAAQK,OACH,gBACEL,EAAQK,OAAS,EACnBL,EAAQK,OAAS,YAEjBL,EAAQM,KAAKC,GAASA,EAAKN,QAAOO,KAAK,OAKpDC,YAEAC,YAAoBjB,GAAA,KAAAA,SAAAA,CAAqB,CAEzCkB,eACGC,KAAKlB,WAAYkB,KAAKjB,sBAAuB,QAAc,CAC1DkB,MAAO,CAAC,GAAI,cAAqB,aAAmB,gDACpDC,SAAU,GACVC,SAAS,EACTC,OAAQ,GACRhB,QAAS,CAAC,IACViB,OAAQ,KAEVL,KAAKhB,yBAA2BgB,KAAKjB,oBAAoB,UAC3D,CAEAuB,WAAWC,GACTA,EAAEC,iBACER,KAAKlB,WAAW2B,OAClBC,MAAM,+BAERC,QAAQC,IAAIZ,KAAKlB,YACjBkB,KAAKd,UAAU2B,UAAYC,KAAKC,UAAUC,OAAOC,YAAYjB,KAAKlB,WAAWoC,QAAS,KAAM,GAC5FlB,KAAKf,QAAQ4B,UAAYC,KAAKC,UAAUf,KAAKlB,WAAWQ,MAAO,KAAM,EACvE,CAEA6B,YACEnB,KAAKlB,WAAWsC,QAChBpB,KAAKnB,SAASwC,QAChB,CAEAC,SACE,OAAO,IAAI;;;qBAGOf,IACVP,KAAKM,WAAWC,EAAE;;;;;;;;;sBAURP,KAAKlB,WAAWyC,IAAI,SAASjC;yBAC1BU,KAAKjB,oBAAoB;;;;;;;;;;sBAU5BiB,KAAKlB,WAAWyC,IAAI,YAAYjC;yBAC7BU,KAAKjB,oBAAoB;;;;;;;;0BAQxBiB,KAAKlB,WAAWyC,IAAI,WAAWjC;2BAC9BU,KAAKjB,oBAAoB;;;;;;;4BAOxBiB,KAAKlB,WAAWyC,IAAI,UAAUjC,kBAAkBU,KAAKjB,oBAAoB;;;;;;;;;;;2BAW1E,CACXI,gBAAiBa,KAAKb;iCAEJqC,IAClBxB,KAAKhB,yBAAyB,CAC5ByC,OAAQ,CACNnC,MAAOkC,EAAME,SAEf;;;;;;;;;;2BAWS1B,KAAKjB,oBAAoB;;;;;;;;;;2BAUzBiB,KAAKjB,oBAAoB;;;;;;;sBAO9B,KACRiB,KAAKmB,WAAW;;;;;;;;wBASLQ,IACjB3B,KAAKd,UAAYyC,CAAI;gBAEbb,KAAKC,UAAUC,OAAOC,YAAYjB,KAAKlB,WAAWoC,QAAS,KAAM;;;;;gBAKhES,IACT3B,KAAKf,QAAU0C,CAAI;UAEjBb,KAAKC,UAAUf,KAAKlB,WAAWQ,MAAO,KAAM;;;KAIpD,GAxLWV,GAAU,UAJtB,QAAU,CACTgD,SAAU,cACVC,KAAM,CAAC,SAEIjD,E","sources":["webpack:///./src/form/sample-form.component.ts"],"sourcesContent":["import { Component, ComponentRef, html, IHooks, Renderer, useFormFields, Form, Validators } from '@plumejs/core';\n\nimport { IDropdownOptions, IOption, DropdownComponent } from '@plumejs/ui';\n\n@Component({\n  selector: 'sample-form',\n  deps: [Renderer]\n})\nexport class SampleForm implements IHooks {\n  sampleform: Form<any>;\n  createChangeHandler: (key: string) => (e: Event) => void;\n  multiSelectChangehandler: (e: any) => void;\n  jsonRef: HTMLElement;\n  errorsRef: HTMLElement;\n\n  dropdownOptions: IDropdownOptions<string> = {\n    options: [\n      {\n        label: 'Option 1',\n        value: 'o1'\n      },\n      {\n        label: 'Option 2',\n        value: 'o2'\n      },\n      {\n        label: 'Option 3',\n        value: 'o3'\n      },\n      {\n        label: 'Option 4',\n        value: 'o4'\n      }\n    ],\n    multiple: true,\n    buttonText: (options: IOption<string>[]): string => {\n      if (options.length === 0) {\n        return 'None selected';\n      } else if (options.length > 3) {\n        return options.length + ' selected';\n      } else {\n        return options.map((item) => item.label).join(', ');\n      }\n    }\n  };\n\n  dropdownRef: ComponentRef<DropdownComponent<string>>;\n\n  constructor(private renderer: Renderer) {}\n\n  beforeMount() {\n    [this.sampleform, this.createChangeHandler] = useFormFields({\n      email: ['', Validators.required, Validators.pattern(/^[a-z0-9]((\\.|\\+)?[a-z0-9]){5,}@gmail\\.com$/)],\n      password: '',\n      checkme: false,\n      option: '',\n      options: [[]],\n      gender: ''\n    });\n    this.multiSelectChangehandler = this.createChangeHandler('options');\n  }\n\n  submitForm(e: Event) {\n    e.preventDefault();\n    if (this.sampleform.valid) {\n      alert('form submitted successfully');\n    }\n    console.log(this.sampleform);\n    this.errorsRef.innerHTML = JSON.stringify(Object.fromEntries(this.sampleform.errors), null, 4);\n    this.jsonRef.innerHTML = JSON.stringify(this.sampleform.value, null, 4);\n  }\n\n  resetForm() {\n    this.sampleform.reset();\n    this.renderer.update();\n  }\n\n  render() {\n    return html`\n      <div>\n        <form\n          onsubmit=${(e: Event) => {\n            this.submitForm(e);\n          }}\n        >\n          <div>\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter gmail id\"\n              value=${this.sampleform.get('email').value}\n              onchange=${this.createChangeHandler('email')}\n            />\n            <small id=\"emailHelp\"> We'll never share your email with anyone else. </small>\n          </div>\n          <div>\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"Password\"\n              value=${this.sampleform.get('password').value}\n              onchange=${this.createChangeHandler('password')}\n            />\n          </div>\n          <div>\n            <label for=\"exampleCheck1\">\n              <input\n                type=\"checkbox\"\n                id=\"exampleCheck1\"\n                checked=${this.sampleform.get('checkme').value}\n                onchange=${this.createChangeHandler('checkme')}\n              />\n              Check me out\n            </label>\n          </div>\n          <div>\n            <label>single select</label>\n            <select value=${this.sampleform.get('option').value} onchange=${this.createChangeHandler('option')}>\n              <option>select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </div>\n          <div class=\"mb-20\">\n            <label>plumejs multi select</label>\n            <ui-dropdown\n              data-input=${{\n                dropdownOptions: this.dropdownOptions\n              }}\n              onoptionselected=${(event) => {\n                this.multiSelectChangehandler({\n                  target: {\n                    value: event.detail\n                  }\n                });\n              }}\n            ></ui-dropdown>\n          </div>\n          <div class=\"mb-20\">\n            <label for=\"gender_male\">\n              <input\n                type=\"radio\"\n                id=\"gender_male\"\n                name=\"gender\"\n                value=\"male\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Male\n            </label>\n            <label for=\"gender_female\">\n              <input\n                type=\"radio\"\n                id=\"gender_female\"\n                name=\"gender\"\n                value=\"female\"\n                onchange=${this.createChangeHandler('gender')}\n              />\n              Female\n            </label>\n          </div>\n          <button type=\"submit\">Submit</button>\n          <button\n            onclick=${() => {\n              this.resetForm();\n            }}\n          >\n            Reset\n          </button>\n        </form>\n      </div>\n      <p>Error summary</p>\n      <pre>\n            <code ref=${(node) => {\n        this.errorsRef = node;\n      }}>\n              ${JSON.stringify(Object.fromEntries(this.sampleform.errors), null, 4)}\n            </code>\n      </pre>\n      <p>Form value</p>\n      <pre>\n\t\t\t\t<code ref=${(node) => {\n        this.jsonRef = node;\n      }}>\n        ${JSON.stringify(this.sampleform.value, null, 4)}\n\t\t\t\t</code>\n\t\t\t</pre>\n    `;\n  }\n}\n"],"names":["SampleForm","renderer","sampleform","createChangeHandler","multiSelectChangehandler","jsonRef","errorsRef","dropdownOptions","options","label","value","multiple","buttonText","length","map","item","join","dropdownRef","constructor","beforeMount","this","email","password","checkme","option","gender","submitForm","e","preventDefault","valid","alert","console","log","innerHTML","JSON","stringify","Object","fromEntries","errors","resetForm","reset","update","render","get","event","target","detail","node","selector","deps"],"sourceRoot":""}