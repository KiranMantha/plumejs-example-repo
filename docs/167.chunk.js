(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[167],{167:(e,t,s)=>{"use strict";s.r(t);var o=s(298);(0,o.wA)({selector:"emulated-styles",styles:"\n    :host(.color-1) { color: green; }\n    :host(.color-2) { color: blue; }\n    :host(.color-3) { color: red; }\n  "})([class{constructor(){}render(){return o.dy`<p>my styles are emulated</p>`}}]);(0,o.GS)("SampleService")([class{constructor(){}testMeth(){console.log("testmethod in sample service")}}]);(0,o.GS)("TestService")(["SampleService",class{constructor(e){this.sampleSrvc=e}testMeth(){this.sampleSrvc.testMeth()}getUsers(){return fetch("https://api.github.com/users?since=135")}}]);(0,o.wA)({selector:"sample-ele"})(["TestService","Renderer",class{constructor(e,t){this.testSrvc=e,this.renderer=t,this.test="sample 123",this.props={name:this.test}}beforeMount(){console.log("before mounting...")}mount(){console.log("component loaded"),console.log(this.inputField),this.testSrvc.testMeth(),this.testEleRef.setProps({testprops:this.props})}unmount(){console.log("component unloaded")}enablePersonsRoute(){window.localStorage.setItem("@plumejs/core","now persons route is activated")}disablePersonsRoute(){window.localStorage.removeItem("@plumejs/core")}updateProps(){this.testEleRef.setProps({testprops:this.props})}count(e){this.test=e,this.props.name=e,this.renderer.update(),this.testEleRef.setProps({testprops:this.props})}getRef(){console.log(this.inputField)}render(){return o.dy`
			<p>Persons route has <b>canActivate</b> gaurd which check for <i>plumejs</i> key in localstorage. Click enable button to navigate to persons route. Click disable button to disable persons route. </p>
			<div>
				<button class='button is-small is-info' onclick=${this.enablePersonsRoute} title='click persons nav to check persons route'>Enable Persons route</button>
				<button class='button is-small is-info' style='margin-left: 10px' onclick=${this.disablePersonsRoute} title='click persons nav to check persons route'>Disable Persons route</button>
			</div>
			<div class='mt-20'>check translation: ${"username.greet".translate({name:"test user"})}</div>
			<input type='text' ref=${e=>{this.inputField=e}} /><button class='button is-small is-info' onclick=${()=>{this.getRef()}}>click</button>
			<div>
				<h1>Sample two way data binding</h1>
				testing web component1 ${this.test}
				<div>
					<button onclick=${()=>{this.updateProps()}}>change props</button>
				</div>
				<test-ele ref="${e=>{this.testEleRef=e}}" oncount="${e=>{this.count(e.detail)}}">
					
				</test-ele>
			</div>
			${[1,2,3].map((e=>o.dy`<emulated-styles class="color-${e}"></emulated-styles>`))}
		`}}]);(0,o.wA)({selector:"test-ele"})(["Renderer",class{constructor(e){this.renderer=e,this.ObservedProperties=["testprops"]}render(){return this.testprops?o.dy`
				<div>
					testing web component2 ${this.testprops.name}
					<button class='button is-small is-info' onclick=${e=>this.counts(e)}>hi</button>
					<input
						value=${this.testprops.name}
						oninput=${e=>this.change(e.target.value)}
					/>
					<slot>testing slots</slot>
				</div>
			`:o.dy``}counts(e){this.renderer.emitEvent("count","testing from click")}change(e){this.renderer.emitEvent("count",e)}mount(){console.log("component loaded"),console.log("props: ",this.testprops)}unmount(){console.log("component unloaded")}}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,