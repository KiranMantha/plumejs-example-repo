(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[951],{501:(e,s,r)=>{"use strict";r.d(s,{Z:()=>l});var t=r(15),n=r.n(t),i=r(645),o=r.n(i)()(n());o.push([e.id,".test{list-style:none;margin:0;padding:0}.test li{color:#000}","",{version:3,sources:["webpack://./src/persons/persons-list.scss"],names:[],mappings:"AAEA,MACE,eAAA,CACA,QAAA,CACA,SAAA,CACA,SACE,UAPG",sourcesContent:["$grey: #000;\r\n\r\n.test {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  li {\r\n    color: $grey;\r\n  }\r\n}"],sourceRoot:""}]);const l=o},951:(e,s,r)=>{"use strict";r.r(s);var t=r(298);(0,t.wA)({selector:"person-details"})([class{constructor(){this.ObservedProperties=["userDetails"]}render(){return this.userDetails&&this.userDetails.name?t.dy`
				<strong>Person Details</strong>
				<div>Name: ${this.userDetails.name}</div>
				<div>Company: ${this.userDetails.company.name}</div>
			`:t.dy`<div></div>`}}]);r(447);var n=r(501);(0,t.GS)("PersonService")([class{getPersons(){return fetch("https://jsonplaceholder.typicode.com/users").then((e=>e.json()))}}]);(0,t.wA)({selector:"persons-list",styles:n.Z,useShadow:!1})(["PersonService","Router",class{constructor(e,s){this.personSrvc=e,this.router=s,this.persondetails={},console.log("current route ",this.router.getCurrentRoute())}mount(){this.personSrvc.getPersons().then((e=>{this.renderUsers(e)}))}alertName(e){this.persondetails=e,this.personDetailsRef.setProps({userDetails:e})}renderUsers(e){const s=e.map((e=>t.dy`
				<li class='pointer' onclick=${()=>{this.alertName(e)}}>
					${e.name}
				</li>
			`));(0,t.sY)(this.usersListRef,t.dy`${s}`)}render(){return t.dy`
			<h4>Sample service injection with http call and passing data to other component</h4>
			Current route data: <code>${JSON.stringify(this.router.getCurrentRoute(),null,2)}</code>
			<div class='mt-20 mb-20 content'>
				<ul ref="${e=>{this.usersListRef=e}}" class="block-list is-small"></ul>
				<person-details id="person-details"
					ref="${e=>{this.personDetailsRef=e}}"
				></person-details>
			</div>
		`}}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGVyc29ucy9wZXJzb25zLWxpc3Quc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGVyc29ucy9wZXJzb24tZGV0YWlscy5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BlcnNvbnMvcGVyc29ucy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIk9ic2VydmVkUHJvcGVydGllcyIsInRoaXMiLCJ1c2VyRGV0YWlscyIsIm5hbWUiLCJjb21wYW55IiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsInBlcnNvblNydmMiLCJyb3V0ZXIiLCJwZXJzb25kZXRhaWxzIiwiY29uc29sZSIsImxvZyIsImdldEN1cnJlbnRSb3V0ZSIsImdldFBlcnNvbnMiLCJkYXRhIiwicmVuZGVyVXNlcnMiLCJ1c2VyIiwicGVyc29uRGV0YWlsc1JlZiIsInNldFByb3BzIiwibm9kZXMiLCJtYXAiLCJhbGVydE5hbWUiLCJ1c2Vyc0xpc3RSZWYiLCJKU09OIiwic3RyaW5naWZ5Iiwibm9kZSJdLCJtYXBwaW5ncyI6InlLQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGdFQUFpRSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2Q0FBNkMsTUFBUSxHQUFHLFNBQVcsb0RBQW9ELGVBQWlCLENBQUMsa0lBQWtJLFdBQWEsTUFFN1osVyxzRkNGTyxNQUhQLGNBSWEsS0FBQUMsbUJBQTRCLENBQUMsZUFHdEMsU0FDSSxPQUFJQyxLQUFLQyxhQUFlRCxLQUFLQyxZQUFZQyxLQUM5QixJQUFJOztpQkFFTkYsS0FBS0MsWUFBWUM7b0JBQ2RGLEtBQUtDLFlBQVlFLFFBQVFEO0tBRzFCLElBQUksa0IsK0NDWnZCLE1BRUMsYUFDQyxPQUFPRSxNQUFNLDhDQUE4Q0MsTUFBS0MsR0FDL0RBLEVBQUlDLGMscUZBS1AsTUFXQyxZQUFvQkMsRUFBbUNDLEdBQW5DLEtBQUFELGFBQW1DLEtBQUFDLFNBTHZELEtBQUFDLGNBQXFCLEdBTXBCQyxRQUFRQyxJQUFJLGlCQUFrQlosS0FBS1MsT0FBT0ksbUJBRzNDLFFBQ0NiLEtBQUtRLFdBQVdNLGFBQWFULE1BQUtVLElBQ2pDZixLQUFLZ0IsWUFBWUQsTUFJbkIsVUFBVUUsR0FDVGpCLEtBQUtVLGNBQWdCTyxFQUNyQmpCLEtBQUtrQixpQkFBaUJDLFNBQVMsQ0FBRWxCLFlBQWFnQixJQUd2QyxZQUFZRixHQUNuQixNQUFNSyxFQUFRTCxFQUFLTSxLQUFLSixHQUNoQixJQUFJO2tDQUNvQixLQUFRakIsS0FBS3NCLFVBQVVMO09BQ2xEQSxFQUFLZjs7UUFJVixRQUFPRixLQUFLdUIsYUFBYyxJQUFJLEdBQUdILEtBR2xDLFNBQ0MsT0FBTyxJQUFJOzsrQkFFa0JJLEtBQUtDLFVBQVV6QixLQUFLUyxPQUFPSSxrQkFBbUIsS0FBTTs7ZUFFbkVhLElBQVcxQixLQUFLdUIsYUFBZUc7O1lBRWxDQSxJQUFXMUIsS0FBS2tCLGlCQUFtQlEiLCJmaWxlIjoiOTUxLmNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudGVzdHtsaXN0LXN0eWxlOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowfS50ZXN0IGxpe2NvbG9yOiMwMDB9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BlcnNvbnMvcGVyc29ucy1saXN0LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsTUFDRSxlQUFBLENBQ0EsUUFBQSxDQUNBLFNBQUEsQ0FDQSxTQUNFLFVBUEdcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJGdyZXk6ICMwMDA7XFxyXFxuXFxyXFxuLnRlc3Qge1xcclxcbiAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBsaSB7XFxyXFxuICAgIGNvbG9yOiAkZ3JleTtcXHJcXG4gIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImltcG9ydCB7IENvbXBvbmVudCwgaHRtbCwgSUhvb2tzIH0gZnJvbSAnQHBsdW1lanMvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcInBlcnNvbi1kZXRhaWxzXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIFBlcnNvbkRldGFpbHMgaW1wbGVtZW50cyBJSG9va3Mge1xyXG4gICAgcmVhZG9ubHkgT2JzZXJ2ZWRQcm9wZXJ0aWVzID0gPGNvbnN0PlsndXNlckRldGFpbHMnXTtcclxuICAgIHVzZXJEZXRhaWxzOiB7IG5hbWU6IHN0cmluZzsgY29tcGFueTogeyBuYW1lOiBzdHJpbmcgfSB9O1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VyRGV0YWlscyAmJiB0aGlzLnVzZXJEZXRhaWxzLm5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWxgXHJcblx0XHRcdFx0PHN0cm9uZz5QZXJzb24gRGV0YWlsczwvc3Ryb25nPlxyXG5cdFx0XHRcdDxkaXY+TmFtZTogJHt0aGlzLnVzZXJEZXRhaWxzLm5hbWV9PC9kaXY+XHJcblx0XHRcdFx0PGRpdj5Db21wYW55OiAke3RoaXMudXNlckRldGFpbHMuY29tcGFueS5uYW1lfTwvZGl2PlxyXG5cdFx0XHRgO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sYDxkaXY+PC9kaXY+YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudFJlZiwgaHRtbCwgSW5qZWN0YWJsZSwgcmVuZGVyIH0gZnJvbSBcIkBwbHVtZWpzL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQHBsdW1lanMvcm91dGVyJztcclxuaW1wb3J0IHsgUGVyc29uRGV0YWlscyB9IGZyb20gJy4vcGVyc29uLWRldGFpbHMuY29tcG9uZW50JztcclxuaW1wb3J0IHBlcnNvbkxpc3RTdHlsZXMgZnJvbSAnLi9wZXJzb25zLWxpc3Quc2Nzcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFBlcnNvblNlcnZpY2Uge1xyXG5cdGdldFBlcnNvbnMoKSB7XHJcblx0XHRyZXR1cm4gZmV0Y2goXCJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdXNlcnNcIikudGhlbihyZXMgPT5cclxuXHRcdFx0cmVzLmpzb24oKVxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG5cdHNlbGVjdG9yOiBcInBlcnNvbnMtbGlzdFwiLFxyXG5cdHN0eWxlczogcGVyc29uTGlzdFN0eWxlcyxcclxuXHR1c2VTaGFkb3c6IGZhbHNlXHJcbn0pXHJcbmNsYXNzIFBlcnNvbnNMaXN0IHtcclxuXHRwZXJzb25kZXRhaWxzOiBhbnkgPSB7fTtcclxuXHR1cGRhdGU6IGFueTtcclxuXHR1c2Vyc0xpc3RSZWY6IEhUTUxFbGVtZW50O1xyXG5cdHBlcnNvbkRldGFpbHNSZWY6IENvbXBvbmVudFJlZjxQZXJzb25EZXRhaWxzPjtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBwZXJzb25TcnZjOiBQZXJzb25TZXJ2aWNlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XHJcblx0XHRjb25zb2xlLmxvZygnY3VycmVudCByb3V0ZSAnLCB0aGlzLnJvdXRlci5nZXRDdXJyZW50Um91dGUoKSk7XHJcblx0fVxyXG5cclxuXHRtb3VudCgpIHtcclxuXHRcdHRoaXMucGVyc29uU3J2Yy5nZXRQZXJzb25zKCkudGhlbihkYXRhID0+IHtcclxuXHRcdFx0dGhpcy5yZW5kZXJVc2VycyhkYXRhKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0YWxlcnROYW1lKHVzZXI6IGFueSkge1xyXG5cdFx0dGhpcy5wZXJzb25kZXRhaWxzID0gdXNlcjtcclxuXHRcdHRoaXMucGVyc29uRGV0YWlsc1JlZi5zZXRQcm9wcyh7IHVzZXJEZXRhaWxzOiB1c2VyIH0pO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSByZW5kZXJVc2VycyhkYXRhOiBBcnJheTxhbnk+KSB7XHJcblx0XHRjb25zdCBub2RlcyA9IGRhdGEubWFwKCh1c2VyOiBhbnkpID0+IHtcclxuXHRcdFx0cmV0dXJuIGh0bWxgXHJcblx0XHRcdFx0PGxpIGNsYXNzPSdwb2ludGVyJyBvbmNsaWNrPSR7KCkgPT4geyB0aGlzLmFsZXJ0TmFtZSh1c2VyKTsgfX0+XHJcblx0XHRcdFx0XHQke3VzZXIubmFtZX1cclxuXHRcdFx0XHQ8L2xpPlxyXG5cdFx0XHRgO1xyXG5cdFx0fSk7XHJcblx0XHRyZW5kZXIodGhpcy51c2Vyc0xpc3RSZWYsIGh0bWxgJHtub2Rlc31gKTtcclxuXHR9XHJcblxyXG5cdHJlbmRlcigpIHtcclxuXHRcdHJldHVybiBodG1sYFxyXG5cdFx0XHQ8aDQ+U2FtcGxlIHNlcnZpY2UgaW5qZWN0aW9uIHdpdGggaHR0cCBjYWxsIGFuZCBwYXNzaW5nIGRhdGEgdG8gb3RoZXIgY29tcG9uZW50PC9oND5cclxuXHRcdFx0Q3VycmVudCByb3V0ZSBkYXRhOiA8Y29kZT4ke0pTT04uc3RyaW5naWZ5KHRoaXMucm91dGVyLmdldEN1cnJlbnRSb3V0ZSgpLCBudWxsLCAyKX08L2NvZGU+XHJcblx0XHRcdDxkaXYgY2xhc3M9J210LTIwIG1iLTIwIGNvbnRlbnQnPlxyXG5cdFx0XHRcdDx1bCByZWY9XCIkeyhub2RlKSA9PiB7IHRoaXMudXNlcnNMaXN0UmVmID0gbm9kZTsgfX1cIiBjbGFzcz1cImJsb2NrLWxpc3QgaXMtc21hbGxcIj48L3VsPlxyXG5cdFx0XHRcdDxwZXJzb24tZGV0YWlscyBpZD1cInBlcnNvbi1kZXRhaWxzXCJcclxuXHRcdFx0XHRcdHJlZj1cIiR7KG5vZGUpID0+IHsgdGhpcy5wZXJzb25EZXRhaWxzUmVmID0gbm9kZTsgfX1cIlxyXG5cdFx0XHRcdD48L3BlcnNvbi1kZXRhaWxzPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdGA7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=