(self.webpackChunkplumejs_example_repo=self.webpackChunkplumejs_example_repo||[]).push([[309],{919:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(15),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,".modalDialog{position:fixed;top:0;bottom:0;left:0;right:0;z-index:1000;width:100%;height:100%;overflow-x:hidden;overflow-y:auto;background:rgba(0,0,0,.52);animation:modalIn .5s}.modalDialog .modalDialog-content{font-size:inherit;font-family:inherit;position:relative;background:#fff;z-index:1;width:auto;max-width:100%;margin:.5rem;box-shadow:0 5px 15px rgba(0,0,0,.5);border:1px solid rgba(0,0,0,.2);border-radius:2px;padding:10px}.modalDialog .modalDialog-content.out{transition:opacity .3s ease-out}.modalDialog .modalDialog-content.out:not(.in){opacity:0}.modalDialog .modalDialog-content .btn-close{cursor:pointer;border:none;outline:none;background:#fff;font-weight:600;font-size:2rem;line-height:1;position:absolute;right:0;top:0}@keyframes modalIn{from{opacity:0}to{opacity:1}}:host{width:100%}@media(min-width: 577px){.modalDialog .modalDialog-content{max-width:600px;margin:1.75rem auto}}","",{version:3,sources:["webpack://./node_modules/@plumejs/ui/dist/src/ui/modal/modal-component/modal.component.scss","webpack://./node_modules/@plumejs/ui/dist/src/_mixins.scss"],names:[],mappings:"AAEA,aACE,cAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,eAAA,CACA,0BAAA,CACA,qBAAA,CAEA,kCACE,iBAAA,CACA,mBAAA,CACA,iBAAA,CACA,eAAA,CACA,SAAA,CACA,UAAA,CACA,cAAA,CACA,YAAA,CACA,oCAAA,CACA,+BAAA,CACA,iBAAA,CACA,YAAA,CAEA,sCACE,+BAAA,CAEA,+CACE,SAAA,CAIJ,6CACE,cAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CACA,eAAA,CACA,cAAA,CACA,aAAA,CACA,iBAAA,CACA,OAAA,CACA,KAAA,CAKN,mBACE,KACI,SAAA,CAGJ,GACI,SAAA,CAAA,CAIN,MACE,UAAA,CCvCM,yBD2CN,kCACE,eAAA,CACA,mBAAA,CAAA",sourcesContent:["@import '../../../mixins';\r\n\r\n.modalDialog {\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  background: rgba(0, 0, 0, 0.52);\r\n  animation: modalIn 0.5s;\r\n\r\n  .modalDialog-content {\r\n    font-size: inherit;\r\n    font-family: inherit;\r\n    position: relative;\r\n    background: #fff;\r\n    z-index: 1;\r\n    width: auto;\r\n    max-width: 100%;\r\n    margin: 0.5rem;\r\n    box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\r\n    border: 1px solid rgba(0, 0, 0, .2);\r\n    border-radius: 2px;\r\n    padding: 10px;\r\n\r\n    &.out {\r\n      transition: opacity 0.3s ease-out;\r\n\r\n      &:not(.in) {\r\n        opacity: 0;\r\n      }\r\n    }\r\n\r\n    .btn-close {\r\n      cursor: pointer;\r\n      border: none;\r\n      outline: none;\r\n      background: #fff;\r\n      font-weight: 600;\r\n      font-size: 2rem;\r\n      line-height: 1;\r\n      position: absolute;\r\n      right: 0;\r\n      top: 0;\r\n    }\r\n  }  \r\n}\r\n\r\n@keyframes modalIn {\r\n  from {\r\n      opacity: 0;\r\n  }\r\n\r\n  to {\r\n      opacity: 1;\r\n  }\r\n}\r\n\r\n:host {\r\n  width: 100%;\r\n}\r\n\r\n@include breakpoint-up(md) {\r\n  .modalDialog .modalDialog-content {\r\n    max-width: 600px;\r\n    margin: 1.75rem auto;\r\n  }\r\n}\r\n","@mixin breakpoint($point) {\r\n    @if $point == sm {\r\n        @media (max-width: 576px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == md {\r\n        @media (min-width: 577px) and (max-width: 992px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == lg {\r\n        @media (min-width: 993px) and (max-width: 1200px) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin breakpoint-up($point) {\r\n    @if $point == sm {\r\n        @media (max-width: 576px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == md {\r\n        @media (min-width: 577px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == lg {\r\n        @media (min-width: 993px) {\r\n            @content;\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const l=s},93:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(15),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,'.multi-select-container{position:relative}.multi-select-container .multi-select-trigger{cursor:pointer;width:100%;font-size:inherit;font-family:inherit;border:1px solid #ccc;background-color:#fff;padding:.5rem 1rem;text-align:left;border-radius:2px;position:relative;padding-right:2.5rem}.multi-select-container .multi-select-trigger:focus{border-color:#ccc}.multi-select-container .multi-select-trigger:disabled{cursor:not-allowed;color:rgba(16,16,16,.3)}.multi-select-container .multi-select-trigger:after{border:3px solid transparent;border-radius:2px;border-right:0;border-top:0;content:" ";display:block;height:.625em;margin-top:-0.4375em;pointer-events:none;position:absolute;top:50%;transform:rotate(-45deg);transform-origin:center;width:.625em;border-color:#3273dc;right:1.125em;z-index:4}.multi-select-container .multi-select-popup{display:none;position:absolute;z-index:1;background-color:#fff;right:0;left:0;border:1px solid #ccc}.multi-select-container .multi-select-popup.show-popup{display:block;min-width:16rem}.multi-select-container .multi-select-popup .multi-select-filter{padding:.5rem 1rem}.multi-select-container .multi-select-popup .multi-select-filter .filter-input{font-size:inherit;font-family:inherit;width:100%;border:1px solid #ccc;border-radius:2px;padding:.3rem}.multi-select-container .multi-select-popup .multi-select-filter .filter-input:focus{border-color:#ccc}.multi-select-container .multi-select-popup .select-items-list{max-height:204px;overflow:auto}.multi-select-container .multi-select-popup .select-items-list .select-item{cursor:pointer;font-size:inherit;font-family:inherit;text-align:left;padding:.5rem 1rem;display:flex;align-items:center;margin:0}.multi-select-container .multi-select-popup .select-items-list .select-item input{margin-right:10px}.multi-select-container .multi-select-popup .select-items-list .select-item:not(.active):hover{background-color:#eee}.multi-select-container .multi-select-popup .select-items-list .select-item.active{background-color:#eee}.multi-select-container .multi-select-popup .select-items-list .select-item.hide-item{display:none}',"",{version:3,sources:["webpack://./node_modules/@plumejs/ui/dist/src/ui/multi-select/multi-select.component.scss"],names:[],mappings:"AAOA,wBACI,iBAAA,CAEA,8CACI,cAAA,CACA,UAAA,CACA,iBAAA,CACA,mBAAA,CACA,qBAAA,CACA,qBAfmB,CAgBnB,kBAZC,CAaD,eAAA,CACA,iBAAA,CACA,iBAAA,CACA,oBAAA,CAEA,oDACI,iBAxBW,CA2Bf,uDACI,kBAAA,CACA,uBAAA,CAGJ,oDACI,4BAAA,CACA,iBAAA,CACA,cAAA,CACA,YAAA,CACA,WAAA,CACA,aAAA,CACA,aAAA,CACA,oBAAA,CACA,mBAAA,CACA,iBAAA,CACA,OAAA,CACA,wBAAA,CACA,uBAAA,CACA,YAAA,CACA,oBAAA,CACA,aAAA,CACA,SAAA,CAIR,4CACI,YAAA,CACA,iBAAA,CACA,SAAA,CACA,qBAvDiB,CAwDjB,OAAA,CACA,MAAA,CACA,qBAAA,CAEA,uDACI,aAAA,CACA,eAAA,CAGJ,iEACI,kBA/DH,CAiEG,+EACI,iBAAA,CACA,mBAAA,CACA,UAAA,CACA,qBAAA,CACA,iBAAA,CACA,aAAA,CAEA,qFACI,iBA/EG,CAoFf,+DACI,gBAAA,CACA,aAAA,CAEA,4EACI,cAAA,CACA,iBAAA,CACA,mBAAA,CACA,eAAA,CACA,kBAxFP,CAyFO,YAAA,CACA,kBAAA,CACA,QAAA,CAEA,kFACI,iBAAA,CAGJ,+FACI,qBApGM,CAuGV,mFACI,qBAvGO,CA0GX,sFACI,YAAA",sourcesContent:['$trigger-border-color: #ccc;\r\n$trigger-background-color: #fff;\r\n$popup-background-color: #fff;\r\n$select-item-hover-color: #eee;\r\n$select-item-active-color: #eee;\r\n$padder: 0.5rem 1rem;\r\n\r\n.multi-select-container {\r\n    position: relative;\r\n\r\n    .multi-select-trigger {\r\n        cursor: pointer;\r\n        width: 100%;\r\n        font-size: inherit;\r\n        font-family: inherit;\r\n        border: 1px solid $trigger-border-color;\r\n        background-color: $trigger-background-color;\r\n        padding: $padder;\r\n        text-align: left;\r\n        border-radius: 2px;\r\n        position: relative;\r\n        padding-right: 2.5rem;\r\n\r\n        &:focus {\r\n            border-color: $trigger-border-color;\r\n        }\r\n\r\n        &:disabled {\r\n            cursor: not-allowed;\r\n            color: rgba(16, 16, 16, 0.3);\r\n        }\r\n\r\n        &:after {\r\n            border: 3px solid transparent;\r\n            border-radius: 2px;\r\n            border-right: 0;\r\n            border-top: 0;\r\n            content: " ";\r\n            display: block;\r\n            height: .625em;\r\n            margin-top: -.4375em;\r\n            pointer-events: none;\r\n            position: absolute;\r\n            top: 50%;\r\n            transform: rotate(-45deg);\r\n            transform-origin: center;\r\n            width: .625em;\r\n            border-color: #3273dc;\r\n            right: 1.125em;\r\n            z-index: 4;\r\n        }\r\n    }\r\n\r\n    .multi-select-popup {\r\n        display: none;\r\n        position: absolute;\r\n        z-index: 1;\r\n        background-color: $popup-background-color;\r\n        right: 0;\r\n        left: 0;\r\n        border: 1px solid $trigger-border-color;\r\n\r\n        &.show-popup {\r\n            display: block;\r\n            min-width: 16rem;\r\n        }\r\n\r\n        .multi-select-filter {\r\n            padding: $padder;\r\n\r\n            .filter-input {\r\n                font-size: inherit;\r\n                font-family: inherit;\r\n                width: 100%;\r\n                border: 1px solid $trigger-border-color;\r\n                border-radius: 2px;\r\n                padding: 0.3rem;\r\n\r\n                &:focus {\r\n                    border-color: $trigger-border-color;\r\n                }\r\n            }\r\n        }\r\n\r\n        .select-items-list {\r\n            max-height: 204px;\r\n            overflow: auto;\r\n\r\n            .select-item {\r\n                cursor: pointer;\r\n                font-size: inherit;\r\n                font-family: inherit;\r\n                text-align: left;\r\n                padding: $padder;\r\n                display: flex;\r\n                align-items: center;\r\n                margin: 0;\r\n\r\n                input {\r\n                    margin-right: 10px;\r\n                }\r\n\r\n                &:not(.active):hover {\r\n                    background-color: $select-item-hover-color;\r\n                }\r\n\r\n                &.active {\r\n                    background-color: $select-item-active-color;\r\n                }\r\n\r\n                &.hide-item {\r\n                    display: none;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'],sourceRoot:""}]);const l=s},537:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(15),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,".notifications_wrapper{position:fixed;top:3.5rem;right:0;padding:10px}.notifications_wrapper .notification{font-size:inherit;font-family:inherit;display:flex;justify-content:space-between;align-items:center;position:relative;margin-bottom:10px;right:0;z-index:1000;padding:10px;min-width:15rem;max-width:18rem;border-radius:2px;overflow:hidden;box-shadow:0 .25rem .75rem rgba(0,0,0,.2)}.notifications_wrapper .notification.is-info{background-color:#4a89dc}.notifications_wrapper .notification.is-info .dismiss{background-color:#3362cd;border-color:#005cbf}.notifications_wrapper .notification.is-danger{background-color:#da4453}.notifications_wrapper .notification.is-danger .dismiss{background-color:#c82333;border-color:#bd2130}.notifications_wrapper .notification.is-info,.notifications_wrapper .notification.is-danger{color:#fff}.notifications_wrapper .notification .dismiss{outline:0;border:none;cursor:pointer;border-radius:2px;color:#fff}.notifications_wrapper .notification .dismiss.hide-notify{display:none}@media(max-width: 576px){.notifications_wrapper{top:0;right:0;left:0;margin:0 auto;display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:100}}","",{version:3,sources:["webpack://./node_modules/@plumejs/ui/dist/src/ui/notifications/notification.component.scss","webpack://./node_modules/@plumejs/ui/dist/src/_mixins.scss"],names:[],mappings:"AAUA,uBACE,cAAA,CACA,UAAA,CACA,OAAA,CACA,YAAA,CAEA,qCACE,iBAAA,CACA,mBAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,iBAAA,CACA,kBAAA,CACA,OAAA,CACA,YAAA,CACA,YAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CACA,eAAA,CACA,yCAAA,CAEA,6CACE,wBAhCC,CAkCD,sDACE,wBAlCA,CAmCA,oBAlCM,CAsCV,+CACE,wBAtCA,CAwCA,wDACE,wBAxCD,CAyCC,oBAxCK,CA4CT,4FAEE,UA7CE,CAgDJ,8CACE,SAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,UArDE,CAuDF,0DACE,YAAA,CC9DA,yBDqEN,uBACE,KAAA,CACA,OAAA,CACA,MAAA,CACA,aAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,WAAA,CAAA",sourcesContent:["@import '../../mixins';\r\n\r\n$blue: #4A89DC;\r\n$blue1: #3362cd;\r\n$blue-border: #005cbf;\r\n$red: #DA4453;\r\n$red1: #c82333;\r\n$red-border: #bd2130;\r\n$white: #fff;\r\n\r\n.notifications_wrapper {\r\n  position: fixed;\r\n  top: 3.5rem;\r\n  right: 0;\r\n  padding: 10px;\r\n\r\n  .notification {\r\n    font-size: inherit;\r\n    font-family: inherit;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: relative;\r\n    margin-bottom: 10px;\r\n    right: 0;\r\n    z-index: 1000;\r\n    padding: 10px;\r\n    min-width: 15rem;\r\n    max-width: 18rem;\r\n    border-radius: 2px;\r\n    overflow: hidden;\r\n    box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,.2);\r\n\r\n    &.is-info {\r\n      background-color: $blue;\r\n\r\n      .dismiss {\r\n        background-color: $blue1;\r\n        border-color: $blue-border;\r\n      }\r\n    }\r\n\r\n    &.is-danger {\r\n      background-color: $red;\r\n\r\n      .dismiss {\r\n        background-color: $red1;\r\n        border-color: $red-border;\r\n      }\r\n    }\r\n\r\n    &.is-info,\r\n    &.is-danger {\r\n      color: $white;\r\n    }\r\n\r\n    .dismiss {\r\n      outline: 0;\r\n      border: none;\r\n      cursor: pointer;\r\n      border-radius: 2px;\r\n      color: $white;\r\n\r\n      &.hide-notify {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@include breakpoint(sm) {\r\n  .notifications_wrapper {\r\n    top: 0;\r\n    right: 0;\r\n    left: 0;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 100;\r\n  }\r\n}","@mixin breakpoint($point) {\r\n    @if $point == sm {\r\n        @media (max-width: 576px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == md {\r\n        @media (min-width: 577px) and (max-width: 992px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == lg {\r\n        @media (min-width: 993px) and (max-width: 1200px) {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin breakpoint-up($point) {\r\n    @if $point == sm {\r\n        @media (max-width: 576px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == md {\r\n        @media (min-width: 577px) {\r\n            @content;\r\n        }\r\n    }\r\n    @else if $point == lg {\r\n        @media (min-width: 993px) {\r\n            @content;\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const l=s},617:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(15),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,'.toggle-container{display:inline-flex}.toggle-container>input{display:none}.toggle-container>input+label{background:#bada55;cursor:pointer;text-indent:-9999px;width:2.5rem;height:1.6rem;background:gray;display:inline-block;margin:0 10px;border-radius:50px;position:relative}.toggle-container>input+label:after{content:"";position:absolute;top:5px;left:5px;width:1rem;height:1rem;background:#fff;border-radius:15px;transition:.3s}.toggle-container>input:checked+label{background-color:#007bff}.toggle-container>input:checked+label:after{left:calc(100% - 5px);transform:translateX(-100%)}',"",{version:3,sources:["webpack://./node_modules/@plumejs/ui/dist/src/ui/toggle/toggle.component.scss"],names:[],mappings:"AAAA,kBACI,mBAAA,CAEA,wBACI,YAAA,CAEA,8BACI,kBAAA,CACA,cAAA,CACA,mBAAA,CACA,YAAA,CACA,aAAA,CACA,eAAA,CACA,oBAAA,CACA,aAAA,CACA,kBAAA,CACA,iBAAA,CAEA,oCACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,kBAAA,CACA,cAAA,CAIR,sCACI,wBAAA,CAEA,4CACI,qBAAA,CACA,2BAAA",sourcesContent:[".toggle-container {\r\n    display: inline-flex;\r\n\r\n    & > input {\r\n        display: none;\r\n\r\n        &+label {\r\n            background: #bada55;\r\n            cursor: pointer;\r\n            text-indent: -9999px;\r\n            width: 2.5rem;\r\n            height: 1.6rem;\r\n            background: grey;\r\n            display: inline-block;\r\n            margin: 0 10px;\r\n            border-radius: 50px;\r\n            position: relative;\r\n\r\n            &:after {\r\n                content: '';\r\n                position: absolute;\r\n                top: 5px;\r\n                left: 5px;\r\n                width: 1rem;\r\n                height: 1rem;\r\n                background: #fff;\r\n                border-radius: 15px;\r\n                transition: 0.3s;\r\n            }\r\n        }\r\n\r\n        &:checked+label {\r\n            background-color: rgb(0, 123, 255);\r\n\r\n            &:after {\r\n                left: calc(100% - 5px);\r\n                transform: translateX(-100%);\r\n            }\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const l=s},309:(t,e,i)=>{"use strict";i.r(e);var n=i(298),o=i(939),r=i(919);(0,n.wA)({selector:"modal-dialog",styles:r.Z})(["DomTransition",class{constructor(t){this.domSrvc=t,this.ObservedProperties=["modalData"],this.onClose=new o.xQ,this.onOpen=new o.xQ,this.transitionDuration=300}mount(){this.domSrvc.onTransitionEnd(this.modalContentRef,(()=>{this.onOpen.next(),this.onOpen.complete()}),this.transitionDuration)}_close(){this.domSrvc.onTransitionEnd(this.modalContentRef,(()=>{this.onClose.next(),this.onClose.complete()}),this.transitionDuration),this.modalContentRef.classList.remove("in")}_renderModalCloseButton(){return this.modalData.hideDefaultCloseButton?n.dy``:n.dy`
        <button
          class="btn-close"
          onclick=${()=>{this._close()}}
        >
          &times;
        </button>
      `}render(){return n.dy`
      <div class="modalDialog">
        <div
          ref=${t=>{this.modalContentRef=t}}
          class="modalDialog-content in out"
        >
          <div class="title">
            ${this.modalData?this.modalData.title:""} ${this.modalData&&this._renderModalCloseButton()}
          </div>
          <div>${this.modalData&&this.modalData.bodyTemplate}</div>
        </div>
      </div>
    `}}]);(0,n.GS)("ModalService")([class{constructor(){this._modalList=new Map}_addChild(t,e=document.body){e.appendChild(t)}_removeChild(t,e=document.body){e.removeChild(t)}_addModal(t){const e=document.createElement("modal-dialog");this._addChild(e);const i=e,n=i.getInstance(),o=(new Date).getTime(),r={onClose:n.onClose,onOpen:n.onOpen,Id:o};return n.onClose.subscribe((()=>{this.close(r)})),i.setProps({modalData:{Id:o,title:t.modalTitle,bodyTemplate:t.renderTemplate(),backdrop:t.backdrop||!1,hideDefaultCloseButton:t.hideDefaultCloseButton||!1}}),t.modalClass&&e.classList.add(t.modalClass),this._modalList.set(o,e),r}show(t){if(!t.renderTemplate)throw Error("Provide renderTemplate function to render html inside modal component.");return this._addModal(t)}close(t){const e=this._modalList.get(t.Id);this._removeChild(e),this._modalList.delete(t.Id)}closeAll(){for(const t of this._modalList.values())this._removeChild(t);this._modalList.clear()}}]);const s=(0,i(745).R)(window,"click");var l=i(93);(0,n.wA)({selector:"multi-select",styles:l.Z})(["Renderer",class{constructor(t){this.renderer=t,this.ObservedProperties=["multiSelectOptions"],this._selectedOptions=[],this._searchText="",this._onButtonClickTrigger=this._onButtonClickTrigger.bind(this),this._filterList=this._filterList.bind(this)}onPropsChanged(){this.multiSelectOptions.resetWidget&&(this.multiSelectOptions.selectedValues=[],this._selectedOptions=[],this._buttonEle.textContent=this.multiSelectOptions.nonSelectedText||"Select",this._deselectInputonreset()),this.multiSelectOptions.selectedValues=this.multiSelectOptions.selectedValues?this.multiSelectOptions.selectedValues:[],this._selectedOptions=this.multiSelectOptions.selectedValues,this._setButtonTextOnInit(this.multiSelectOptions.multiple)}mount(){this._windowClickListner=s.subscribe((()=>{this._popupContainer.classList.remove("show-popup")}))}unmount(){this._windowClickListner.unsubscribe()}_setButtonTextOnInit(t){if(this._selectedOptions.length>0){const e="string"===typeof this._selectedOptions[0]?"":this.multiSelectOptions.displayField;this._setButtontext(t,e)}}_deselectInputonreset(){this._selectItemsListContainer.querySelectorAll(".active").forEach((t=>{t.classList.remove("active"),t.querySelector("input").checked=!1}))}_onButtonClickTrigger(){this._searchText="",this._filterItems(this._searchText.toLowerCase()),this._popupContainer.classList.toggle("show-popup")}_preventClickPropagation(t){t.stopPropagation()}_clearSelectionIfNotMultiple(t){t||this._popupContainer.querySelectorAll(".active").forEach((t=>t.classList.remove("active")))}_setButtontext(t,e){t?this.multiSelectOptions.buttonText?this._buttonText=this.multiSelectOptions.buttonText(this._selectedOptions):(this._buttonText=""!==e?this._selectedOptions.map((t=>t[e])).join(","):this._selectedOptions.join(","),0===this._selectedOptions.length&&(this._buttonText=this.multiSelectOptions.nonSelectedText||"Select")):this._buttonText=""!==e?this._selectedOptions[0][e]:this._selectedOptions[0],this._buttonEle&&(this._buttonEle.textContent=this._buttonText.translate())}_setupSelectedOptions(t,e){t?this._selectedOptions.push(e):this._selectedOptions=[e]}_onOptionSelected(t,e){const i=t.target,n=i.checked,o=this.multiSelectOptions.displayField||"",r=!!this.multiSelectOptions.multiple,s=r?this._selectedOptions:this._selectedOptions[0];this._clearSelectionIfNotMultiple(r),n?(i.parentElement.classList.add("active"),this._setupSelectedOptions(r,e)):(i.parentElement.classList.remove("active"),this._selectedOptions=this._selectedOptions.filter((t=>{if(t[o]!==e[o])return t}))),this._setButtontext(r,o),this.multiSelectOptions.onchange(s),r||this._popupContainer.classList.remove("show-popup")}_filterList(t){this._searchText=t.target.value,this._filterItems(this._searchText.toLowerCase())}_filterItems(t){Array.from(this._selectItemsListContainer.children).forEach((e=>{const i=e.textContent||e.innerText;t?-1!==i.toLowerCase().indexOf(t)?e.classList.remove("hide-item"):e.classList.add("hide-item"):e.classList.remove("hide-item")}))}_isItemExistsInSelectedValues(t,e){let i=-1;if(this.multiSelectOptions.selectedValues.length>0)if("string"==typeof t)i=e?this.multiSelectOptions.selectedValues.indexOf(t):[this.multiSelectOptions.selectedValues[0]].indexOf(t);else{const n=this.multiSelectOptions.displayField;i=e?this.multiSelectOptions.selectedValues.map((t=>t[n])).indexOf(t[n]):[this.multiSelectOptions.selectedValues[0]].map((t=>t[n])).indexOf(t[n])}return i>-1}_buildItem(t,e){const i=this.multiSelectOptions.multiple,o=this._isItemExistsInSelectedValues(t,i),r=typeof t;return i?n.dy` <label for="id-${e}" class="select-item">
        <input
          name="select"
          id="id-${e}"
          type="checkbox"
          checked=${o}
          onchange=${e=>{this._onOptionSelected(e,t)}}
        />
        ${"string"!==r?t[this.multiSelectOptions.displayField]:t}
      </label>`:n.dy` <label for="id-${e}" class="select-item">
        <input
          name="select"
          id="id-${e}"
          type="radio"
          checked=${o}
          onchange=${e=>{this._onOptionSelected(e,t)}}
        />
        ${"string"!==r?t[this.multiSelectOptions.displayField]:t}
      </label>`}_buildItems(){return this.multiSelectOptions.data.map(((t,e)=>this._buildItem(t,e)))}_renderFilterInput(){return this.multiSelectOptions.enableFilter?n.dy`
        <div class="multi-select-filter">
          <input class="filter-input" type="text" value="${this._searchText}" onkeyup=${this._filterList} />
        </div>
      `:n.dy``}render(){return this.multiSelectOptions&&this.multiSelectOptions.data.length>0?n.dy`
        <div class="multi-select-container" onclick=${this._preventClickPropagation}>
          <button
            ref=${t=>{this._buttonEle=t}}
            class="multi-select-trigger"
            onclick=${this._onButtonClickTrigger}
            disabled=${!!this.multiSelectOptions.disableDropdown}
          >
            ${this._buttonText.translate()}
          </button>
          <div
            ref=${t=>{this._popupContainer=t}}
            class="multi-select-popup"
          >
            ${this._renderFilterInput()}
            <div
              class="select-items-list"
              ref=${t=>{this._selectItemsListContainer=t}}
            >
              ${this._buildItems()}
            </div>
          </div>
        </div>
      `:n.dy`<div></div>`}}]);var a,A=i(537);(0,n.wA)({selector:"notification-container",styles:A.Z})(["Renderer",class{constructor(t){this.renderer=t,this._notifications=[],this.onDismiss=new o.xQ,this.dismiss=this.dismiss.bind(this)}setNotifications(t){this._notifications.push(t),t.index=this._notifications.length-1,this.renderer.update()}dismiss(t){this._notifications=this._notifications.filter((e=>{if(e.index!==t)return e})),this.renderer.update(),this.onDismiss.next(this._notifications.length)}_renderNotification(t,e){t.setProps({notification:e}),e.message.autoHide&&setTimeout((()=>{e.dismiss(e.message.index)}),2e3)}_renderNotifications(){if(this._notifications.length>0){return this._notifications.map((t=>{const e={message:t,dismiss:this.dismiss};return n.dy`
          <notification-message
            onrendered=${t=>{this._renderNotification(t.target,e)}}
          ></notification-message>
        `}))}return n.dy`<div></div>`}unmount(){this.onDismiss.complete()}render(){return n.dy` <div class="notifications_wrapper">${this._renderNotifications()}</div> `}}]);(0,n.wA)({selector:"notification-message",useShadow:!1})(["Renderer",class{constructor(t){this.renderer=t,this.ObservedProperties=["notification"]}mount(){this.renderer.emitEvent("rendered")}onDismiss(t){t.preventDefault(),this.notification.dismiss(this.notification.message.index)}render(){return this.notification&&this.notification.message.content?n.dy`
        <div
          class="notification ${"info"===this.notification.message.type?"is-info":"danger"===this.notification.message.type?"is-danger":""}"
        >
          ${this.notification.message.content}
          <button
            class="dismiss ${this.notification.message.autoHide?"hide-notify":""}"
            onclick=${t=>{this.onDismiss(t)}}
          >
            &times;
          </button>
        </div>
      `:n.dy`<div></div>`}}]),function(t){t.Info="info",t.Danger="danger"}(a||(a={}));class d{constructor(t,e=a.Info,i=!1){this.autoHide=!1,this.content=t,this.type=e,this.autoHide=i}}(0,n.GS)("NotificationService")([class{_addChild(t,e=document.body){e.appendChild(t)}_removeChild(t,e=document.body){e.removeChild(t)}_addMessage(t){let e=document.getElementsByTagName("notification-container")[0];if(e||(e=document.createElement("notification-container"),this._addChild(e)),!this._containerModel){const t=e;this._containerModel=t.getInstance(),this._containerModel.onDismiss.subscribe((t=>{0===t&&(this._removeChild(e),this._containerModel=null)}))}this._containerModel.setNotifications(t)}sendMessage(t,e=a.Info,i=!1){const n=new d(t,e,i);this._addMessage(n)}}]);var c=i(617);(0,n.wA)({selector:"toggle-button",styles:c.Z})([class{constructor(){this.ObservedProperties=["toggleOptions"],this._id=Math.random(),this.toggleChange=this.toggleChange.bind(this)}toggleChange(t){const e=t.target.checked;this.toggleOptions.onchange(e)}render(){return this.toggleOptions?n.dy` <div class="toggle-container">
        <span>${this.toggleOptions.offText?this.toggleOptions.offText.translate():""}</span>
        <input
          type="checkbox"
          id="${this._id}"
          checked="${!!this.toggleOptions.isSelected}"
          onchange=${this.toggleChange}
        />
        <label for="${this._id}"></label>
        <span>${this.toggleOptions.onText?this.toggleOptions.onText.translate():""}</span>
      </div>`:n.dy`<div></div>`}}]);(0,n.wA)({selector:"nested-modal"})(["ModalService",class{constructor(t){this.modalsrvc=t,this.ObservedProperties=["nestedModalData"]}openAnotherModal(){const t=this.modalsrvc.show({renderTemplate:()=>n.dy`<div>i'm nested modal</div>`,modalTitle:"nested modal",modalClass:"nested-class"});t.onOpen.subscribe((()=>{console.log("nested modal open")})),t.onClose.subscribe((()=>{console.log("nested modal closed")}))}render(){return this.nestedModalData?n.dy`
				<div>sample modal</div>
				<div>${this.nestedModalData.message}</div>
				<button
					class="button is-small is-info"
					onclick=${()=>{this.openAnotherModal()}}
				>
					open another modal
				</button>
			`:n.dy``}}]);(0,n.wA)({selector:"plume-comp"})(["Renderer","ModalService","NotificationService",class{constructor(t,e,i){this.renderer=t,this.modalsrvc=e,this.notifySrvc=i,this.toggleInput={onchange:this.onToggleChange.bind(this),onText:"ON",offText:"OFF"},this.multiselectToggles={enableMultiselect:{onchange:t=>{this.multiSelectOptions.multiple=t,this.multiSelectOptions.resetWidget=!0,this.multiSelectRef.setProps({multiSelectOptions:this.multiSelectOptions})}},disableDropdown:{onchange:t=>{this.multiSelectOptions.disableDropdown=t,this.multiSelectOptions.resetWidget=!0,this.multiSelectRef.setProps({multiSelectOptions:this.multiSelectOptions})}},enableFilter:{onchange:t=>{this.multiSelectOptions.enableFilter=t,this.multiSelectOptions.resetWidget=!0,this.multiSelectRef.setProps({multiSelectOptions:this.multiSelectOptions})}}},this.multiSelectOptions={data:[{name:"option1"},{name:"option2"},{name:"option3"},{name:"option4"},{name:"option5"}],selectedValues:[{name:"option1"},{name:"option2"}],displayField:"name",multiple:!1,disableDropdown:!1,buttonText:t=>0===t.length?"None selected":t.length>3?t.length+" selected":t.map((t=>t.name)).join(", "),onchange:t=>{console.log(t)}}}mount(){this.sampleToggleRef.setProps({toggleOptions:this.toggleInput}),this.enableMultiselectRef.setProps({toggleOptions:this.multiselectToggles.enableMultiselect}),this.disableDropdownRef.setProps({toggleOptions:this.multiselectToggles.disableDropdown}),this.enableFilterRef.setProps({toggleOptions:this.multiselectToggles.enableFilter}),this.multiSelectRef.setProps({multiSelectOptions:this.multiSelectOptions})}openModal(){const t=this.modalsrvc.show({renderTemplate:()=>n.dy`<nested-modal
					ref=${t=>{this.nestedModalRef=t}}
				></nested-modal>`,modalTitle:"testing modal",modalClass:"sample-class"});t.onOpen.subscribe((()=>{console.log("main modal open",t.Id),this.nestedModalRef.setProps({nestedModalData:{message:"Hello World"}})})),t.onClose.subscribe((()=>{console.log("main modal closed")}))}notify(){this.notifySrvc.sendMessage("hello world",a.Info)}notifyWithAutoHide(){this.notifySrvc.sendMessage("hello world",a.Info,!0)}onToggleChange(t){console.log(t)}render(){return n.dy`
			<div>
				<h2 class="title is-3 mb-20">Plumejs UI Control Collection</h2>
				<div class="mb-20">
					<h5 class="title is-5">Modal</h5>
					<button
						class="button is-small is-info"
						onclick=${()=>{this.openModal()}}
					>
						Open Modal
					</button>
				</div>
				<div class="mb-20">
					<h5 class="title is-5">Notification</h5>
					<button
						class="button is-small is-info mr-10"
						onclick=${()=>{this.notify()}}
					>
						Notify with action
					</button>
					<button
						class="button is-small is-info"
						onclick=${()=>{this.notifyWithAutoHide()}}
					>
						Notify with auto hide
					</button>
				</div>
				<div class="mb-20">
					<h5 class="title is-5">Toggle Button</h5>
					<toggle-button ref=${t=>{this.sampleToggleRef=t}}></toggle-button>
				</div>
				<div class="mb-20">
					<h5 class="title is-5">Multi select</h5>
					<div>
						<div class="is-flex mb-20">
							<span>enable multi select</span>
							<toggle-button
								ref=${t=>{this.enableMultiselectRef=t}}
							></toggle-button>
						</div>
						<div class="is-flex mb-20">
							<span>disable dropdown</span>
							<toggle-button
								ref=${t=>{this.disableDropdownRef=t}}
							></toggle-button>
						</div>
						<div class="is-flex mb-20">
							<span>enable filtering</span>
							<toggle-button
								ref=${t=>{this.enableFilterRef=t}}
							></toggle-button>
						</div>
					</div>
					<div class="is-flex">
						<multi-select
							ref=${t=>{this.multiSelectRef=t}}
						></multi-select>
					</div>
				</div>
			</div>
		`}}])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,